/*
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import xtext.factoryLang.shortDSL.ide.contentassist.antlr.internal.InternalShortDSLParser;
import xtext.factoryLang.shortDSL.services.ShortDSLGrammarAccess;

public class ShortDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ShortDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ShortDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDevice_ShortAccess().getAlternatives(), "rule__Device_Short__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getDSL_ShortAccess().getGroup(), "rule__DSL_Short__Group__0");
			builder.put(grammarAccess.getConfiguration_ShortAccess().getGroup(), "rule__Configuration_Short__Group__0");
			builder.put(grammarAccess.getCrane_ShortAccess().getGroup(), "rule__Crane_Short__Group__0");
			builder.put(grammarAccess.getCranePosition_ShortAccess().getGroup(), "rule__CranePosition_Short__Group__0");
			builder.put(grammarAccess.getDisk_ShortAccess().getGroup(), "rule__Disk_Short__Group__0");
			builder.put(grammarAccess.getDiskZone_ShortAccess().getGroup(), "rule__DiskZone_Short__Group__0");
			builder.put(grammarAccess.getCamera_ShortAccess().getGroup(), "rule__Camera_Short__Group__0");
			builder.put(grammarAccess.getCameraColor_ShortAccess().getGroup(), "rule__CameraColor_Short__Group__0");
			builder.put(grammarAccess.getDeviceHandling_ShortAccess().getGroup(), "rule__DeviceHandling_Short__Group__0");
			builder.put(grammarAccess.getModelAccess().getTypeAssignment_2(), "rule__Model__TypeAssignment_2");
			builder.put(grammarAccess.getDSL_ShortAccess().getConfigurationAssignment_1(), "rule__DSL_Short__ConfigurationAssignment_1");
			builder.put(grammarAccess.getDSL_ShortAccess().getDeviceHandlingsAssignment_2(), "rule__DSL_Short__DeviceHandlingsAssignment_2");
			builder.put(grammarAccess.getConfiguration_ShortAccess().getDevicesAssignment_3(), "rule__Configuration_Short__DevicesAssignment_3");
			builder.put(grammarAccess.getCrane_ShortAccess().getNameAssignment_0(), "rule__Crane_Short__NameAssignment_0");
			builder.put(grammarAccess.getCrane_ShortAccess().getPositionsAssignment_3(), "rule__Crane_Short__PositionsAssignment_3");
			builder.put(grammarAccess.getCranePosition_ShortAccess().getNameAssignment_0(), "rule__CranePosition_Short__NameAssignment_0");
			builder.put(grammarAccess.getCranePosition_ShortAccess().getPositionAssignment_2(), "rule__CranePosition_Short__PositionAssignment_2");
			builder.put(grammarAccess.getDisk_ShortAccess().getNameAssignment_0(), "rule__Disk_Short__NameAssignment_0");
			builder.put(grammarAccess.getDisk_ShortAccess().getNSlotsAssignment_2(), "rule__Disk_Short__NSlotsAssignment_2");
			builder.put(grammarAccess.getDisk_ShortAccess().getZonesAssignment_6(), "rule__Disk_Short__ZonesAssignment_6");
			builder.put(grammarAccess.getDiskZone_ShortAccess().getNameAssignment_0(), "rule__DiskZone_Short__NameAssignment_0");
			builder.put(grammarAccess.getDiskZone_ShortAccess().getSlotAssignment_2(), "rule__DiskZone_Short__SlotAssignment_2");
			builder.put(grammarAccess.getCamera_ShortAccess().getNameAssignment_0(), "rule__Camera_Short__NameAssignment_0");
			builder.put(grammarAccess.getCamera_ShortAccess().getColorsAssignment_3(), "rule__Camera_Short__ColorsAssignment_3");
			builder.put(grammarAccess.getCameraColor_ShortAccess().getNameAssignment_0(), "rule__CameraColor_Short__NameAssignment_0");
			builder.put(grammarAccess.getDeviceHandling_ShortAccess().getNameAssignment_1(), "rule__DeviceHandling_Short__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ShortDSLGrammarAccess grammarAccess;

	@Override
	protected InternalShortDSLParser createParser() {
		InternalShortDSLParser result = new InternalShortDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new ShortDSLTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ShortDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ShortDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
