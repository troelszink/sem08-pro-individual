/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.shortDSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.factoryLang.shortDSL.shortDSL.Disk;
import xtext.factoryLang.shortDSL.shortDSL.DiskHandlingS;
import xtext.factoryLang.shortDSL.shortDSL.ShortDSLPackage;
import xtext.factoryLang.shortDSL.shortDSL.StatementS;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Disk Handling S</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.DiskHandlingSImpl#getDisk <em>Disk</em>}</li>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.DiskHandlingSImpl#getStatements <em>Statements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DiskHandlingSImpl extends MinimalEObjectImpl.Container implements DiskHandlingS
{
  /**
   * The cached value of the '{@link #getDisk() <em>Disk</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDisk()
   * @generated
   * @ordered
   */
  protected Disk disk;

  /**
   * The cached value of the '{@link #getStatements() <em>Statements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatements()
   * @generated
   * @ordered
   */
  protected EList<StatementS> statements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DiskHandlingSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ShortDSLPackage.Literals.DISK_HANDLING_S;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Disk getDisk()
  {
    if (disk != null && disk.eIsProxy())
    {
      InternalEObject oldDisk = (InternalEObject)disk;
      disk = (Disk)eResolveProxy(oldDisk);
      if (disk != oldDisk)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ShortDSLPackage.DISK_HANDLING_S__DISK, oldDisk, disk));
      }
    }
    return disk;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Disk basicGetDisk()
  {
    return disk;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDisk(Disk newDisk)
  {
    Disk oldDisk = disk;
    disk = newDisk;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.DISK_HANDLING_S__DISK, oldDisk, disk));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<StatementS> getStatements()
  {
    if (statements == null)
    {
      statements = new EObjectContainmentEList<StatementS>(StatementS.class, this, ShortDSLPackage.DISK_HANDLING_S__STATEMENTS);
    }
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ShortDSLPackage.DISK_HANDLING_S__STATEMENTS:
        return ((InternalEList<?>)getStatements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ShortDSLPackage.DISK_HANDLING_S__DISK:
        if (resolve) return getDisk();
        return basicGetDisk();
      case ShortDSLPackage.DISK_HANDLING_S__STATEMENTS:
        return getStatements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ShortDSLPackage.DISK_HANDLING_S__DISK:
        setDisk((Disk)newValue);
        return;
      case ShortDSLPackage.DISK_HANDLING_S__STATEMENTS:
        getStatements().clear();
        getStatements().addAll((Collection<? extends StatementS>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.DISK_HANDLING_S__DISK:
        setDisk((Disk)null);
        return;
      case ShortDSLPackage.DISK_HANDLING_S__STATEMENTS:
        getStatements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.DISK_HANDLING_S__DISK:
        return disk != null;
      case ShortDSLPackage.DISK_HANDLING_S__STATEMENTS:
        return statements != null && !statements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //DiskHandlingSImpl
