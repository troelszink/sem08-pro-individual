/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.shortDSL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.factoryLang.shortDSL.shortDSL.DiskSlotStateValueS;
import xtext.factoryLang.shortDSL.shortDSL.DiskZone;
import xtext.factoryLang.shortDSL.shortDSL.MoveAnySlot;
import xtext.factoryLang.shortDSL.shortDSL.ShortDSLPackage;
import xtext.factoryLang.shortDSL.shortDSL.VariableS;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Move Any Slot</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.MoveAnySlotImpl#getState <em>State</em>}</li>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.MoveAnySlotImpl#getAnySlot <em>Any Slot</em>}</li>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.MoveAnySlotImpl#getZone <em>Zone</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MoveAnySlotImpl extends MoveSImpl implements MoveAnySlot
{
  /**
   * The cached value of the '{@link #getState() <em>State</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getState()
   * @generated
   * @ordered
   */
  protected DiskSlotStateValueS state;

  /**
   * The cached value of the '{@link #getAnySlot() <em>Any Slot</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnySlot()
   * @generated
   * @ordered
   */
  protected VariableS anySlot;

  /**
   * The cached value of the '{@link #getZone() <em>Zone</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getZone()
   * @generated
   * @ordered
   */
  protected DiskZone zone;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MoveAnySlotImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ShortDSLPackage.Literals.MOVE_ANY_SLOT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DiskSlotStateValueS getState()
  {
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetState(DiskSlotStateValueS newState, NotificationChain msgs)
  {
    DiskSlotStateValueS oldState = state;
    state = newState;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ShortDSLPackage.MOVE_ANY_SLOT__STATE, oldState, newState);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setState(DiskSlotStateValueS newState)
  {
    if (newState != state)
    {
      NotificationChain msgs = null;
      if (state != null)
        msgs = ((InternalEObject)state).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ShortDSLPackage.MOVE_ANY_SLOT__STATE, null, msgs);
      if (newState != null)
        msgs = ((InternalEObject)newState).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ShortDSLPackage.MOVE_ANY_SLOT__STATE, null, msgs);
      msgs = basicSetState(newState, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.MOVE_ANY_SLOT__STATE, newState, newState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableS getAnySlot()
  {
    return anySlot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAnySlot(VariableS newAnySlot, NotificationChain msgs)
  {
    VariableS oldAnySlot = anySlot;
    anySlot = newAnySlot;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ShortDSLPackage.MOVE_ANY_SLOT__ANY_SLOT, oldAnySlot, newAnySlot);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAnySlot(VariableS newAnySlot)
  {
    if (newAnySlot != anySlot)
    {
      NotificationChain msgs = null;
      if (anySlot != null)
        msgs = ((InternalEObject)anySlot).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ShortDSLPackage.MOVE_ANY_SLOT__ANY_SLOT, null, msgs);
      if (newAnySlot != null)
        msgs = ((InternalEObject)newAnySlot).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ShortDSLPackage.MOVE_ANY_SLOT__ANY_SLOT, null, msgs);
      msgs = basicSetAnySlot(newAnySlot, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.MOVE_ANY_SLOT__ANY_SLOT, newAnySlot, newAnySlot));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DiskZone getZone()
  {
    if (zone != null && zone.eIsProxy())
    {
      InternalEObject oldZone = (InternalEObject)zone;
      zone = (DiskZone)eResolveProxy(oldZone);
      if (zone != oldZone)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ShortDSLPackage.MOVE_ANY_SLOT__ZONE, oldZone, zone));
      }
    }
    return zone;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiskZone basicGetZone()
  {
    return zone;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setZone(DiskZone newZone)
  {
    DiskZone oldZone = zone;
    zone = newZone;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.MOVE_ANY_SLOT__ZONE, oldZone, zone));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ShortDSLPackage.MOVE_ANY_SLOT__STATE:
        return basicSetState(null, msgs);
      case ShortDSLPackage.MOVE_ANY_SLOT__ANY_SLOT:
        return basicSetAnySlot(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ShortDSLPackage.MOVE_ANY_SLOT__STATE:
        return getState();
      case ShortDSLPackage.MOVE_ANY_SLOT__ANY_SLOT:
        return getAnySlot();
      case ShortDSLPackage.MOVE_ANY_SLOT__ZONE:
        if (resolve) return getZone();
        return basicGetZone();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ShortDSLPackage.MOVE_ANY_SLOT__STATE:
        setState((DiskSlotStateValueS)newValue);
        return;
      case ShortDSLPackage.MOVE_ANY_SLOT__ANY_SLOT:
        setAnySlot((VariableS)newValue);
        return;
      case ShortDSLPackage.MOVE_ANY_SLOT__ZONE:
        setZone((DiskZone)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.MOVE_ANY_SLOT__STATE:
        setState((DiskSlotStateValueS)null);
        return;
      case ShortDSLPackage.MOVE_ANY_SLOT__ANY_SLOT:
        setAnySlot((VariableS)null);
        return;
      case ShortDSLPackage.MOVE_ANY_SLOT__ZONE:
        setZone((DiskZone)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.MOVE_ANY_SLOT__STATE:
        return state != null;
      case ShortDSLPackage.MOVE_ANY_SLOT__ANY_SLOT:
        return anySlot != null;
      case ShortDSLPackage.MOVE_ANY_SLOT__ZONE:
        return zone != null;
    }
    return super.eIsSet(featureID);
  }

} //MoveAnySlotImpl
