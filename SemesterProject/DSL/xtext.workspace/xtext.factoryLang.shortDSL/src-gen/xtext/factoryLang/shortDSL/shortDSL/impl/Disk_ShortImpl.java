/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.shortDSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.factoryLang.shortDSL.shortDSL.DiskZone_Short;
import xtext.factoryLang.shortDSL.shortDSL.Disk_Short;
import xtext.factoryLang.shortDSL.shortDSL.ShortDSLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Disk Short</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.Disk_ShortImpl#getNSlots <em>NSlots</em>}</li>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.Disk_ShortImpl#getZones <em>Zones</em>}</li>
 * </ul>
 *
 * @generated
 */
public class Disk_ShortImpl extends Device_ShortImpl implements Disk_Short
{
  /**
   * The default value of the '{@link #getNSlots() <em>NSlots</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNSlots()
   * @generated
   * @ordered
   */
  protected static final int NSLOTS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getNSlots() <em>NSlots</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNSlots()
   * @generated
   * @ordered
   */
  protected int nSlots = NSLOTS_EDEFAULT;

  /**
   * The cached value of the '{@link #getZones() <em>Zones</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getZones()
   * @generated
   * @ordered
   */
  protected EList<DiskZone_Short> zones;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Disk_ShortImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ShortDSLPackage.Literals.DISK_SHORT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getNSlots()
  {
    return nSlots;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNSlots(int newNSlots)
  {
    int oldNSlots = nSlots;
    nSlots = newNSlots;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.DISK_SHORT__NSLOTS, oldNSlots, nSlots));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DiskZone_Short> getZones()
  {
    if (zones == null)
    {
      zones = new EObjectContainmentEList<DiskZone_Short>(DiskZone_Short.class, this, ShortDSLPackage.DISK_SHORT__ZONES);
    }
    return zones;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ShortDSLPackage.DISK_SHORT__ZONES:
        return ((InternalEList<?>)getZones()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ShortDSLPackage.DISK_SHORT__NSLOTS:
        return getNSlots();
      case ShortDSLPackage.DISK_SHORT__ZONES:
        return getZones();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ShortDSLPackage.DISK_SHORT__NSLOTS:
        setNSlots((Integer)newValue);
        return;
      case ShortDSLPackage.DISK_SHORT__ZONES:
        getZones().clear();
        getZones().addAll((Collection<? extends DiskZone_Short>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.DISK_SHORT__NSLOTS:
        setNSlots(NSLOTS_EDEFAULT);
        return;
      case ShortDSLPackage.DISK_SHORT__ZONES:
        getZones().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.DISK_SHORT__NSLOTS:
        return nSlots != NSLOTS_EDEFAULT;
      case ShortDSLPackage.DISK_SHORT__ZONES:
        return zones != null && !zones.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (nSlots: ");
    result.append(nSlots);
    result.append(')');
    return result.toString();
  }

} //Disk_ShortImpl
