/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.shortDSL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.factoryLang.shortDSL.shortDSL.ConditionDevice;
import xtext.factoryLang.shortDSL.shortDSL.DeviceS;
import xtext.factoryLang.shortDSL.shortDSL.DeviceValueS;
import xtext.factoryLang.shortDSL.shortDSL.ShortDSLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Condition Device</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.ConditionDeviceImpl#getDevice <em>Device</em>}</li>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.ConditionDeviceImpl#getDeviceValue <em>Device Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionDeviceImpl extends ConditionSImpl implements ConditionDevice
{
  /**
   * The cached value of the '{@link #getDevice() <em>Device</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDevice()
   * @generated
   * @ordered
   */
  protected DeviceS device;

  /**
   * The cached value of the '{@link #getDeviceValue() <em>Device Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeviceValue()
   * @generated
   * @ordered
   */
  protected DeviceValueS deviceValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionDeviceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ShortDSLPackage.Literals.CONDITION_DEVICE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeviceS getDevice()
  {
    if (device != null && device.eIsProxy())
    {
      InternalEObject oldDevice = (InternalEObject)device;
      device = (DeviceS)eResolveProxy(oldDevice);
      if (device != oldDevice)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ShortDSLPackage.CONDITION_DEVICE__DEVICE, oldDevice, device));
      }
    }
    return device;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeviceS basicGetDevice()
  {
    return device;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDevice(DeviceS newDevice)
  {
    DeviceS oldDevice = device;
    device = newDevice;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.CONDITION_DEVICE__DEVICE, oldDevice, device));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeviceValueS getDeviceValue()
  {
    return deviceValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeviceValue(DeviceValueS newDeviceValue, NotificationChain msgs)
  {
    DeviceValueS oldDeviceValue = deviceValue;
    deviceValue = newDeviceValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ShortDSLPackage.CONDITION_DEVICE__DEVICE_VALUE, oldDeviceValue, newDeviceValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDeviceValue(DeviceValueS newDeviceValue)
  {
    if (newDeviceValue != deviceValue)
    {
      NotificationChain msgs = null;
      if (deviceValue != null)
        msgs = ((InternalEObject)deviceValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ShortDSLPackage.CONDITION_DEVICE__DEVICE_VALUE, null, msgs);
      if (newDeviceValue != null)
        msgs = ((InternalEObject)newDeviceValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ShortDSLPackage.CONDITION_DEVICE__DEVICE_VALUE, null, msgs);
      msgs = basicSetDeviceValue(newDeviceValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.CONDITION_DEVICE__DEVICE_VALUE, newDeviceValue, newDeviceValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ShortDSLPackage.CONDITION_DEVICE__DEVICE_VALUE:
        return basicSetDeviceValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ShortDSLPackage.CONDITION_DEVICE__DEVICE:
        if (resolve) return getDevice();
        return basicGetDevice();
      case ShortDSLPackage.CONDITION_DEVICE__DEVICE_VALUE:
        return getDeviceValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ShortDSLPackage.CONDITION_DEVICE__DEVICE:
        setDevice((DeviceS)newValue);
        return;
      case ShortDSLPackage.CONDITION_DEVICE__DEVICE_VALUE:
        setDeviceValue((DeviceValueS)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.CONDITION_DEVICE__DEVICE:
        setDevice((DeviceS)null);
        return;
      case ShortDSLPackage.CONDITION_DEVICE__DEVICE_VALUE:
        setDeviceValue((DeviceValueS)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.CONDITION_DEVICE__DEVICE:
        return device != null;
      case ShortDSLPackage.CONDITION_DEVICE__DEVICE_VALUE:
        return deviceValue != null;
    }
    return super.eIsSet(featureID);
  }

} //ConditionDeviceImpl
