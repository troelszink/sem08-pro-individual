/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.shortDSL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.factoryLang.shortDSL.shortDSL.ConditionSlot;
import xtext.factoryLang.shortDSL.shortDSL.ShortDSLPackage;
import xtext.factoryLang.shortDSL.shortDSL.SlotVariable;
import xtext.factoryLang.shortDSL.shortDSL.ValueSlotS;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Condition Slot</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.ConditionSlotImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.ConditionSlotImpl#getSlotValue <em>Slot Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionSlotImpl extends ConditionSImpl implements ConditionSlot
{
  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected SlotVariable variable;

  /**
   * The cached value of the '{@link #getSlotValue() <em>Slot Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSlotValue()
   * @generated
   * @ordered
   */
  protected ValueSlotS slotValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionSlotImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ShortDSLPackage.Literals.CONDITION_SLOT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SlotVariable getVariable()
  {
    if (variable != null && variable.eIsProxy())
    {
      InternalEObject oldVariable = (InternalEObject)variable;
      variable = (SlotVariable)eResolveProxy(oldVariable);
      if (variable != oldVariable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ShortDSLPackage.CONDITION_SLOT__VARIABLE, oldVariable, variable));
      }
    }
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SlotVariable basicGetVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(SlotVariable newVariable)
  {
    SlotVariable oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.CONDITION_SLOT__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueSlotS getSlotValue()
  {
    return slotValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSlotValue(ValueSlotS newSlotValue, NotificationChain msgs)
  {
    ValueSlotS oldSlotValue = slotValue;
    slotValue = newSlotValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ShortDSLPackage.CONDITION_SLOT__SLOT_VALUE, oldSlotValue, newSlotValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSlotValue(ValueSlotS newSlotValue)
  {
    if (newSlotValue != slotValue)
    {
      NotificationChain msgs = null;
      if (slotValue != null)
        msgs = ((InternalEObject)slotValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ShortDSLPackage.CONDITION_SLOT__SLOT_VALUE, null, msgs);
      if (newSlotValue != null)
        msgs = ((InternalEObject)newSlotValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ShortDSLPackage.CONDITION_SLOT__SLOT_VALUE, null, msgs);
      msgs = basicSetSlotValue(newSlotValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.CONDITION_SLOT__SLOT_VALUE, newSlotValue, newSlotValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ShortDSLPackage.CONDITION_SLOT__SLOT_VALUE:
        return basicSetSlotValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ShortDSLPackage.CONDITION_SLOT__VARIABLE:
        if (resolve) return getVariable();
        return basicGetVariable();
      case ShortDSLPackage.CONDITION_SLOT__SLOT_VALUE:
        return getSlotValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ShortDSLPackage.CONDITION_SLOT__VARIABLE:
        setVariable((SlotVariable)newValue);
        return;
      case ShortDSLPackage.CONDITION_SLOT__SLOT_VALUE:
        setSlotValue((ValueSlotS)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.CONDITION_SLOT__VARIABLE:
        setVariable((SlotVariable)null);
        return;
      case ShortDSLPackage.CONDITION_SLOT__SLOT_VALUE:
        setSlotValue((ValueSlotS)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.CONDITION_SLOT__VARIABLE:
        return variable != null;
      case ShortDSLPackage.CONDITION_SLOT__SLOT_VALUE:
        return slotValue != null;
    }
    return super.eIsSet(featureID);
  }

} //ConditionSlotImpl
