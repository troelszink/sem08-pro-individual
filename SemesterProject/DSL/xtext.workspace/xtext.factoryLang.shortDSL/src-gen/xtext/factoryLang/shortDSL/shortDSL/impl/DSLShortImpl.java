/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.shortDSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.factoryLang.shortDSL.shortDSL.ConfigurationS;
import xtext.factoryLang.shortDSL.shortDSL.DSLShort;
import xtext.factoryLang.shortDSL.shortDSL.DiskHandlingS;
import xtext.factoryLang.shortDSL.shortDSL.ShortDSLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>DSL Short</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.DSLShortImpl#getConfiguration <em>Configuration</em>}</li>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.DSLShortImpl#getDiskHandlings <em>Disk Handlings</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DSLShortImpl extends DSLProgramImpl implements DSLShort
{
  /**
   * The cached value of the '{@link #getConfiguration() <em>Configuration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConfiguration()
   * @generated
   * @ordered
   */
  protected ConfigurationS configuration;

  /**
   * The cached value of the '{@link #getDiskHandlings() <em>Disk Handlings</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDiskHandlings()
   * @generated
   * @ordered
   */
  protected EList<DiskHandlingS> diskHandlings;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DSLShortImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ShortDSLPackage.Literals.DSL_SHORT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConfigurationS getConfiguration()
  {
    return configuration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConfiguration(ConfigurationS newConfiguration, NotificationChain msgs)
  {
    ConfigurationS oldConfiguration = configuration;
    configuration = newConfiguration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ShortDSLPackage.DSL_SHORT__CONFIGURATION, oldConfiguration, newConfiguration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConfiguration(ConfigurationS newConfiguration)
  {
    if (newConfiguration != configuration)
    {
      NotificationChain msgs = null;
      if (configuration != null)
        msgs = ((InternalEObject)configuration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ShortDSLPackage.DSL_SHORT__CONFIGURATION, null, msgs);
      if (newConfiguration != null)
        msgs = ((InternalEObject)newConfiguration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ShortDSLPackage.DSL_SHORT__CONFIGURATION, null, msgs);
      msgs = basicSetConfiguration(newConfiguration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.DSL_SHORT__CONFIGURATION, newConfiguration, newConfiguration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DiskHandlingS> getDiskHandlings()
  {
    if (diskHandlings == null)
    {
      diskHandlings = new EObjectContainmentEList<DiskHandlingS>(DiskHandlingS.class, this, ShortDSLPackage.DSL_SHORT__DISK_HANDLINGS);
    }
    return diskHandlings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ShortDSLPackage.DSL_SHORT__CONFIGURATION:
        return basicSetConfiguration(null, msgs);
      case ShortDSLPackage.DSL_SHORT__DISK_HANDLINGS:
        return ((InternalEList<?>)getDiskHandlings()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ShortDSLPackage.DSL_SHORT__CONFIGURATION:
        return getConfiguration();
      case ShortDSLPackage.DSL_SHORT__DISK_HANDLINGS:
        return getDiskHandlings();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ShortDSLPackage.DSL_SHORT__CONFIGURATION:
        setConfiguration((ConfigurationS)newValue);
        return;
      case ShortDSLPackage.DSL_SHORT__DISK_HANDLINGS:
        getDiskHandlings().clear();
        getDiskHandlings().addAll((Collection<? extends DiskHandlingS>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.DSL_SHORT__CONFIGURATION:
        setConfiguration((ConfigurationS)null);
        return;
      case ShortDSLPackage.DSL_SHORT__DISK_HANDLINGS:
        getDiskHandlings().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.DSL_SHORT__CONFIGURATION:
        return configuration != null;
      case ShortDSLPackage.DSL_SHORT__DISK_HANDLINGS:
        return diskHandlings != null && !diskHandlings.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //DSLShortImpl
