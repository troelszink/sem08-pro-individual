/*
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import xtext.factoryLang.shortDSL.services.ShortDSLGrammarAccess;
import xtext.factoryLang.shortDSL.shortDSL.CameraColor_Short;
import xtext.factoryLang.shortDSL.shortDSL.Camera_Short;
import xtext.factoryLang.shortDSL.shortDSL.Configuration_Short;
import xtext.factoryLang.shortDSL.shortDSL.CranePosition_Short;
import xtext.factoryLang.shortDSL.shortDSL.Crane_Short;
import xtext.factoryLang.shortDSL.shortDSL.DSLShort;
import xtext.factoryLang.shortDSL.shortDSL.DeviceHandling_Short;
import xtext.factoryLang.shortDSL.shortDSL.DiskZone_Short;
import xtext.factoryLang.shortDSL.shortDSL.Disk_Short;
import xtext.factoryLang.shortDSL.shortDSL.Model;
import xtext.factoryLang.shortDSL.shortDSL.ShortDSLPackage;

@SuppressWarnings("all")
public class ShortDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ShortDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ShortDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ShortDSLPackage.CAMERA_COLOR_SHORT:
				sequence_CameraColor_Short(context, (CameraColor_Short) semanticObject); 
				return; 
			case ShortDSLPackage.CAMERA_SHORT:
				sequence_Camera_Short(context, (Camera_Short) semanticObject); 
				return; 
			case ShortDSLPackage.CONFIGURATION_SHORT:
				sequence_Configuration_Short(context, (Configuration_Short) semanticObject); 
				return; 
			case ShortDSLPackage.CRANE_POSITION_SHORT:
				sequence_CranePosition_Short(context, (CranePosition_Short) semanticObject); 
				return; 
			case ShortDSLPackage.CRANE_SHORT:
				sequence_Crane_Short(context, (Crane_Short) semanticObject); 
				return; 
			case ShortDSLPackage.DSL_SHORT:
				sequence_DSL_Short(context, (DSLShort) semanticObject); 
				return; 
			case ShortDSLPackage.DEVICE_HANDLING_SHORT:
				sequence_DeviceHandling_Short(context, (DeviceHandling_Short) semanticObject); 
				return; 
			case ShortDSLPackage.DISK_ZONE_SHORT:
				sequence_DiskZone_Short(context, (DiskZone_Short) semanticObject); 
				return; 
			case ShortDSLPackage.DISK_SHORT:
				sequence_Disk_Short(context, (Disk_Short) semanticObject); 
				return; 
			case ShortDSLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CameraColor_Short returns CameraColor_Short
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_CameraColor_Short(ISerializationContext context, CameraColor_Short semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ShortDSLPackage.Literals.CAMERA_COLOR_SHORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ShortDSLPackage.Literals.CAMERA_COLOR_SHORT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCameraColor_ShortAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Device_Short returns Camera_Short
	 *     Camera_Short returns Camera_Short
	 *
	 * Constraint:
	 *     (name=ID colors+=CameraColor_Short+)
	 */
	protected void sequence_Camera_Short(ISerializationContext context, Camera_Short semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Configuration_Short returns Configuration_Short
	 *
	 * Constraint:
	 *     devices+=Device_Short+
	 */
	protected void sequence_Configuration_Short(ISerializationContext context, Configuration_Short semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CranePosition_Short returns CranePosition_Short
	 *
	 * Constraint:
	 *     (name=ID position=INT)
	 */
	protected void sequence_CranePosition_Short(ISerializationContext context, CranePosition_Short semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ShortDSLPackage.Literals.CRANE_POSITION_SHORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ShortDSLPackage.Literals.CRANE_POSITION_SHORT__NAME));
			if (transientValues.isValueTransient(semanticObject, ShortDSLPackage.Literals.CRANE_POSITION_SHORT__POSITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ShortDSLPackage.Literals.CRANE_POSITION_SHORT__POSITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCranePosition_ShortAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCranePosition_ShortAccess().getPositionINTTerminalRuleCall_2_0(), semanticObject.getPosition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Device_Short returns Crane_Short
	 *     Crane_Short returns Crane_Short
	 *
	 * Constraint:
	 *     (name=ID positions+=CranePosition_Short+)
	 */
	protected void sequence_Crane_Short(ISerializationContext context, Crane_Short semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Short returns DSLShort
	 *
	 * Constraint:
	 *     (configuration=Configuration_Short deviceHandlings+=DeviceHandling_Short)
	 */
	protected void sequence_DSL_Short(ISerializationContext context, DSLShort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DeviceHandling_Short returns DeviceHandling_Short
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DeviceHandling_Short(ISerializationContext context, DeviceHandling_Short semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ShortDSLPackage.Literals.DEVICE_HANDLING_SHORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ShortDSLPackage.Literals.DEVICE_HANDLING_SHORT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeviceHandling_ShortAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DiskZone_Short returns DiskZone_Short
	 *
	 * Constraint:
	 *     (name=ID slot=INT)
	 */
	protected void sequence_DiskZone_Short(ISerializationContext context, DiskZone_Short semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ShortDSLPackage.Literals.DISK_ZONE_SHORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ShortDSLPackage.Literals.DISK_ZONE_SHORT__NAME));
			if (transientValues.isValueTransient(semanticObject, ShortDSLPackage.Literals.DISK_ZONE_SHORT__SLOT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ShortDSLPackage.Literals.DISK_ZONE_SHORT__SLOT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiskZone_ShortAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDiskZone_ShortAccess().getSlotINTTerminalRuleCall_2_0(), semanticObject.getSlot());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Device_Short returns Disk_Short
	 *     Disk_Short returns Disk_Short
	 *
	 * Constraint:
	 *     (name=ID nSlots=INT zones+=DiskZone_Short+)
	 */
	protected void sequence_Disk_Short(ISerializationContext context, Disk_Short semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     type=DSL_Short
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ShortDSLPackage.Literals.MODEL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ShortDSLPackage.Literals.MODEL__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAccess().getTypeDSL_ShortParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
}
