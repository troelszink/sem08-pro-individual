/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.shortDSL.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import xtext.factoryLang.shortDSL.shortDSL.Camera;
import xtext.factoryLang.shortDSL.shortDSL.CameraColor;
import xtext.factoryLang.shortDSL.shortDSL.ColorValueS;
import xtext.factoryLang.shortDSL.shortDSL.ConditionDevice;
import xtext.factoryLang.shortDSL.shortDSL.ConditionS;
import xtext.factoryLang.shortDSL.shortDSL.ConditionSlot;
import xtext.factoryLang.shortDSL.shortDSL.ConditionVariable;
import xtext.factoryLang.shortDSL.shortDSL.ConfigurationS;
import xtext.factoryLang.shortDSL.shortDSL.ConfigurationValueS;
import xtext.factoryLang.shortDSL.shortDSL.Crane;
import xtext.factoryLang.shortDSL.shortDSL.CraneAction;
import xtext.factoryLang.shortDSL.shortDSL.CraneActionS;
import xtext.factoryLang.shortDSL.shortDSL.CraneZone;
import xtext.factoryLang.shortDSL.shortDSL.DSLLong;
import xtext.factoryLang.shortDSL.shortDSL.DSLProgram;
import xtext.factoryLang.shortDSL.shortDSL.DSLShort;
import xtext.factoryLang.shortDSL.shortDSL.DSLTypeValue;
import xtext.factoryLang.shortDSL.shortDSL.DeviceS;
import xtext.factoryLang.shortDSL.shortDSL.DeviceValueS;
import xtext.factoryLang.shortDSL.shortDSL.Disk;
import xtext.factoryLang.shortDSL.shortDSL.DiskHandlingS;
import xtext.factoryLang.shortDSL.shortDSL.DiskSlotStateValueS;
import xtext.factoryLang.shortDSL.shortDSL.DiskStateValueS;
import xtext.factoryLang.shortDSL.shortDSL.DiskZone;
import xtext.factoryLang.shortDSL.shortDSL.Logging;
import xtext.factoryLang.shortDSL.shortDSL.LoggingS;
import xtext.factoryLang.shortDSL.shortDSL.LoopSlot;
import xtext.factoryLang.shortDSL.shortDSL.LoopVariable;
import xtext.factoryLang.shortDSL.shortDSL.MarkCameraValue;
import xtext.factoryLang.shortDSL.shortDSL.MarkS;
import xtext.factoryLang.shortDSL.shortDSL.MarkVariableValue;
import xtext.factoryLang.shortDSL.shortDSL.Model;
import xtext.factoryLang.shortDSL.shortDSL.MoveAnySlot;
import xtext.factoryLang.shortDSL.shortDSL.MoveCrane;
import xtext.factoryLang.shortDSL.shortDSL.MoveDisk;
import xtext.factoryLang.shortDSL.shortDSL.MoveS;
import xtext.factoryLang.shortDSL.shortDSL.NumberS;
import xtext.factoryLang.shortDSL.shortDSL.OrdinaryVariable;
import xtext.factoryLang.shortDSL.shortDSL.ShortDSLFactory;
import xtext.factoryLang.shortDSL.shortDSL.ShortDSLPackage;
import xtext.factoryLang.shortDSL.shortDSL.SlotVariable;
import xtext.factoryLang.shortDSL.shortDSL.StatementS;
import xtext.factoryLang.shortDSL.shortDSL.ValueSlotS;
import xtext.factoryLang.shortDSL.shortDSL.VariableS;
import xtext.factoryLang.shortDSL.shortDSL.VariableValueS;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ShortDSLPackageImpl extends EPackageImpl implements ShortDSLPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslProgramEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass configurationSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass deviceSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass configurationValueSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass loggingSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskHandlingSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moveSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass craneActionSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass markSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableValueSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass deviceValueSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass valueSlotSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslTypeValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskStateValueSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskSlotStateValueSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass colorValueSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass numberSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslLongEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslShortEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass craneEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass craneZoneEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskZoneEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cameraEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cameraColorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass loggingEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass loopVariableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass loopSlotEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moveDiskEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moveAnySlotEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moveCraneEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass craneActionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionVariableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionSlotEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionDeviceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass markVariableValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass markCameraValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ordinaryVariableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass slotVariableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum dsL_TYPE_ENUMEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum comparisoN_OPERATOR_SEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum coloR_SEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum disK_SLOT_STATES_SEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum disK_STATES_SEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum timE_UNIT_SEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see xtext.factoryLang.shortDSL.shortDSL.ShortDSLPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private ShortDSLPackageImpl()
  {
    super(eNS_URI, ShortDSLFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link ShortDSLPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static ShortDSLPackage init()
  {
    if (isInited) return (ShortDSLPackage)EPackage.Registry.INSTANCE.getEPackage(ShortDSLPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredShortDSLPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    ShortDSLPackageImpl theShortDSLPackage = registeredShortDSLPackage instanceof ShortDSLPackageImpl ? (ShortDSLPackageImpl)registeredShortDSLPackage : new ShortDSLPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theShortDSLPackage.createPackageContents();

    // Initialize created meta-data
    theShortDSLPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theShortDSLPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(ShortDSLPackage.eNS_URI, theShortDSLPackage);
    return theShortDSLPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_DslType()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_DslProgram()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLProgram()
  {
    return dslProgramEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConfigurationS()
  {
    return configurationSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConfigurationS_Devices()
  {
    return (EReference)configurationSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDeviceS()
  {
    return deviceSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDeviceS_Name()
  {
    return (EAttribute)deviceSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeviceS_Logging()
  {
    return (EReference)deviceSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeviceS_Targets()
  {
    return (EReference)deviceSEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConfigurationValueS()
  {
    return configurationValueSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLoggingS()
  {
    return loggingSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskHandlingS()
  {
    return diskHandlingSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiskHandlingS_Disk()
  {
    return (EReference)diskHandlingSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiskHandlingS_Statements()
  {
    return (EReference)diskHandlingSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStatementS()
  {
    return statementSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMoveS()
  {
    return moveSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCraneActionS()
  {
    return craneActionSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConditionS()
  {
    return conditionSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConditionS_ComparisonOperator()
  {
    return (EAttribute)conditionSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionS_Statements()
  {
    return (EReference)conditionSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMarkS()
  {
    return markSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariableS()
  {
    return variableSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVariableS_Name()
  {
    return (EAttribute)variableSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariableValueS()
  {
    return variableValueSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVariableValueS_Value()
  {
    return (EReference)variableValueSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVariableValueS_Ref()
  {
    return (EReference)variableValueSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDeviceValueS()
  {
    return deviceValueSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeviceValueS_Value()
  {
    return (EReference)deviceValueSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeviceValueS_ConfigurationValue()
  {
    return (EReference)deviceValueSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getValueSlotS()
  {
    return valueSlotSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getValueSlotS_Value()
  {
    return (EReference)valueSlotSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLTypeValue()
  {
    return dslTypeValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLTypeValue_Value()
  {
    return (EAttribute)dslTypeValueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskStateValueS()
  {
    return diskStateValueSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiskStateValueS_Value()
  {
    return (EAttribute)diskStateValueSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskSlotStateValueS()
  {
    return diskSlotStateValueSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiskSlotStateValueS_Value()
  {
    return (EAttribute)diskSlotStateValueSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getColorValueS()
  {
    return colorValueSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getColorValueS_Value()
  {
    return (EAttribute)colorValueSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNumberS()
  {
    return numberSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNumberS_Value()
  {
    return (EAttribute)numberSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLLong()
  {
    return dslLongEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLLong_Name()
  {
    return (EAttribute)dslLongEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLShort()
  {
    return dslShortEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLShort_Configuration()
  {
    return (EReference)dslShortEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLShort_DiskHandlings()
  {
    return (EReference)dslShortEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCrane()
  {
    return craneEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCraneZone()
  {
    return craneZoneEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCraneZone_Name()
  {
    return (EAttribute)craneZoneEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCraneZone_ZoneValue()
  {
    return (EAttribute)craneZoneEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDisk()
  {
    return diskEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDisk_NSlots()
  {
    return (EAttribute)diskEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskZone()
  {
    return diskZoneEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiskZone_Name()
  {
    return (EAttribute)diskZoneEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiskZone_Slot()
  {
    return (EAttribute)diskZoneEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCamera()
  {
    return cameraEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCameraColor()
  {
    return cameraColorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCameraColor_Color()
  {
    return (EAttribute)cameraColorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLogging()
  {
    return loggingEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLoopVariable()
  {
    return loopVariableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLoopVariable_OrdinaryVariable()
  {
    return (EReference)loopVariableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLoopVariable_ComparisonOperator()
  {
    return (EAttribute)loopVariableEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLoopVariable_SlotState()
  {
    return (EReference)loopVariableEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLoopVariable_Statements()
  {
    return (EReference)loopVariableEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLoopSlot()
  {
    return loopSlotEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLoopSlot_SlotVariable()
  {
    return (EReference)loopSlotEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLoopSlot_ComparisonOperator()
  {
    return (EAttribute)loopSlotEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLoopSlot_SlotState()
  {
    return (EReference)loopSlotEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLoopSlot_Statements()
  {
    return (EReference)loopSlotEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMoveDisk()
  {
    return moveDiskEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMoveDisk_Slot()
  {
    return (EReference)moveDiskEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMoveDisk_Zone()
  {
    return (EReference)moveDiskEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMoveAnySlot()
  {
    return moveAnySlotEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMoveAnySlot_State()
  {
    return (EReference)moveAnySlotEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMoveAnySlot_AnySlot()
  {
    return (EReference)moveAnySlotEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMoveAnySlot_Zone()
  {
    return (EReference)moveAnySlotEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMoveCrane()
  {
    return moveCraneEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMoveCrane_Crane()
  {
    return (EReference)moveCraneEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMoveCrane_Action()
  {
    return (EReference)moveCraneEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMoveCrane_Zone()
  {
    return (EReference)moveCraneEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCraneAction()
  {
    return craneActionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConditionVariable()
  {
    return conditionVariableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionVariable_Variable()
  {
    return (EReference)conditionVariableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionVariable_VariableValue()
  {
    return (EReference)conditionVariableEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConditionSlot()
  {
    return conditionSlotEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionSlot_Variable()
  {
    return (EReference)conditionSlotEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionSlot_SlotValue()
  {
    return (EReference)conditionSlotEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConditionDevice()
  {
    return conditionDeviceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionDevice_Device()
  {
    return (EReference)conditionDeviceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionDevice_DeviceValue()
  {
    return (EReference)conditionDeviceEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMarkVariableValue()
  {
    return markVariableValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMarkVariableValue_Variable()
  {
    return (EReference)markVariableValueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMarkVariableValue_Value()
  {
    return (EReference)markVariableValueEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMarkVariableValue_Time()
  {
    return (EAttribute)markVariableValueEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMarkVariableValue_Unit()
  {
    return (EAttribute)markVariableValueEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMarkCameraValue()
  {
    return markCameraValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMarkCameraValue_Camera()
  {
    return (EReference)markCameraValueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMarkCameraValue_Variable()
  {
    return (EReference)markCameraValueEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOrdinaryVariable()
  {
    return ordinaryVariableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSlotVariable()
  {
    return slotVariableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getDSL_TYPE_ENUM()
  {
    return dsL_TYPE_ENUMEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getCOMPARISON_OPERATOR_S()
  {
    return comparisoN_OPERATOR_SEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getCOLOR_S()
  {
    return coloR_SEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getDISK_SLOT_STATES_S()
  {
    return disK_SLOT_STATES_SEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getDISK_STATES_S()
  {
    return disK_STATES_SEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getTIME_UNIT_S()
  {
    return timE_UNIT_SEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShortDSLFactory getShortDSLFactory()
  {
    return (ShortDSLFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEReference(modelEClass, MODEL__DSL_TYPE);
    createEReference(modelEClass, MODEL__DSL_PROGRAM);

    dslProgramEClass = createEClass(DSL_PROGRAM);

    configurationSEClass = createEClass(CONFIGURATION_S);
    createEReference(configurationSEClass, CONFIGURATION_S__DEVICES);

    deviceSEClass = createEClass(DEVICE_S);
    createEAttribute(deviceSEClass, DEVICE_S__NAME);
    createEReference(deviceSEClass, DEVICE_S__LOGGING);
    createEReference(deviceSEClass, DEVICE_S__TARGETS);

    configurationValueSEClass = createEClass(CONFIGURATION_VALUE_S);

    loggingSEClass = createEClass(LOGGING_S);

    diskHandlingSEClass = createEClass(DISK_HANDLING_S);
    createEReference(diskHandlingSEClass, DISK_HANDLING_S__DISK);
    createEReference(diskHandlingSEClass, DISK_HANDLING_S__STATEMENTS);

    statementSEClass = createEClass(STATEMENT_S);

    moveSEClass = createEClass(MOVE_S);

    craneActionSEClass = createEClass(CRANE_ACTION_S);

    conditionSEClass = createEClass(CONDITION_S);
    createEAttribute(conditionSEClass, CONDITION_S__COMPARISON_OPERATOR);
    createEReference(conditionSEClass, CONDITION_S__STATEMENTS);

    markSEClass = createEClass(MARK_S);

    variableSEClass = createEClass(VARIABLE_S);
    createEAttribute(variableSEClass, VARIABLE_S__NAME);

    variableValueSEClass = createEClass(VARIABLE_VALUE_S);
    createEReference(variableValueSEClass, VARIABLE_VALUE_S__VALUE);
    createEReference(variableValueSEClass, VARIABLE_VALUE_S__REF);

    deviceValueSEClass = createEClass(DEVICE_VALUE_S);
    createEReference(deviceValueSEClass, DEVICE_VALUE_S__VALUE);
    createEReference(deviceValueSEClass, DEVICE_VALUE_S__CONFIGURATION_VALUE);

    valueSlotSEClass = createEClass(VALUE_SLOT_S);
    createEReference(valueSlotSEClass, VALUE_SLOT_S__VALUE);

    dslTypeValueEClass = createEClass(DSL_TYPE_VALUE);
    createEAttribute(dslTypeValueEClass, DSL_TYPE_VALUE__VALUE);

    diskStateValueSEClass = createEClass(DISK_STATE_VALUE_S);
    createEAttribute(diskStateValueSEClass, DISK_STATE_VALUE_S__VALUE);

    diskSlotStateValueSEClass = createEClass(DISK_SLOT_STATE_VALUE_S);
    createEAttribute(diskSlotStateValueSEClass, DISK_SLOT_STATE_VALUE_S__VALUE);

    colorValueSEClass = createEClass(COLOR_VALUE_S);
    createEAttribute(colorValueSEClass, COLOR_VALUE_S__VALUE);

    numberSEClass = createEClass(NUMBER_S);
    createEAttribute(numberSEClass, NUMBER_S__VALUE);

    dslLongEClass = createEClass(DSL_LONG);
    createEAttribute(dslLongEClass, DSL_LONG__NAME);

    dslShortEClass = createEClass(DSL_SHORT);
    createEReference(dslShortEClass, DSL_SHORT__CONFIGURATION);
    createEReference(dslShortEClass, DSL_SHORT__DISK_HANDLINGS);

    craneEClass = createEClass(CRANE);

    craneZoneEClass = createEClass(CRANE_ZONE);
    createEAttribute(craneZoneEClass, CRANE_ZONE__NAME);
    createEAttribute(craneZoneEClass, CRANE_ZONE__ZONE_VALUE);

    diskEClass = createEClass(DISK);
    createEAttribute(diskEClass, DISK__NSLOTS);

    diskZoneEClass = createEClass(DISK_ZONE);
    createEAttribute(diskZoneEClass, DISK_ZONE__NAME);
    createEAttribute(diskZoneEClass, DISK_ZONE__SLOT);

    cameraEClass = createEClass(CAMERA);

    cameraColorEClass = createEClass(CAMERA_COLOR);
    createEAttribute(cameraColorEClass, CAMERA_COLOR__COLOR);

    loggingEClass = createEClass(LOGGING);

    loopVariableEClass = createEClass(LOOP_VARIABLE);
    createEReference(loopVariableEClass, LOOP_VARIABLE__ORDINARY_VARIABLE);
    createEAttribute(loopVariableEClass, LOOP_VARIABLE__COMPARISON_OPERATOR);
    createEReference(loopVariableEClass, LOOP_VARIABLE__SLOT_STATE);
    createEReference(loopVariableEClass, LOOP_VARIABLE__STATEMENTS);

    loopSlotEClass = createEClass(LOOP_SLOT);
    createEReference(loopSlotEClass, LOOP_SLOT__SLOT_VARIABLE);
    createEAttribute(loopSlotEClass, LOOP_SLOT__COMPARISON_OPERATOR);
    createEReference(loopSlotEClass, LOOP_SLOT__SLOT_STATE);
    createEReference(loopSlotEClass, LOOP_SLOT__STATEMENTS);

    moveDiskEClass = createEClass(MOVE_DISK);
    createEReference(moveDiskEClass, MOVE_DISK__SLOT);
    createEReference(moveDiskEClass, MOVE_DISK__ZONE);

    moveAnySlotEClass = createEClass(MOVE_ANY_SLOT);
    createEReference(moveAnySlotEClass, MOVE_ANY_SLOT__STATE);
    createEReference(moveAnySlotEClass, MOVE_ANY_SLOT__ANY_SLOT);
    createEReference(moveAnySlotEClass, MOVE_ANY_SLOT__ZONE);

    moveCraneEClass = createEClass(MOVE_CRANE);
    createEReference(moveCraneEClass, MOVE_CRANE__CRANE);
    createEReference(moveCraneEClass, MOVE_CRANE__ACTION);
    createEReference(moveCraneEClass, MOVE_CRANE__ZONE);

    craneActionEClass = createEClass(CRANE_ACTION);

    conditionVariableEClass = createEClass(CONDITION_VARIABLE);
    createEReference(conditionVariableEClass, CONDITION_VARIABLE__VARIABLE);
    createEReference(conditionVariableEClass, CONDITION_VARIABLE__VARIABLE_VALUE);

    conditionSlotEClass = createEClass(CONDITION_SLOT);
    createEReference(conditionSlotEClass, CONDITION_SLOT__VARIABLE);
    createEReference(conditionSlotEClass, CONDITION_SLOT__SLOT_VALUE);

    conditionDeviceEClass = createEClass(CONDITION_DEVICE);
    createEReference(conditionDeviceEClass, CONDITION_DEVICE__DEVICE);
    createEReference(conditionDeviceEClass, CONDITION_DEVICE__DEVICE_VALUE);

    markVariableValueEClass = createEClass(MARK_VARIABLE_VALUE);
    createEReference(markVariableValueEClass, MARK_VARIABLE_VALUE__VARIABLE);
    createEReference(markVariableValueEClass, MARK_VARIABLE_VALUE__VALUE);
    createEAttribute(markVariableValueEClass, MARK_VARIABLE_VALUE__TIME);
    createEAttribute(markVariableValueEClass, MARK_VARIABLE_VALUE__UNIT);

    markCameraValueEClass = createEClass(MARK_CAMERA_VALUE);
    createEReference(markCameraValueEClass, MARK_CAMERA_VALUE__CAMERA);
    createEReference(markCameraValueEClass, MARK_CAMERA_VALUE__VARIABLE);

    ordinaryVariableEClass = createEClass(ORDINARY_VARIABLE);

    slotVariableEClass = createEClass(SLOT_VARIABLE);

    // Create enums
    dsL_TYPE_ENUMEEnum = createEEnum(DSL_TYPE_ENUM);
    comparisoN_OPERATOR_SEEnum = createEEnum(COMPARISON_OPERATOR_S);
    coloR_SEEnum = createEEnum(COLOR_S);
    disK_SLOT_STATES_SEEnum = createEEnum(DISK_SLOT_STATES_S);
    disK_STATES_SEEnum = createEEnum(DISK_STATES_S);
    timE_UNIT_SEEnum = createEEnum(TIME_UNIT_S);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    moveSEClass.getESuperTypes().add(this.getStatementS());
    craneActionSEClass.getESuperTypes().add(this.getStatementS());
    conditionSEClass.getESuperTypes().add(this.getStatementS());
    markSEClass.getESuperTypes().add(this.getStatementS());
    dslLongEClass.getESuperTypes().add(this.getDSLProgram());
    dslShortEClass.getESuperTypes().add(this.getDSLProgram());
    craneEClass.getESuperTypes().add(this.getDeviceS());
    craneZoneEClass.getESuperTypes().add(this.getConfigurationValueS());
    diskEClass.getESuperTypes().add(this.getDeviceS());
    diskZoneEClass.getESuperTypes().add(this.getConfigurationValueS());
    cameraEClass.getESuperTypes().add(this.getDeviceS());
    cameraColorEClass.getESuperTypes().add(this.getConfigurationValueS());
    loggingEClass.getESuperTypes().add(this.getLoggingS());
    loopVariableEClass.getESuperTypes().add(this.getStatementS());
    loopSlotEClass.getESuperTypes().add(this.getStatementS());
    moveDiskEClass.getESuperTypes().add(this.getMoveS());
    moveAnySlotEClass.getESuperTypes().add(this.getMoveS());
    moveCraneEClass.getESuperTypes().add(this.getMoveS());
    craneActionEClass.getESuperTypes().add(this.getCraneActionS());
    conditionVariableEClass.getESuperTypes().add(this.getConditionS());
    conditionSlotEClass.getESuperTypes().add(this.getConditionS());
    conditionDeviceEClass.getESuperTypes().add(this.getConditionS());
    markVariableValueEClass.getESuperTypes().add(this.getMarkS());
    markCameraValueEClass.getESuperTypes().add(this.getMarkS());
    ordinaryVariableEClass.getESuperTypes().add(this.getVariableS());
    slotVariableEClass.getESuperTypes().add(this.getVariableS());

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModel_DslType(), this.getDSLTypeValue(), null, "dslType", null, 0, 1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModel_DslProgram(), this.getDSLProgram(), null, "dslProgram", null, 0, 1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslProgramEClass, DSLProgram.class, "DSLProgram", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(configurationSEClass, ConfigurationS.class, "ConfigurationS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConfigurationS_Devices(), this.getDeviceS(), null, "devices", null, 0, -1, ConfigurationS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(deviceSEClass, DeviceS.class, "DeviceS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDeviceS_Name(), ecorePackage.getEString(), "name", null, 0, 1, DeviceS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDeviceS_Logging(), this.getLoggingS(), null, "logging", null, 0, 1, DeviceS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDeviceS_Targets(), this.getConfigurationValueS(), null, "targets", null, 0, -1, DeviceS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(configurationValueSEClass, ConfigurationValueS.class, "ConfigurationValueS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(loggingSEClass, LoggingS.class, "LoggingS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(diskHandlingSEClass, DiskHandlingS.class, "DiskHandlingS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDiskHandlingS_Disk(), this.getDisk(), null, "disk", null, 0, 1, DiskHandlingS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDiskHandlingS_Statements(), this.getStatementS(), null, "statements", null, 0, -1, DiskHandlingS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementSEClass, StatementS.class, "StatementS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(moveSEClass, MoveS.class, "MoveS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(craneActionSEClass, CraneActionS.class, "CraneActionS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(conditionSEClass, ConditionS.class, "ConditionS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getConditionS_ComparisonOperator(), this.getCOMPARISON_OPERATOR_S(), "comparisonOperator", null, 0, 1, ConditionS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionS_Statements(), this.getStatementS(), null, "statements", null, 0, -1, ConditionS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(markSEClass, MarkS.class, "MarkS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(variableSEClass, VariableS.class, "VariableS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVariableS_Name(), ecorePackage.getEString(), "name", null, 0, 1, VariableS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(variableValueSEClass, VariableValueS.class, "VariableValueS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVariableValueS_Value(), ecorePackage.getEObject(), null, "value", null, 0, 1, VariableValueS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVariableValueS_Ref(), this.getVariableS(), null, "ref", null, 0, 1, VariableValueS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(deviceValueSEClass, DeviceValueS.class, "DeviceValueS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDeviceValueS_Value(), ecorePackage.getEObject(), null, "value", null, 0, 1, DeviceValueS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDeviceValueS_ConfigurationValue(), this.getConfigurationValueS(), null, "configurationValue", null, 0, 1, DeviceValueS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(valueSlotSEClass, ValueSlotS.class, "ValueSlotS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getValueSlotS_Value(), ecorePackage.getEObject(), null, "value", null, 0, 1, ValueSlotS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslTypeValueEClass, DSLTypeValue.class, "DSLTypeValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLTypeValue_Value(), this.getDSL_TYPE_ENUM(), "value", null, 0, 1, DSLTypeValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskStateValueSEClass, DiskStateValueS.class, "DiskStateValueS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDiskStateValueS_Value(), this.getDISK_STATES_S(), "value", null, 0, 1, DiskStateValueS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskSlotStateValueSEClass, DiskSlotStateValueS.class, "DiskSlotStateValueS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDiskSlotStateValueS_Value(), this.getDISK_SLOT_STATES_S(), "value", null, 0, 1, DiskSlotStateValueS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(colorValueSEClass, ColorValueS.class, "ColorValueS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getColorValueS_Value(), this.getCOLOR_S(), "value", null, 0, 1, ColorValueS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(numberSEClass, NumberS.class, "NumberS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNumberS_Value(), ecorePackage.getEInt(), "value", null, 0, 1, NumberS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslLongEClass, DSLLong.class, "DSLLong", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLLong_Name(), ecorePackage.getEString(), "name", null, 0, 1, DSLLong.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslShortEClass, DSLShort.class, "DSLShort", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDSLShort_Configuration(), this.getConfigurationS(), null, "configuration", null, 0, 1, DSLShort.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLShort_DiskHandlings(), this.getDiskHandlingS(), null, "diskHandlings", null, 0, -1, DSLShort.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(craneEClass, Crane.class, "Crane", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(craneZoneEClass, CraneZone.class, "CraneZone", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCraneZone_Name(), ecorePackage.getEString(), "name", null, 0, 1, CraneZone.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCraneZone_ZoneValue(), ecorePackage.getEInt(), "zoneValue", null, 0, 1, CraneZone.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskEClass, Disk.class, "Disk", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDisk_NSlots(), ecorePackage.getEInt(), "nSlots", null, 0, 1, Disk.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskZoneEClass, DiskZone.class, "DiskZone", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDiskZone_Name(), ecorePackage.getEString(), "name", null, 0, 1, DiskZone.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiskZone_Slot(), ecorePackage.getEInt(), "slot", null, 0, 1, DiskZone.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cameraEClass, Camera.class, "Camera", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(cameraColorEClass, CameraColor.class, "CameraColor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCameraColor_Color(), this.getCOLOR_S(), "color", null, 0, 1, CameraColor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(loggingEClass, Logging.class, "Logging", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(loopVariableEClass, LoopVariable.class, "LoopVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLoopVariable_OrdinaryVariable(), this.getVariableS(), null, "ordinaryVariable", null, 0, 1, LoopVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLoopVariable_ComparisonOperator(), this.getCOMPARISON_OPERATOR_S(), "comparisonOperator", null, 0, 1, LoopVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLoopVariable_SlotState(), this.getDiskSlotStateValueS(), null, "slotState", null, 0, 1, LoopVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLoopVariable_Statements(), this.getStatementS(), null, "statements", null, 0, -1, LoopVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(loopSlotEClass, LoopSlot.class, "LoopSlot", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLoopSlot_SlotVariable(), this.getVariableS(), null, "slotVariable", null, 0, 1, LoopSlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLoopSlot_ComparisonOperator(), this.getCOMPARISON_OPERATOR_S(), "comparisonOperator", null, 0, 1, LoopSlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLoopSlot_SlotState(), this.getDiskSlotStateValueS(), null, "slotState", null, 0, 1, LoopSlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLoopSlot_Statements(), this.getStatementS(), null, "statements", null, 0, -1, LoopSlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(moveDiskEClass, MoveDisk.class, "MoveDisk", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMoveDisk_Slot(), this.getSlotVariable(), null, "slot", null, 0, 1, MoveDisk.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMoveDisk_Zone(), this.getDiskZone(), null, "zone", null, 0, 1, MoveDisk.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(moveAnySlotEClass, MoveAnySlot.class, "MoveAnySlot", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMoveAnySlot_State(), this.getDiskSlotStateValueS(), null, "state", null, 0, 1, MoveAnySlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMoveAnySlot_AnySlot(), this.getVariableS(), null, "anySlot", null, 0, 1, MoveAnySlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMoveAnySlot_Zone(), this.getDiskZone(), null, "zone", null, 0, 1, MoveAnySlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(moveCraneEClass, MoveCrane.class, "MoveCrane", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMoveCrane_Crane(), this.getCrane(), null, "crane", null, 0, 1, MoveCrane.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMoveCrane_Action(), this.getCraneActionS(), null, "action", null, 0, 1, MoveCrane.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMoveCrane_Zone(), this.getCraneZone(), null, "zone", null, 0, 1, MoveCrane.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(craneActionEClass, CraneAction.class, "CraneAction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(conditionVariableEClass, ConditionVariable.class, "ConditionVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConditionVariable_Variable(), this.getOrdinaryVariable(), null, "variable", null, 0, 1, ConditionVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionVariable_VariableValue(), this.getVariableValueS(), null, "variableValue", null, 0, 1, ConditionVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(conditionSlotEClass, ConditionSlot.class, "ConditionSlot", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConditionSlot_Variable(), this.getSlotVariable(), null, "variable", null, 0, 1, ConditionSlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionSlot_SlotValue(), this.getValueSlotS(), null, "slotValue", null, 0, 1, ConditionSlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(conditionDeviceEClass, ConditionDevice.class, "ConditionDevice", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConditionDevice_Device(), this.getDeviceS(), null, "device", null, 0, 1, ConditionDevice.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionDevice_DeviceValue(), this.getDeviceValueS(), null, "deviceValue", null, 0, 1, ConditionDevice.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(markVariableValueEClass, MarkVariableValue.class, "MarkVariableValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMarkVariableValue_Variable(), this.getVariableS(), null, "variable", null, 0, 1, MarkVariableValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMarkVariableValue_Value(), this.getValueSlotS(), null, "value", null, 0, 1, MarkVariableValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMarkVariableValue_Time(), ecorePackage.getEInt(), "time", null, 0, 1, MarkVariableValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMarkVariableValue_Unit(), this.getTIME_UNIT_S(), "unit", null, 0, 1, MarkVariableValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(markCameraValueEClass, MarkCameraValue.class, "MarkCameraValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMarkCameraValue_Camera(), this.getCamera(), null, "camera", null, 0, 1, MarkCameraValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMarkCameraValue_Variable(), this.getVariableS(), null, "variable", null, 0, 1, MarkCameraValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ordinaryVariableEClass, OrdinaryVariable.class, "OrdinaryVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(slotVariableEClass, SlotVariable.class, "SlotVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    // Initialize enums and add enum literals
    initEEnum(dsL_TYPE_ENUMEEnum, xtext.factoryLang.shortDSL.shortDSL.DSL_TYPE_ENUM.class, "DSL_TYPE_ENUM");
    addEEnumLiteral(dsL_TYPE_ENUMEEnum, xtext.factoryLang.shortDSL.shortDSL.DSL_TYPE_ENUM.LONG);
    addEEnumLiteral(dsL_TYPE_ENUMEEnum, xtext.factoryLang.shortDSL.shortDSL.DSL_TYPE_ENUM.SHORT);

    initEEnum(comparisoN_OPERATOR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COMPARISON_OPERATOR_S.class, "COMPARISON_OPERATOR_S");
    addEEnumLiteral(comparisoN_OPERATOR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COMPARISON_OPERATOR_S.EQUAL);
    addEEnumLiteral(comparisoN_OPERATOR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COMPARISON_OPERATOR_S.LESS_THAN);
    addEEnumLiteral(comparisoN_OPERATOR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COMPARISON_OPERATOR_S.GREATER_THAN);
    addEEnumLiteral(comparisoN_OPERATOR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COMPARISON_OPERATOR_S.NOT);

    initEEnum(coloR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COLOR_S.class, "COLOR_S");
    addEEnumLiteral(coloR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COLOR_S.RED);
    addEEnumLiteral(coloR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COLOR_S.GREEN);
    addEEnumLiteral(coloR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COLOR_S.BLUE);

    initEEnum(disK_SLOT_STATES_SEEnum, xtext.factoryLang.shortDSL.shortDSL.DISK_SLOT_STATES_S.class, "DISK_SLOT_STATES_S");
    addEEnumLiteral(disK_SLOT_STATES_SEEnum, xtext.factoryLang.shortDSL.shortDSL.DISK_SLOT_STATES_S.FREE);
    addEEnumLiteral(disK_SLOT_STATES_SEEnum, xtext.factoryLang.shortDSL.shortDSL.DISK_SLOT_STATES_S.IN_PROGRESS);
    addEEnumLiteral(disK_SLOT_STATES_SEEnum, xtext.factoryLang.shortDSL.shortDSL.DISK_SLOT_STATES_S.COMPLETE);

    initEEnum(disK_STATES_SEEnum, xtext.factoryLang.shortDSL.shortDSL.DISK_STATES_S.class, "DISK_STATES_S");
    addEEnumLiteral(disK_STATES_SEEnum, xtext.factoryLang.shortDSL.shortDSL.DISK_STATES_S.FULL);
    addEEnumLiteral(disK_STATES_SEEnum, xtext.factoryLang.shortDSL.shortDSL.DISK_STATES_S.EMPTY);

    initEEnum(timE_UNIT_SEEnum, xtext.factoryLang.shortDSL.shortDSL.TIME_UNIT_S.class, "TIME_UNIT_S");
    addEEnumLiteral(timE_UNIT_SEEnum, xtext.factoryLang.shortDSL.shortDSL.TIME_UNIT_S.SECOND);
    addEEnumLiteral(timE_UNIT_SEEnum, xtext.factoryLang.shortDSL.shortDSL.TIME_UNIT_S.MINUTE);
    addEEnumLiteral(timE_UNIT_SEEnum, xtext.factoryLang.shortDSL.shortDSL.TIME_UNIT_S.HOUR);

    // Create resource
    createResource(eNS_URI);
  }

} //ShortDSLPackageImpl
