/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.shortDSL.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import xtext.factoryLang.shortDSL.shortDSL.Action;
import xtext.factoryLang.shortDSL.shortDSL.ActionS;
import xtext.factoryLang.shortDSL.shortDSL.Camera;
import xtext.factoryLang.shortDSL.shortDSL.CameraColor;
import xtext.factoryLang.shortDSL.shortDSL.ConditionDevice;
import xtext.factoryLang.shortDSL.shortDSL.ConditionS;
import xtext.factoryLang.shortDSL.shortDSL.ConditionVariable;
import xtext.factoryLang.shortDSL.shortDSL.ConfigurationS;
import xtext.factoryLang.shortDSL.shortDSL.ConfigurationValueS;
import xtext.factoryLang.shortDSL.shortDSL.Crane;
import xtext.factoryLang.shortDSL.shortDSL.CraneZone;
import xtext.factoryLang.shortDSL.shortDSL.DSLShort;
import xtext.factoryLang.shortDSL.shortDSL.DSLType;
import xtext.factoryLang.shortDSL.shortDSL.DSL_Long;
import xtext.factoryLang.shortDSL.shortDSL.DeviceS;
import xtext.factoryLang.shortDSL.shortDSL.Disk;
import xtext.factoryLang.shortDSL.shortDSL.DiskHandlingS;
import xtext.factoryLang.shortDSL.shortDSL.DiskZone;
import xtext.factoryLang.shortDSL.shortDSL.GlobalVariable;
import xtext.factoryLang.shortDSL.shortDSL.LocalVariable;
import xtext.factoryLang.shortDSL.shortDSL.Loop;
import xtext.factoryLang.shortDSL.shortDSL.MarkS;
import xtext.factoryLang.shortDSL.shortDSL.MarkValue;
import xtext.factoryLang.shortDSL.shortDSL.MarkVariable;
import xtext.factoryLang.shortDSL.shortDSL.Model;
import xtext.factoryLang.shortDSL.shortDSL.MoveCrane;
import xtext.factoryLang.shortDSL.shortDSL.MoveDisk;
import xtext.factoryLang.shortDSL.shortDSL.ShortDSLFactory;
import xtext.factoryLang.shortDSL.shortDSL.ShortDSLPackage;
import xtext.factoryLang.shortDSL.shortDSL.StatementS;
import xtext.factoryLang.shortDSL.shortDSL.Value;
import xtext.factoryLang.shortDSL.shortDSL.Variable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ShortDSLPackageImpl extends EPackageImpl implements ShortDSLPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dsL_LongEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass configurationSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass deviceSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass configurationValueSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskHandlingSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass actionSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass markSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass valueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslShortEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass craneEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass craneZoneEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskZoneEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cameraEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cameraColorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass loopEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moveDiskEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moveCraneEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass actionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionVariableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionDeviceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass markVariableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass markValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass localVariableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass globalVariableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum comparisoN_OPERATOR_SEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum coloR_SEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum disK_SLOT_STATES_SEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum disK_STATES_SEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see xtext.factoryLang.shortDSL.shortDSL.ShortDSLPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private ShortDSLPackageImpl()
  {
    super(eNS_URI, ShortDSLFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link ShortDSLPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static ShortDSLPackage init()
  {
    if (isInited) return (ShortDSLPackage)EPackage.Registry.INSTANCE.getEPackage(ShortDSLPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredShortDSLPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    ShortDSLPackageImpl theShortDSLPackage = registeredShortDSLPackage instanceof ShortDSLPackageImpl ? (ShortDSLPackageImpl)registeredShortDSLPackage : new ShortDSLPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theShortDSLPackage.createPackageContents();

    // Initialize created meta-data
    theShortDSLPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theShortDSLPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(ShortDSLPackage.eNS_URI, theShortDSLPackage);
    return theShortDSLPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Type()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSL_Long()
  {
    return dsL_LongEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSL_Long_Name()
  {
    return (EAttribute)dsL_LongEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLType()
  {
    return dslTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConfigurationS()
  {
    return configurationSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConfigurationS_Devices()
  {
    return (EReference)configurationSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDeviceS()
  {
    return deviceSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDeviceS_Name()
  {
    return (EAttribute)deviceSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConfigurationValueS()
  {
    return configurationValueSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskHandlingS()
  {
    return diskHandlingSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiskHandlingS_Disk()
  {
    return (EReference)diskHandlingSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiskHandlingS_Statements()
  {
    return (EReference)diskHandlingSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStatementS()
  {
    return statementSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getActionS()
  {
    return actionSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConditionS()
  {
    return conditionSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConditionS_ComparisonOperator()
  {
    return (EAttribute)conditionSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionS_Value()
  {
    return (EReference)conditionSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionS_Statements()
  {
    return (EReference)conditionSEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMarkS()
  {
    return markSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMarkS_Time()
  {
    return (EAttribute)markSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariable()
  {
    return variableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVariable_Name()
  {
    return (EAttribute)variableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getValue()
  {
    return valueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getValue_ValueDiskSlotState()
  {
    return (EAttribute)valueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getValue_ValueDiskState()
  {
    return (EAttribute)valueEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getValue_ValueColor()
  {
    return (EAttribute)valueEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getValue_ValueInt()
  {
    return (EAttribute)valueEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getValue_Variable()
  {
    return (EReference)valueEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLShort()
  {
    return dslShortEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLShort_Configuration()
  {
    return (EReference)dslShortEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLShort_DiskHandlings()
  {
    return (EReference)dslShortEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCrane()
  {
    return craneEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCrane_Positions()
  {
    return (EReference)craneEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCraneZone()
  {
    return craneZoneEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCraneZone_Name()
  {
    return (EAttribute)craneZoneEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCraneZone_ZoneValue()
  {
    return (EAttribute)craneZoneEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDisk()
  {
    return diskEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDisk_NSlots()
  {
    return (EAttribute)diskEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDisk_Zones()
  {
    return (EReference)diskEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskZone()
  {
    return diskZoneEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiskZone_Name()
  {
    return (EAttribute)diskZoneEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiskZone_Slot()
  {
    return (EAttribute)diskZoneEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCamera()
  {
    return cameraEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCamera_Colors()
  {
    return (EReference)cameraEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCameraColor()
  {
    return cameraColorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCameraColor_Color()
  {
    return (EAttribute)cameraColorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLoop()
  {
    return loopEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLoop_Variable()
  {
    return (EReference)loopEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLoop_ComparisonOperator()
  {
    return (EAttribute)loopEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLoop_SlotState()
  {
    return (EAttribute)loopEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLoop_Statements()
  {
    return (EReference)loopEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMoveDisk()
  {
    return moveDiskEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMoveDisk_Slot()
  {
    return (EReference)moveDiskEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMoveDisk_Zone()
  {
    return (EReference)moveDiskEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMoveCrane()
  {
    return moveCraneEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMoveCrane_Crane()
  {
    return (EReference)moveCraneEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMoveCrane_Action()
  {
    return (EReference)moveCraneEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMoveCrane_Zone()
  {
    return (EReference)moveCraneEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAction()
  {
    return actionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConditionVariable()
  {
    return conditionVariableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionVariable_Variable()
  {
    return (EReference)conditionVariableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConditionDevice()
  {
    return conditionDeviceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionDevice_Device()
  {
    return (EReference)conditionDeviceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMarkVariable()
  {
    return markVariableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMarkVariable_Device()
  {
    return (EReference)markVariableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMarkVariable_Variable()
  {
    return (EReference)markVariableEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMarkValue()
  {
    return markValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMarkValue_Variable()
  {
    return (EReference)markValueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMarkValue_Value()
  {
    return (EReference)markValueEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLocalVariable()
  {
    return localVariableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getGlobalVariable()
  {
    return globalVariableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getCOMPARISON_OPERATOR_S()
  {
    return comparisoN_OPERATOR_SEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getCOLOR_S()
  {
    return coloR_SEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getDISK_SLOT_STATES_S()
  {
    return disK_SLOT_STATES_SEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getDISK_STATES_S()
  {
    return disK_STATES_SEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShortDSLFactory getShortDSLFactory()
  {
    return (ShortDSLFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEReference(modelEClass, MODEL__TYPE);

    dsL_LongEClass = createEClass(DSL_LONG);
    createEAttribute(dsL_LongEClass, DSL_LONG__NAME);

    dslTypeEClass = createEClass(DSL_TYPE);

    configurationSEClass = createEClass(CONFIGURATION_S);
    createEReference(configurationSEClass, CONFIGURATION_S__DEVICES);

    deviceSEClass = createEClass(DEVICE_S);
    createEAttribute(deviceSEClass, DEVICE_S__NAME);

    configurationValueSEClass = createEClass(CONFIGURATION_VALUE_S);

    diskHandlingSEClass = createEClass(DISK_HANDLING_S);
    createEReference(diskHandlingSEClass, DISK_HANDLING_S__DISK);
    createEReference(diskHandlingSEClass, DISK_HANDLING_S__STATEMENTS);

    statementSEClass = createEClass(STATEMENT_S);

    actionSEClass = createEClass(ACTION_S);

    conditionSEClass = createEClass(CONDITION_S);
    createEAttribute(conditionSEClass, CONDITION_S__COMPARISON_OPERATOR);
    createEReference(conditionSEClass, CONDITION_S__VALUE);
    createEReference(conditionSEClass, CONDITION_S__STATEMENTS);

    markSEClass = createEClass(MARK_S);
    createEAttribute(markSEClass, MARK_S__TIME);

    variableEClass = createEClass(VARIABLE);
    createEAttribute(variableEClass, VARIABLE__NAME);

    valueEClass = createEClass(VALUE);
    createEAttribute(valueEClass, VALUE__VALUE_DISK_SLOT_STATE);
    createEAttribute(valueEClass, VALUE__VALUE_DISK_STATE);
    createEAttribute(valueEClass, VALUE__VALUE_COLOR);
    createEAttribute(valueEClass, VALUE__VALUE_INT);
    createEReference(valueEClass, VALUE__VARIABLE);

    dslShortEClass = createEClass(DSL_SHORT);
    createEReference(dslShortEClass, DSL_SHORT__CONFIGURATION);
    createEReference(dslShortEClass, DSL_SHORT__DISK_HANDLINGS);

    craneEClass = createEClass(CRANE);
    createEReference(craneEClass, CRANE__POSITIONS);

    craneZoneEClass = createEClass(CRANE_ZONE);
    createEAttribute(craneZoneEClass, CRANE_ZONE__NAME);
    createEAttribute(craneZoneEClass, CRANE_ZONE__ZONE_VALUE);

    diskEClass = createEClass(DISK);
    createEAttribute(diskEClass, DISK__NSLOTS);
    createEReference(diskEClass, DISK__ZONES);

    diskZoneEClass = createEClass(DISK_ZONE);
    createEAttribute(diskZoneEClass, DISK_ZONE__NAME);
    createEAttribute(diskZoneEClass, DISK_ZONE__SLOT);

    cameraEClass = createEClass(CAMERA);
    createEReference(cameraEClass, CAMERA__COLORS);

    cameraColorEClass = createEClass(CAMERA_COLOR);
    createEAttribute(cameraColorEClass, CAMERA_COLOR__COLOR);

    loopEClass = createEClass(LOOP);
    createEReference(loopEClass, LOOP__VARIABLE);
    createEAttribute(loopEClass, LOOP__COMPARISON_OPERATOR);
    createEAttribute(loopEClass, LOOP__SLOT_STATE);
    createEReference(loopEClass, LOOP__STATEMENTS);

    moveDiskEClass = createEClass(MOVE_DISK);
    createEReference(moveDiskEClass, MOVE_DISK__SLOT);
    createEReference(moveDiskEClass, MOVE_DISK__ZONE);

    moveCraneEClass = createEClass(MOVE_CRANE);
    createEReference(moveCraneEClass, MOVE_CRANE__CRANE);
    createEReference(moveCraneEClass, MOVE_CRANE__ACTION);
    createEReference(moveCraneEClass, MOVE_CRANE__ZONE);

    actionEClass = createEClass(ACTION);

    conditionVariableEClass = createEClass(CONDITION_VARIABLE);
    createEReference(conditionVariableEClass, CONDITION_VARIABLE__VARIABLE);

    conditionDeviceEClass = createEClass(CONDITION_DEVICE);
    createEReference(conditionDeviceEClass, CONDITION_DEVICE__DEVICE);

    markVariableEClass = createEClass(MARK_VARIABLE);
    createEReference(markVariableEClass, MARK_VARIABLE__DEVICE);
    createEReference(markVariableEClass, MARK_VARIABLE__VARIABLE);

    markValueEClass = createEClass(MARK_VALUE);
    createEReference(markValueEClass, MARK_VALUE__VARIABLE);
    createEReference(markValueEClass, MARK_VALUE__VALUE);

    localVariableEClass = createEClass(LOCAL_VARIABLE);

    globalVariableEClass = createEClass(GLOBAL_VARIABLE);

    // Create enums
    comparisoN_OPERATOR_SEEnum = createEEnum(COMPARISON_OPERATOR_S);
    coloR_SEEnum = createEEnum(COLOR_S);
    disK_SLOT_STATES_SEEnum = createEEnum(DISK_SLOT_STATES_S);
    disK_STATES_SEEnum = createEEnum(DISK_STATES_S);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    actionSEClass.getESuperTypes().add(this.getStatementS());
    conditionSEClass.getESuperTypes().add(this.getStatementS());
    markSEClass.getESuperTypes().add(this.getStatementS());
    dslShortEClass.getESuperTypes().add(this.getDSLType());
    craneEClass.getESuperTypes().add(this.getDeviceS());
    craneZoneEClass.getESuperTypes().add(this.getConfigurationValueS());
    diskEClass.getESuperTypes().add(this.getDeviceS());
    diskZoneEClass.getESuperTypes().add(this.getConfigurationValueS());
    cameraEClass.getESuperTypes().add(this.getDeviceS());
    cameraColorEClass.getESuperTypes().add(this.getConfigurationValueS());
    loopEClass.getESuperTypes().add(this.getStatementS());
    moveDiskEClass.getESuperTypes().add(this.getStatementS());
    moveCraneEClass.getESuperTypes().add(this.getStatementS());
    actionEClass.getESuperTypes().add(this.getActionS());
    conditionVariableEClass.getESuperTypes().add(this.getConditionS());
    conditionDeviceEClass.getESuperTypes().add(this.getConditionS());
    markVariableEClass.getESuperTypes().add(this.getMarkS());
    markValueEClass.getESuperTypes().add(this.getMarkS());
    localVariableEClass.getESuperTypes().add(this.getVariable());
    globalVariableEClass.getESuperTypes().add(this.getVariable());

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModel_Type(), ecorePackage.getEObject(), null, "type", null, 0, 1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dsL_LongEClass, DSL_Long.class, "DSL_Long", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSL_Long_Name(), ecorePackage.getEString(), "name", null, 0, 1, DSL_Long.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslTypeEClass, DSLType.class, "DSLType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(configurationSEClass, ConfigurationS.class, "ConfigurationS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConfigurationS_Devices(), this.getDeviceS(), null, "devices", null, 0, -1, ConfigurationS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(deviceSEClass, DeviceS.class, "DeviceS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDeviceS_Name(), ecorePackage.getEString(), "name", null, 0, 1, DeviceS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(configurationValueSEClass, ConfigurationValueS.class, "ConfigurationValueS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(diskHandlingSEClass, DiskHandlingS.class, "DiskHandlingS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDiskHandlingS_Disk(), this.getDisk(), null, "disk", null, 0, 1, DiskHandlingS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDiskHandlingS_Statements(), this.getStatementS(), null, "statements", null, 0, -1, DiskHandlingS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementSEClass, StatementS.class, "StatementS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(actionSEClass, ActionS.class, "ActionS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(conditionSEClass, ConditionS.class, "ConditionS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getConditionS_ComparisonOperator(), this.getCOMPARISON_OPERATOR_S(), "comparisonOperator", null, 0, 1, ConditionS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionS_Value(), this.getValue(), null, "value", null, 0, 1, ConditionS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionS_Statements(), this.getStatementS(), null, "statements", null, 0, -1, ConditionS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(markSEClass, MarkS.class, "MarkS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMarkS_Time(), ecorePackage.getEInt(), "time", null, 0, 1, MarkS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(variableEClass, Variable.class, "Variable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVariable_Name(), ecorePackage.getEString(), "name", null, 0, 1, Variable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(valueEClass, Value.class, "Value", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getValue_ValueDiskSlotState(), this.getDISK_SLOT_STATES_S(), "valueDiskSlotState", null, 0, 1, Value.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getValue_ValueDiskState(), this.getDISK_STATES_S(), "valueDiskState", null, 0, 1, Value.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getValue_ValueColor(), this.getCOLOR_S(), "valueColor", null, 0, 1, Value.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getValue_ValueInt(), ecorePackage.getEInt(), "valueInt", null, 0, 1, Value.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getValue_Variable(), this.getVariable(), null, "variable", null, 0, 1, Value.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslShortEClass, DSLShort.class, "DSLShort", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDSLShort_Configuration(), this.getConfigurationS(), null, "configuration", null, 0, 1, DSLShort.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLShort_DiskHandlings(), this.getDiskHandlingS(), null, "diskHandlings", null, 0, -1, DSLShort.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(craneEClass, Crane.class, "Crane", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCrane_Positions(), this.getConfigurationValueS(), null, "positions", null, 0, -1, Crane.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(craneZoneEClass, CraneZone.class, "CraneZone", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCraneZone_Name(), ecorePackage.getEString(), "name", null, 0, 1, CraneZone.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCraneZone_ZoneValue(), ecorePackage.getEInt(), "zoneValue", null, 0, 1, CraneZone.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskEClass, Disk.class, "Disk", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDisk_NSlots(), ecorePackage.getEInt(), "nSlots", null, 0, 1, Disk.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDisk_Zones(), this.getConfigurationValueS(), null, "zones", null, 0, -1, Disk.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskZoneEClass, DiskZone.class, "DiskZone", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDiskZone_Name(), ecorePackage.getEString(), "name", null, 0, 1, DiskZone.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiskZone_Slot(), ecorePackage.getEInt(), "slot", null, 0, 1, DiskZone.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cameraEClass, Camera.class, "Camera", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCamera_Colors(), this.getConfigurationValueS(), null, "colors", null, 0, -1, Camera.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cameraColorEClass, CameraColor.class, "CameraColor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCameraColor_Color(), this.getCOLOR_S(), "color", null, 0, 1, CameraColor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(loopEClass, Loop.class, "Loop", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLoop_Variable(), this.getVariable(), null, "variable", null, 0, 1, Loop.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLoop_ComparisonOperator(), this.getCOMPARISON_OPERATOR_S(), "comparisonOperator", null, 0, 1, Loop.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLoop_SlotState(), this.getDISK_SLOT_STATES_S(), "slotState", null, 0, 1, Loop.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLoop_Statements(), this.getStatementS(), null, "statements", null, 0, -1, Loop.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(moveDiskEClass, MoveDisk.class, "MoveDisk", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMoveDisk_Slot(), this.getVariable(), null, "slot", null, 0, 1, MoveDisk.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMoveDisk_Zone(), this.getDiskZone(), null, "zone", null, 0, 1, MoveDisk.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(moveCraneEClass, MoveCrane.class, "MoveCrane", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMoveCrane_Crane(), this.getCrane(), null, "crane", null, 0, 1, MoveCrane.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMoveCrane_Action(), this.getActionS(), null, "action", null, 0, 1, MoveCrane.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMoveCrane_Zone(), this.getCraneZone(), null, "zone", null, 0, 1, MoveCrane.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(actionEClass, Action.class, "Action", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(conditionVariableEClass, ConditionVariable.class, "ConditionVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConditionVariable_Variable(), this.getVariable(), null, "variable", null, 0, 1, ConditionVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(conditionDeviceEClass, ConditionDevice.class, "ConditionDevice", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConditionDevice_Device(), this.getDeviceS(), null, "device", null, 0, 1, ConditionDevice.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(markVariableEClass, MarkVariable.class, "MarkVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMarkVariable_Device(), this.getDeviceS(), null, "device", null, 0, 1, MarkVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMarkVariable_Variable(), this.getVariable(), null, "variable", null, 0, 1, MarkVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(markValueEClass, MarkValue.class, "MarkValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMarkValue_Variable(), this.getLocalVariable(), null, "variable", null, 0, 1, MarkValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMarkValue_Value(), this.getValue(), null, "value", null, 0, 1, MarkValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(localVariableEClass, LocalVariable.class, "LocalVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(globalVariableEClass, GlobalVariable.class, "GlobalVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    // Initialize enums and add enum literals
    initEEnum(comparisoN_OPERATOR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COMPARISON_OPERATOR_S.class, "COMPARISON_OPERATOR_S");
    addEEnumLiteral(comparisoN_OPERATOR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COMPARISON_OPERATOR_S.EQUAL);
    addEEnumLiteral(comparisoN_OPERATOR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COMPARISON_OPERATOR_S.LESS_THAN);
    addEEnumLiteral(comparisoN_OPERATOR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COMPARISON_OPERATOR_S.GREATER_THAN);
    addEEnumLiteral(comparisoN_OPERATOR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COMPARISON_OPERATOR_S.NOT);

    initEEnum(coloR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COLOR_S.class, "COLOR_S");
    addEEnumLiteral(coloR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COLOR_S.RED);
    addEEnumLiteral(coloR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COLOR_S.GREEN);
    addEEnumLiteral(coloR_SEEnum, xtext.factoryLang.shortDSL.shortDSL.COLOR_S.BLUE);

    initEEnum(disK_SLOT_STATES_SEEnum, xtext.factoryLang.shortDSL.shortDSL.DISK_SLOT_STATES_S.class, "DISK_SLOT_STATES_S");
    addEEnumLiteral(disK_SLOT_STATES_SEEnum, xtext.factoryLang.shortDSL.shortDSL.DISK_SLOT_STATES_S.FREE);
    addEEnumLiteral(disK_SLOT_STATES_SEEnum, xtext.factoryLang.shortDSL.shortDSL.DISK_SLOT_STATES_S.IN_PROGRESS);
    addEEnumLiteral(disK_SLOT_STATES_SEEnum, xtext.factoryLang.shortDSL.shortDSL.DISK_SLOT_STATES_S.COMPLETE);

    initEEnum(disK_STATES_SEEnum, xtext.factoryLang.shortDSL.shortDSL.DISK_STATES_S.class, "DISK_STATES_S");
    addEEnumLiteral(disK_STATES_SEEnum, xtext.factoryLang.shortDSL.shortDSL.DISK_STATES_S.FULL);
    addEEnumLiteral(disK_STATES_SEEnum, xtext.factoryLang.shortDSL.shortDSL.DISK_STATES_S.EMPTY);

    // Create resource
    createResource(eNS_URI);
  }

} //ShortDSLPackageImpl
