/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.shortDSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.factoryLang.shortDSL.shortDSL.COMPARISON_OPERATOR_S;
import xtext.factoryLang.shortDSL.shortDSL.DISK_SLOT_STATES_S;
import xtext.factoryLang.shortDSL.shortDSL.Loop;
import xtext.factoryLang.shortDSL.shortDSL.ShortDSLPackage;
import xtext.factoryLang.shortDSL.shortDSL.StatementS;
import xtext.factoryLang.shortDSL.shortDSL.Variable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Loop</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.LoopImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.LoopImpl#getComparisonOperator <em>Comparison Operator</em>}</li>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.LoopImpl#getSlotState <em>Slot State</em>}</li>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.LoopImpl#getStatements <em>Statements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LoopImpl extends StatementSImpl implements Loop
{
  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected Variable variable;

  /**
   * The default value of the '{@link #getComparisonOperator() <em>Comparison Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparisonOperator()
   * @generated
   * @ordered
   */
  protected static final COMPARISON_OPERATOR_S COMPARISON_OPERATOR_EDEFAULT = COMPARISON_OPERATOR_S.EQUAL;

  /**
   * The cached value of the '{@link #getComparisonOperator() <em>Comparison Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparisonOperator()
   * @generated
   * @ordered
   */
  protected COMPARISON_OPERATOR_S comparisonOperator = COMPARISON_OPERATOR_EDEFAULT;

  /**
   * The default value of the '{@link #getSlotState() <em>Slot State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSlotState()
   * @generated
   * @ordered
   */
  protected static final DISK_SLOT_STATES_S SLOT_STATE_EDEFAULT = DISK_SLOT_STATES_S.FREE;

  /**
   * The cached value of the '{@link #getSlotState() <em>Slot State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSlotState()
   * @generated
   * @ordered
   */
  protected DISK_SLOT_STATES_S slotState = SLOT_STATE_EDEFAULT;

  /**
   * The cached value of the '{@link #getStatements() <em>Statements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatements()
   * @generated
   * @ordered
   */
  protected EList<StatementS> statements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LoopImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ShortDSLPackage.Literals.LOOP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariable(Variable newVariable, NotificationChain msgs)
  {
    Variable oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ShortDSLPackage.LOOP__VARIABLE, oldVariable, newVariable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(Variable newVariable)
  {
    if (newVariable != variable)
    {
      NotificationChain msgs = null;
      if (variable != null)
        msgs = ((InternalEObject)variable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ShortDSLPackage.LOOP__VARIABLE, null, msgs);
      if (newVariable != null)
        msgs = ((InternalEObject)newVariable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ShortDSLPackage.LOOP__VARIABLE, null, msgs);
      msgs = basicSetVariable(newVariable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.LOOP__VARIABLE, newVariable, newVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public COMPARISON_OPERATOR_S getComparisonOperator()
  {
    return comparisonOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComparisonOperator(COMPARISON_OPERATOR_S newComparisonOperator)
  {
    COMPARISON_OPERATOR_S oldComparisonOperator = comparisonOperator;
    comparisonOperator = newComparisonOperator == null ? COMPARISON_OPERATOR_EDEFAULT : newComparisonOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.LOOP__COMPARISON_OPERATOR, oldComparisonOperator, comparisonOperator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DISK_SLOT_STATES_S getSlotState()
  {
    return slotState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSlotState(DISK_SLOT_STATES_S newSlotState)
  {
    DISK_SLOT_STATES_S oldSlotState = slotState;
    slotState = newSlotState == null ? SLOT_STATE_EDEFAULT : newSlotState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.LOOP__SLOT_STATE, oldSlotState, slotState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<StatementS> getStatements()
  {
    if (statements == null)
    {
      statements = new EObjectContainmentEList<StatementS>(StatementS.class, this, ShortDSLPackage.LOOP__STATEMENTS);
    }
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ShortDSLPackage.LOOP__VARIABLE:
        return basicSetVariable(null, msgs);
      case ShortDSLPackage.LOOP__STATEMENTS:
        return ((InternalEList<?>)getStatements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ShortDSLPackage.LOOP__VARIABLE:
        return getVariable();
      case ShortDSLPackage.LOOP__COMPARISON_OPERATOR:
        return getComparisonOperator();
      case ShortDSLPackage.LOOP__SLOT_STATE:
        return getSlotState();
      case ShortDSLPackage.LOOP__STATEMENTS:
        return getStatements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ShortDSLPackage.LOOP__VARIABLE:
        setVariable((Variable)newValue);
        return;
      case ShortDSLPackage.LOOP__COMPARISON_OPERATOR:
        setComparisonOperator((COMPARISON_OPERATOR_S)newValue);
        return;
      case ShortDSLPackage.LOOP__SLOT_STATE:
        setSlotState((DISK_SLOT_STATES_S)newValue);
        return;
      case ShortDSLPackage.LOOP__STATEMENTS:
        getStatements().clear();
        getStatements().addAll((Collection<? extends StatementS>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.LOOP__VARIABLE:
        setVariable((Variable)null);
        return;
      case ShortDSLPackage.LOOP__COMPARISON_OPERATOR:
        setComparisonOperator(COMPARISON_OPERATOR_EDEFAULT);
        return;
      case ShortDSLPackage.LOOP__SLOT_STATE:
        setSlotState(SLOT_STATE_EDEFAULT);
        return;
      case ShortDSLPackage.LOOP__STATEMENTS:
        getStatements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.LOOP__VARIABLE:
        return variable != null;
      case ShortDSLPackage.LOOP__COMPARISON_OPERATOR:
        return comparisonOperator != COMPARISON_OPERATOR_EDEFAULT;
      case ShortDSLPackage.LOOP__SLOT_STATE:
        return slotState != SLOT_STATE_EDEFAULT;
      case ShortDSLPackage.LOOP__STATEMENTS:
        return statements != null && !statements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (comparisonOperator: ");
    result.append(comparisonOperator);
    result.append(", slotState: ");
    result.append(slotState);
    result.append(')');
    return result.toString();
  }

} //LoopImpl
