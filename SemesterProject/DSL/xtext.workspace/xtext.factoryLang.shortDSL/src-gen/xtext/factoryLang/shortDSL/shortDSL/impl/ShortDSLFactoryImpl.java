/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.shortDSL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import xtext.factoryLang.shortDSL.shortDSL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ShortDSLFactoryImpl extends EFactoryImpl implements ShortDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ShortDSLFactory init()
  {
    try
    {
      ShortDSLFactory theShortDSLFactory = (ShortDSLFactory)EPackage.Registry.INSTANCE.getEFactory(ShortDSLPackage.eNS_URI);
      if (theShortDSLFactory != null)
      {
        return theShortDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ShortDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ShortDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ShortDSLPackage.MODEL: return createModel();
      case ShortDSLPackage.DSL_PROGRAM: return createDSLProgram();
      case ShortDSLPackage.CONFIGURATION_S: return createConfigurationS();
      case ShortDSLPackage.DEVICE_S: return createDeviceS();
      case ShortDSLPackage.CONFIGURATION_VALUE_S: return createConfigurationValueS();
      case ShortDSLPackage.LOGGING_S: return createLoggingS();
      case ShortDSLPackage.DISK_HANDLING_S: return createDiskHandlingS();
      case ShortDSLPackage.STATEMENT_S: return createStatementS();
      case ShortDSLPackage.MOVE_S: return createMoveS();
      case ShortDSLPackage.CRANE_ACTION_S: return createCraneActionS();
      case ShortDSLPackage.CONDITION_S: return createConditionS();
      case ShortDSLPackage.MARK_S: return createMarkS();
      case ShortDSLPackage.VARIABLE_S: return createVariableS();
      case ShortDSLPackage.VARIABLE_VALUE_S: return createVariableValueS();
      case ShortDSLPackage.DEVICE_VALUE_S: return createDeviceValueS();
      case ShortDSLPackage.VALUE_SLOT_S: return createValueSlotS();
      case ShortDSLPackage.DSL_TYPE_VALUE: return createDSLTypeValue();
      case ShortDSLPackage.DISK_STATE_VALUE_S: return createDiskStateValueS();
      case ShortDSLPackage.DISK_SLOT_STATE_VALUE_S: return createDiskSlotStateValueS();
      case ShortDSLPackage.COLOR_VALUE_S: return createColorValueS();
      case ShortDSLPackage.NUMBER_S: return createNumberS();
      case ShortDSLPackage.DSL_LONG: return createDSLLong();
      case ShortDSLPackage.DSL_SHORT: return createDSLShort();
      case ShortDSLPackage.CRANE: return createCrane();
      case ShortDSLPackage.CRANE_ZONE: return createCraneZone();
      case ShortDSLPackage.DISK: return createDisk();
      case ShortDSLPackage.DISK_ZONE: return createDiskZone();
      case ShortDSLPackage.CAMERA: return createCamera();
      case ShortDSLPackage.CAMERA_COLOR: return createCameraColor();
      case ShortDSLPackage.LOGGING: return createLogging();
      case ShortDSLPackage.LOOP_VARIABLE: return createLoopVariable();
      case ShortDSLPackage.LOOP_SLOT: return createLoopSlot();
      case ShortDSLPackage.MOVE_DISK: return createMoveDisk();
      case ShortDSLPackage.MOVE_ANY_SLOT: return createMoveAnySlot();
      case ShortDSLPackage.MOVE_CRANE: return createMoveCrane();
      case ShortDSLPackage.CRANE_ACTION: return createCraneAction();
      case ShortDSLPackage.CONDITION_VARIABLE: return createConditionVariable();
      case ShortDSLPackage.CONDITION_SLOT: return createConditionSlot();
      case ShortDSLPackage.CONDITION_DEVICE: return createConditionDevice();
      case ShortDSLPackage.MARK_VARIABLE_VALUE: return createMarkVariableValue();
      case ShortDSLPackage.MARK_CAMERA_VALUE: return createMarkCameraValue();
      case ShortDSLPackage.ORDINARY_VARIABLE: return createOrdinaryVariable();
      case ShortDSLPackage.SLOT_VARIABLE: return createSlotVariable();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ShortDSLPackage.DSL_TYPE_ENUM:
        return createDSL_TYPE_ENUMFromString(eDataType, initialValue);
      case ShortDSLPackage.COMPARISON_OPERATOR_S:
        return createCOMPARISON_OPERATOR_SFromString(eDataType, initialValue);
      case ShortDSLPackage.COLOR_S:
        return createCOLOR_SFromString(eDataType, initialValue);
      case ShortDSLPackage.DISK_SLOT_STATES_S:
        return createDISK_SLOT_STATES_SFromString(eDataType, initialValue);
      case ShortDSLPackage.DISK_STATES_S:
        return createDISK_STATES_SFromString(eDataType, initialValue);
      case ShortDSLPackage.TIME_UNIT_S:
        return createTIME_UNIT_SFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ShortDSLPackage.DSL_TYPE_ENUM:
        return convertDSL_TYPE_ENUMToString(eDataType, instanceValue);
      case ShortDSLPackage.COMPARISON_OPERATOR_S:
        return convertCOMPARISON_OPERATOR_SToString(eDataType, instanceValue);
      case ShortDSLPackage.COLOR_S:
        return convertCOLOR_SToString(eDataType, instanceValue);
      case ShortDSLPackage.DISK_SLOT_STATES_S:
        return convertDISK_SLOT_STATES_SToString(eDataType, instanceValue);
      case ShortDSLPackage.DISK_STATES_S:
        return convertDISK_STATES_SToString(eDataType, instanceValue);
      case ShortDSLPackage.TIME_UNIT_S:
        return convertTIME_UNIT_SToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLProgram createDSLProgram()
  {
    DSLProgramImpl dslProgram = new DSLProgramImpl();
    return dslProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConfigurationS createConfigurationS()
  {
    ConfigurationSImpl configurationS = new ConfigurationSImpl();
    return configurationS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeviceS createDeviceS()
  {
    DeviceSImpl deviceS = new DeviceSImpl();
    return deviceS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConfigurationValueS createConfigurationValueS()
  {
    ConfigurationValueSImpl configurationValueS = new ConfigurationValueSImpl();
    return configurationValueS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoggingS createLoggingS()
  {
    LoggingSImpl loggingS = new LoggingSImpl();
    return loggingS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DiskHandlingS createDiskHandlingS()
  {
    DiskHandlingSImpl diskHandlingS = new DiskHandlingSImpl();
    return diskHandlingS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StatementS createStatementS()
  {
    StatementSImpl statementS = new StatementSImpl();
    return statementS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoveS createMoveS()
  {
    MoveSImpl moveS = new MoveSImpl();
    return moveS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CraneActionS createCraneActionS()
  {
    CraneActionSImpl craneActionS = new CraneActionSImpl();
    return craneActionS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionS createConditionS()
  {
    ConditionSImpl conditionS = new ConditionSImpl();
    return conditionS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MarkS createMarkS()
  {
    MarkSImpl markS = new MarkSImpl();
    return markS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableS createVariableS()
  {
    VariableSImpl variableS = new VariableSImpl();
    return variableS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableValueS createVariableValueS()
  {
    VariableValueSImpl variableValueS = new VariableValueSImpl();
    return variableValueS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeviceValueS createDeviceValueS()
  {
    DeviceValueSImpl deviceValueS = new DeviceValueSImpl();
    return deviceValueS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueSlotS createValueSlotS()
  {
    ValueSlotSImpl valueSlotS = new ValueSlotSImpl();
    return valueSlotS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLTypeValue createDSLTypeValue()
  {
    DSLTypeValueImpl dslTypeValue = new DSLTypeValueImpl();
    return dslTypeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DiskStateValueS createDiskStateValueS()
  {
    DiskStateValueSImpl diskStateValueS = new DiskStateValueSImpl();
    return diskStateValueS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DiskSlotStateValueS createDiskSlotStateValueS()
  {
    DiskSlotStateValueSImpl diskSlotStateValueS = new DiskSlotStateValueSImpl();
    return diskSlotStateValueS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColorValueS createColorValueS()
  {
    ColorValueSImpl colorValueS = new ColorValueSImpl();
    return colorValueS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberS createNumberS()
  {
    NumberSImpl numberS = new NumberSImpl();
    return numberS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLLong createDSLLong()
  {
    DSLLongImpl dslLong = new DSLLongImpl();
    return dslLong;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLShort createDSLShort()
  {
    DSLShortImpl dslShort = new DSLShortImpl();
    return dslShort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Crane createCrane()
  {
    CraneImpl crane = new CraneImpl();
    return crane;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CraneZone createCraneZone()
  {
    CraneZoneImpl craneZone = new CraneZoneImpl();
    return craneZone;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Disk createDisk()
  {
    DiskImpl disk = new DiskImpl();
    return disk;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DiskZone createDiskZone()
  {
    DiskZoneImpl diskZone = new DiskZoneImpl();
    return diskZone;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Camera createCamera()
  {
    CameraImpl camera = new CameraImpl();
    return camera;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CameraColor createCameraColor()
  {
    CameraColorImpl cameraColor = new CameraColorImpl();
    return cameraColor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Logging createLogging()
  {
    LoggingImpl logging = new LoggingImpl();
    return logging;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoopVariable createLoopVariable()
  {
    LoopVariableImpl loopVariable = new LoopVariableImpl();
    return loopVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoopSlot createLoopSlot()
  {
    LoopSlotImpl loopSlot = new LoopSlotImpl();
    return loopSlot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoveDisk createMoveDisk()
  {
    MoveDiskImpl moveDisk = new MoveDiskImpl();
    return moveDisk;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoveAnySlot createMoveAnySlot()
  {
    MoveAnySlotImpl moveAnySlot = new MoveAnySlotImpl();
    return moveAnySlot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoveCrane createMoveCrane()
  {
    MoveCraneImpl moveCrane = new MoveCraneImpl();
    return moveCrane;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CraneAction createCraneAction()
  {
    CraneActionImpl craneAction = new CraneActionImpl();
    return craneAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionVariable createConditionVariable()
  {
    ConditionVariableImpl conditionVariable = new ConditionVariableImpl();
    return conditionVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionSlot createConditionSlot()
  {
    ConditionSlotImpl conditionSlot = new ConditionSlotImpl();
    return conditionSlot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionDevice createConditionDevice()
  {
    ConditionDeviceImpl conditionDevice = new ConditionDeviceImpl();
    return conditionDevice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MarkVariableValue createMarkVariableValue()
  {
    MarkVariableValueImpl markVariableValue = new MarkVariableValueImpl();
    return markVariableValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MarkCameraValue createMarkCameraValue()
  {
    MarkCameraValueImpl markCameraValue = new MarkCameraValueImpl();
    return markCameraValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrdinaryVariable createOrdinaryVariable()
  {
    OrdinaryVariableImpl ordinaryVariable = new OrdinaryVariableImpl();
    return ordinaryVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SlotVariable createSlotVariable()
  {
    SlotVariableImpl slotVariable = new SlotVariableImpl();
    return slotVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DSL_TYPE_ENUM createDSL_TYPE_ENUMFromString(EDataType eDataType, String initialValue)
  {
    DSL_TYPE_ENUM result = DSL_TYPE_ENUM.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDSL_TYPE_ENUMToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public COMPARISON_OPERATOR_S createCOMPARISON_OPERATOR_SFromString(EDataType eDataType, String initialValue)
  {
    COMPARISON_OPERATOR_S result = COMPARISON_OPERATOR_S.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCOMPARISON_OPERATOR_SToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public COLOR_S createCOLOR_SFromString(EDataType eDataType, String initialValue)
  {
    COLOR_S result = COLOR_S.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCOLOR_SToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DISK_SLOT_STATES_S createDISK_SLOT_STATES_SFromString(EDataType eDataType, String initialValue)
  {
    DISK_SLOT_STATES_S result = DISK_SLOT_STATES_S.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDISK_SLOT_STATES_SToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DISK_STATES_S createDISK_STATES_SFromString(EDataType eDataType, String initialValue)
  {
    DISK_STATES_S result = DISK_STATES_S.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDISK_STATES_SToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TIME_UNIT_S createTIME_UNIT_SFromString(EDataType eDataType, String initialValue)
  {
    TIME_UNIT_S result = TIME_UNIT_S.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTIME_UNIT_SToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShortDSLPackage getShortDSLPackage()
  {
    return (ShortDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ShortDSLPackage getPackage()
  {
    return ShortDSLPackage.eINSTANCE;
  }

} //ShortDSLFactoryImpl
