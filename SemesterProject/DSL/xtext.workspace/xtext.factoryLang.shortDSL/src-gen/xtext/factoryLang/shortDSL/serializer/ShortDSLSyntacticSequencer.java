/*
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import xtext.factoryLang.shortDSL.services.ShortDSLGrammarAccess;

@SuppressWarnings("all")
public class ShortDSLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ShortDSLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ActionS_DropKeyword_1_1_or_PickupKeyword_1_0;
	protected AbstractElementAlias match_CameraColorS_CommaKeyword_2_q;
	protected AbstractElementAlias match_CraneZoneS_CommaKeyword_4_q;
	protected AbstractElementAlias match_DiskZoneS_CommaKeyword_4_q;
	protected AbstractElementAlias match_MoveCraneS_HyphenMinusGreaterThanSignKeyword_3_0_or_HyphenMinusHyphenMinusGreaterThanSignKeyword_3_1;
	protected AbstractElementAlias match_MoveDiskS_HyphenMinusGreaterThanSignKeyword_2_0_or_HyphenMinusHyphenMinusGreaterThanSignKeyword_2_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ShortDSLGrammarAccess) access;
		match_ActionS_DropKeyword_1_1_or_PickupKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getActionSAccess().getDropKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getActionSAccess().getPickupKeyword_1_0()));
		match_CameraColorS_CommaKeyword_2_q = new TokenAlias(false, true, grammarAccess.getCameraColorSAccess().getCommaKeyword_2());
		match_CraneZoneS_CommaKeyword_4_q = new TokenAlias(false, true, grammarAccess.getCraneZoneSAccess().getCommaKeyword_4());
		match_DiskZoneS_CommaKeyword_4_q = new TokenAlias(false, true, grammarAccess.getDiskZoneSAccess().getCommaKeyword_4());
		match_MoveCraneS_HyphenMinusGreaterThanSignKeyword_3_0_or_HyphenMinusHyphenMinusGreaterThanSignKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMoveCraneSAccess().getHyphenMinusGreaterThanSignKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getMoveCraneSAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_3_1()));
		match_MoveDiskS_HyphenMinusGreaterThanSignKeyword_2_0_or_HyphenMinusHyphenMinusGreaterThanSignKeyword_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMoveDiskSAccess().getHyphenMinusGreaterThanSignKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getMoveDiskSAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_2_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBEGINRule())
			return getBEGINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRule())
			return getENDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getBEGINToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getENDToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ActionS_DropKeyword_1_1_or_PickupKeyword_1_0.equals(syntax))
				emit_ActionS_DropKeyword_1_1_or_PickupKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CameraColorS_CommaKeyword_2_q.equals(syntax))
				emit_CameraColorS_CommaKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CraneZoneS_CommaKeyword_4_q.equals(syntax))
				emit_CraneZoneS_CommaKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DiskZoneS_CommaKeyword_4_q.equals(syntax))
				emit_DiskZoneS_CommaKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MoveCraneS_HyphenMinusGreaterThanSignKeyword_3_0_or_HyphenMinusHyphenMinusGreaterThanSignKeyword_3_1.equals(syntax))
				emit_MoveCraneS_HyphenMinusGreaterThanSignKeyword_3_0_or_HyphenMinusHyphenMinusGreaterThanSignKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MoveDiskS_HyphenMinusGreaterThanSignKeyword_2_0_or_HyphenMinusHyphenMinusGreaterThanSignKeyword_2_1.equals(syntax))
				emit_MoveDiskS_HyphenMinusGreaterThanSignKeyword_2_0_or_HyphenMinusHyphenMinusGreaterThanSignKeyword_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'pickup' | 'drop'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_ActionS_DropKeyword_1_1_or_PickupKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     color=COLOR_S (ambiguity) (rule end)
	 */
	protected void emit_CameraColorS_CommaKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     zoneValue=INT (ambiguity) (rule end)
	 */
	protected void emit_CraneZoneS_CommaKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     slot=INT (ambiguity) (rule end)
	 */
	protected void emit_DiskZoneS_CommaKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '->' | '-->'
	 *
	 * This ambiguous syntax occurs at:
	 *     action=ActionS (ambiguity) zone=[CraneZone|ID]
	 */
	protected void emit_MoveCraneS_HyphenMinusGreaterThanSignKeyword_3_0_or_HyphenMinusHyphenMinusGreaterThanSignKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '->' | '-->'
	 *
	 * This ambiguous syntax occurs at:
	 *     slot=[Variable|ID] (ambiguity) zone=[DiskZone|ID]
	 */
	protected void emit_MoveDiskS_HyphenMinusGreaterThanSignKeyword_2_0_or_HyphenMinusHyphenMinusGreaterThanSignKeyword_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
