/*
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ShortDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDslTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDslTypeDSLTypeValueParserRuleCall_1_0 = (RuleCall)cDslTypeAssignment_1.eContents().get(0);
		private final Keyword cDslKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDslProgramAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDslProgramDSLProgramParserRuleCall_3_0 = (RuleCall)cDslProgramAssignment_3.eContents().get(0);
		
		//Model:
		//    'use' dslType=DSLTypeValue 'dsl' dslProgram=DSLProgram;
		@Override public ParserRule getRule() { return rule; }
		
		//'use' dslType=DSLTypeValue 'dsl' dslProgram=DSLProgram
		public Group getGroup() { return cGroup; }
		
		//'use'
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }
		
		//dslType=DSLTypeValue
		public Assignment getDslTypeAssignment_1() { return cDslTypeAssignment_1; }
		
		//DSLTypeValue
		public RuleCall getDslTypeDSLTypeValueParserRuleCall_1_0() { return cDslTypeDSLTypeValueParserRuleCall_1_0; }
		
		//'dsl'
		public Keyword getDslKeyword_2() { return cDslKeyword_2; }
		
		//dslProgram=DSLProgram
		public Assignment getDslProgramAssignment_3() { return cDslProgramAssignment_3; }
		
		//DSLProgram
		public RuleCall getDslProgramDSLProgramParserRuleCall_3_0() { return cDslProgramDSLProgramParserRuleCall_3_0; }
	}
	public class DSLProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DSLProgram");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDSLLongParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDSLShortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DSLProgram:
		//    DSLLong | DSLShort;
		@Override public ParserRule getRule() { return rule; }
		
		//DSLLong | DSLShort
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DSLLong
		public RuleCall getDSLLongParserRuleCall_0() { return cDSLLongParserRuleCall_0; }
		
		//DSLShort
		public RuleCall getDSLShortParserRuleCall_1() { return cDSLShortParserRuleCall_1; }
	}
	public class DSLLongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DSLLong");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDSLLongAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTestKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//DSLLong returns DSLProgram:
		//    {DSLLong} 'test' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{DSLLong} 'test' name=ID
		public Group getGroup() { return cGroup; }
		
		//{DSLLong}
		public Action getDSLLongAction_0() { return cDSLLongAction_0; }
		
		//'test'
		public Keyword getTestKeyword_1() { return cTestKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class DSLShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DSLShort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDSLShortAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cConfigurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfigurationConfigurationSParserRuleCall_1_0 = (RuleCall)cConfigurationAssignment_1.eContents().get(0);
		private final Assignment cDiskHandlingsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDiskHandlingsDiskHandlingSParserRuleCall_2_0 = (RuleCall)cDiskHandlingsAssignment_2.eContents().get(0);
		
		//// -------------------- INDIVIDUAL DSL - EASY TO WRITE, "HARDER" TO READ -------------------- //
		//DSLShort returns DSLProgram:
		//    {DSLShort} configuration=ConfigurationS diskHandlings+=DiskHandlingS*;
		@Override public ParserRule getRule() { return rule; }
		
		//{DSLShort} configuration=ConfigurationS diskHandlings+=DiskHandlingS*
		public Group getGroup() { return cGroup; }
		
		//{DSLShort}
		public Action getDSLShortAction_0() { return cDSLShortAction_0; }
		
		//configuration=ConfigurationS
		public Assignment getConfigurationAssignment_1() { return cConfigurationAssignment_1; }
		
		//ConfigurationS
		public RuleCall getConfigurationConfigurationSParserRuleCall_1_0() { return cConfigurationConfigurationSParserRuleCall_1_0; }
		
		//diskHandlings+=DiskHandlingS*
		public Assignment getDiskHandlingsAssignment_2() { return cDiskHandlingsAssignment_2; }
		
		//DiskHandlingS
		public RuleCall getDiskHandlingsDiskHandlingSParserRuleCall_2_0() { return cDiskHandlingsDiskHandlingSParserRuleCall_2_0; }
	}
	public class ConfigurationSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.ConfigurationS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDevicesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cDevicesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDevicesDeviceSParserRuleCall_3_0 = (RuleCall)cDevicesAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// ----- CONFIGURAITON ----- //
		//ConfigurationS:
		//    'devices' '{' BEGIN devices+=DeviceS+ END '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'devices' '{' BEGIN devices+=DeviceS+ END '}'
		public Group getGroup() { return cGroup; }
		
		//'devices'
		public Keyword getDevicesKeyword_0() { return cDevicesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//devices+=DeviceS+
		public Assignment getDevicesAssignment_3() { return cDevicesAssignment_3; }
		
		//DeviceS
		public RuleCall getDevicesDeviceSParserRuleCall_3_0() { return cDevicesDeviceSParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DeviceSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DeviceS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCraneSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDiskSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCameraSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DeviceS:
		//    CraneS | DiskS | CameraS;
		@Override public ParserRule getRule() { return rule; }
		
		//CraneS | DiskS | CameraS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CraneS
		public RuleCall getCraneSParserRuleCall_0() { return cCraneSParserRuleCall_0; }
		
		//DiskS
		public RuleCall getDiskSParserRuleCall_1() { return cDiskSParserRuleCall_1; }
		
		//CameraS
		public RuleCall getCameraSParserRuleCall_2() { return cCameraSParserRuleCall_2; }
	}
	public class CraneSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.CraneS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCraneAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLoggingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLoggingLoggingSParserRuleCall_2_0 = (RuleCall)cLoggingAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cTargetsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetsCraneZoneSParserRuleCall_5_0 = (RuleCall)cTargetsAssignment_5.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//CraneS returns DeviceS:
		//    {Crane} name=ID (logging=LoggingS)? ':' BEGIN targets+=CraneZoneS+ END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Crane} name=ID (logging=LoggingS)? ':' BEGIN targets+=CraneZoneS+ END
		public Group getGroup() { return cGroup; }
		
		//{Crane}
		public Action getCraneAction_0() { return cCraneAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(logging=LoggingS)?
		public Assignment getLoggingAssignment_2() { return cLoggingAssignment_2; }
		
		//LoggingS
		public RuleCall getLoggingLoggingSParserRuleCall_2_0() { return cLoggingLoggingSParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//targets+=CraneZoneS+
		public Assignment getTargetsAssignment_5() { return cTargetsAssignment_5; }
		
		//CraneZoneS
		public RuleCall getTargetsCraneZoneSParserRuleCall_5_0() { return cTargetsCraneZoneSParserRuleCall_5_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class CraneZoneSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.CraneZoneS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCraneZoneAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cZoneValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cZoneValueINTTerminalRuleCall_3_0 = (RuleCall)cZoneValueAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CraneZoneS returns ConfigurationValueS:
		//    {CraneZone} name=ID ':' zoneValue=INT (',')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{CraneZone} name=ID ':' zoneValue=INT (',')?
		public Group getGroup() { return cGroup; }
		
		//{CraneZone}
		public Action getCraneZoneAction_0() { return cCraneZoneAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//zoneValue=INT
		public Assignment getZoneValueAssignment_3() { return cZoneValueAssignment_3; }
		
		//INT
		public RuleCall getZoneValueINTTerminalRuleCall_3_0() { return cZoneValueINTTerminalRuleCall_3_0; }
		
		//(',')?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
	}
	public class DiskSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DiskS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDiskAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNSlotsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNSlotsINTTerminalRuleCall_3_0 = (RuleCall)cNSlotsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLoggingAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLoggingLoggingSParserRuleCall_5_0 = (RuleCall)cLoggingAssignment_5.eContents().get(0);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cBEGINTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cTargetsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTargetsDiskZoneSParserRuleCall_8_0 = (RuleCall)cTargetsAssignment_8.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//DiskS returns DeviceS:
		//    {Disk} name=ID '(' nSlots=INT ')' (logging=LoggingS)? ':' BEGIN targets+=DiskZoneS+ END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Disk} name=ID '(' nSlots=INT ')' (logging=LoggingS)? ':' BEGIN targets+=DiskZoneS+ END
		public Group getGroup() { return cGroup; }
		
		//{Disk}
		public Action getDiskAction_0() { return cDiskAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//nSlots=INT
		public Assignment getNSlotsAssignment_3() { return cNSlotsAssignment_3; }
		
		//INT
		public RuleCall getNSlotsINTTerminalRuleCall_3_0() { return cNSlotsINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//(logging=LoggingS)?
		public Assignment getLoggingAssignment_5() { return cLoggingAssignment_5; }
		
		//LoggingS
		public RuleCall getLoggingLoggingSParserRuleCall_5_0() { return cLoggingLoggingSParserRuleCall_5_0; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_7() { return cBEGINTerminalRuleCall_7; }
		
		//targets+=DiskZoneS+
		public Assignment getTargetsAssignment_8() { return cTargetsAssignment_8; }
		
		//DiskZoneS
		public RuleCall getTargetsDiskZoneSParserRuleCall_8_0() { return cTargetsDiskZoneSParserRuleCall_8_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_9() { return cENDTerminalRuleCall_9; }
	}
	public class DiskZoneSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DiskZoneS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDiskZoneAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSlotAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSlotINTTerminalRuleCall_3_0 = (RuleCall)cSlotAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DiskZoneS returns ConfigurationValueS:
		//    {DiskZone} name=ID ':' slot=INT (',')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DiskZone} name=ID ':' slot=INT (',')?
		public Group getGroup() { return cGroup; }
		
		//{DiskZone}
		public Action getDiskZoneAction_0() { return cDiskZoneAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//slot=INT
		public Assignment getSlotAssignment_3() { return cSlotAssignment_3; }
		
		//INT
		public RuleCall getSlotINTTerminalRuleCall_3_0() { return cSlotINTTerminalRuleCall_3_0; }
		
		//(',')?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
	}
	public class CameraSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.CameraS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCameraAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLoggingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLoggingLoggingSParserRuleCall_2_0 = (RuleCall)cLoggingAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cTargetsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetsCameraColorSParserRuleCall_5_0 = (RuleCall)cTargetsAssignment_5.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//CameraS returns DeviceS:
		//    {Camera} name=ID (logging=LoggingS)? ':' BEGIN targets+=CameraColorS+ END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Camera} name=ID (logging=LoggingS)? ':' BEGIN targets+=CameraColorS+ END
		public Group getGroup() { return cGroup; }
		
		//{Camera}
		public Action getCameraAction_0() { return cCameraAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(logging=LoggingS)?
		public Assignment getLoggingAssignment_2() { return cLoggingAssignment_2; }
		
		//LoggingS
		public RuleCall getLoggingLoggingSParserRuleCall_2_0() { return cLoggingLoggingSParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//targets+=CameraColorS+
		public Assignment getTargetsAssignment_5() { return cTargetsAssignment_5; }
		
		//CameraColorS
		public RuleCall getTargetsCameraColorSParserRuleCall_5_0() { return cTargetsCameraColorSParserRuleCall_5_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class CameraColorSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.CameraColorS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCameraColorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cColorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColorCOLOR_SEnumRuleCall_1_0 = (RuleCall)cColorAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CameraColorS returns ConfigurationValueS:
		//    {CameraColor} color=COLOR_S (',')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{CameraColor} color=COLOR_S (',')?
		public Group getGroup() { return cGroup; }
		
		//{CameraColor}
		public Action getCameraColorAction_0() { return cCameraColorAction_0; }
		
		//color=COLOR_S
		public Assignment getColorAssignment_1() { return cColorAssignment_1; }
		
		//COLOR_S
		public RuleCall getColorCOLOR_SEnumRuleCall_1_0() { return cColorCOLOR_SEnumRuleCall_1_0; }
		
		//(',')?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
	}
	public class LoggingSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.LoggingS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoggingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLoggingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// ----- LOGGING ----- //
		//LoggingS:
		//    {Logging} 'logging';
		@Override public ParserRule getRule() { return rule; }
		
		//{Logging} 'logging'
		public Group getGroup() { return cGroup; }
		
		//{Logging}
		public Action getLoggingAction_0() { return cLoggingAction_0; }
		
		//'logging'
		public Keyword getLoggingKeyword_1() { return cLoggingKeyword_1; }
	}
	public class DiskHandlingSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DiskHandlingS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHandleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDiskAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDiskDiskCrossReference_1_0 = (CrossReference)cDiskAssignment_1.eContents().get(0);
		private final RuleCall cDiskDiskIDTerminalRuleCall_1_0_1 = (RuleCall)cDiskDiskCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementSParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// ----- DISK HANDLING ----- //
		//DiskHandlingS:
		//    'handle' disk=[Disk] '{' BEGIN statements+=StatementS+ END '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'handle' disk=[Disk] '{' BEGIN statements+=StatementS+ END '}'
		public Group getGroup() { return cGroup; }
		
		//'handle'
		public Keyword getHandleKeyword_0() { return cHandleKeyword_0; }
		
		//disk=[Disk]
		public Assignment getDiskAssignment_1() { return cDiskAssignment_1; }
		
		//[Disk]
		public CrossReference getDiskDiskCrossReference_1_0() { return cDiskDiskCrossReference_1_0; }
		
		//ID
		public RuleCall getDiskDiskIDTerminalRuleCall_1_0_1() { return cDiskDiskIDTerminalRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//statements+=StatementS+
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//StatementS
		public RuleCall getStatementsStatementSParserRuleCall_4_0() { return cStatementsStatementSParserRuleCall_4_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class StatementSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.StatementS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoopSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMoveSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCraneActionSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConditionSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMarkSParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//StatementS:
		//    LoopS | MoveS | CraneActionS | ConditionS | MarkS;
		@Override public ParserRule getRule() { return rule; }
		
		//LoopS | MoveS | CraneActionS | ConditionS | MarkS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LoopS
		public RuleCall getLoopSParserRuleCall_0() { return cLoopSParserRuleCall_0; }
		
		//MoveS
		public RuleCall getMoveSParserRuleCall_1() { return cMoveSParserRuleCall_1; }
		
		//CraneActionS
		public RuleCall getCraneActionSParserRuleCall_2() { return cCraneActionSParserRuleCall_2; }
		
		//ConditionS
		public RuleCall getConditionSParserRuleCall_3() { return cConditionSParserRuleCall_3; }
		
		//MarkS
		public RuleCall getMarkSParserRuleCall_4() { return cMarkSParserRuleCall_4; }
	}
	public class LoopSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.LoopS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoopVariableSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLoopSlotSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LoopS returns StatementS:
		//    LoopVariableS | LoopSlotS;
		@Override public ParserRule getRule() { return rule; }
		
		//LoopVariableS | LoopSlotS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LoopVariableS
		public RuleCall getLoopVariableSParserRuleCall_0() { return cLoopVariableSParserRuleCall_0; }
		
		//LoopSlotS
		public RuleCall getLoopSlotSParserRuleCall_1() { return cLoopSlotSParserRuleCall_1; }
	}
	public class LoopVariableSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.LoopVariableS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoopVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForeachKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOrdinaryVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOrdinaryVariableOrdinaryVariableSParserRuleCall_3_0 = (RuleCall)cOrdinaryVariableAssignment_3.eContents().get(0);
		private final Assignment cComparisonOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComparisonOperatorCOMPARISON_OPERATOR_SEnumRuleCall_4_0 = (RuleCall)cComparisonOperatorAssignment_4.eContents().get(0);
		private final Assignment cSlotStateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSlotStateDiskSlotStateValueSParserRuleCall_5_0 = (RuleCall)cSlotStateAssignment_5.eContents().get(0);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cBEGINTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cStatementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementsStatementSParserRuleCall_8_0 = (RuleCall)cStatementsAssignment_8.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//LoopVariableS returns StatementS:
		//    {LoopVariable} 'foreach' 'var' ordinaryVariable=OrdinaryVariableS
		//    comparisonOperator=COMPARISON_OPERATOR_S slotState=DiskSlotStateValueS
		//    ':' BEGIN statements+=StatementS* END;
		@Override public ParserRule getRule() { return rule; }
		
		//{LoopVariable} 'foreach' 'var' ordinaryVariable=OrdinaryVariableS
		//comparisonOperator=COMPARISON_OPERATOR_S slotState=DiskSlotStateValueS
		//':' BEGIN statements+=StatementS* END
		public Group getGroup() { return cGroup; }
		
		//{LoopVariable}
		public Action getLoopVariableAction_0() { return cLoopVariableAction_0; }
		
		//'foreach'
		public Keyword getForeachKeyword_1() { return cForeachKeyword_1; }
		
		//'var'
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }
		
		//ordinaryVariable=OrdinaryVariableS
		public Assignment getOrdinaryVariableAssignment_3() { return cOrdinaryVariableAssignment_3; }
		
		//OrdinaryVariableS
		public RuleCall getOrdinaryVariableOrdinaryVariableSParserRuleCall_3_0() { return cOrdinaryVariableOrdinaryVariableSParserRuleCall_3_0; }
		
		//comparisonOperator=COMPARISON_OPERATOR_S
		public Assignment getComparisonOperatorAssignment_4() { return cComparisonOperatorAssignment_4; }
		
		//COMPARISON_OPERATOR_S
		public RuleCall getComparisonOperatorCOMPARISON_OPERATOR_SEnumRuleCall_4_0() { return cComparisonOperatorCOMPARISON_OPERATOR_SEnumRuleCall_4_0; }
		
		//slotState=DiskSlotStateValueS
		public Assignment getSlotStateAssignment_5() { return cSlotStateAssignment_5; }
		
		//DiskSlotStateValueS
		public RuleCall getSlotStateDiskSlotStateValueSParserRuleCall_5_0() { return cSlotStateDiskSlotStateValueSParserRuleCall_5_0; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_7() { return cBEGINTerminalRuleCall_7; }
		
		//statements+=StatementS*
		public Assignment getStatementsAssignment_8() { return cStatementsAssignment_8; }
		
		//StatementS
		public RuleCall getStatementsStatementSParserRuleCall_8_0() { return cStatementsStatementSParserRuleCall_8_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_9() { return cENDTerminalRuleCall_9; }
	}
	public class LoopSlotSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.LoopSlotS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoopSlotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForeachKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSlotKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSlotVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSlotVariableSlotVariableSParserRuleCall_3_0 = (RuleCall)cSlotVariableAssignment_3.eContents().get(0);
		private final Assignment cComparisonOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComparisonOperatorCOMPARISON_OPERATOR_SEnumRuleCall_4_0 = (RuleCall)cComparisonOperatorAssignment_4.eContents().get(0);
		private final Assignment cSlotStateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSlotStateDiskSlotStateValueSParserRuleCall_5_0 = (RuleCall)cSlotStateAssignment_5.eContents().get(0);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cBEGINTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cStatementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementsStatementSParserRuleCall_8_0 = (RuleCall)cStatementsAssignment_8.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//LoopSlotS returns StatementS:
		//    {LoopSlot} 'foreach' 'slot' slotVariable=SlotVariableS
		//    comparisonOperator=COMPARISON_OPERATOR_S slotState=DiskSlotStateValueS
		//    ':' BEGIN statements+=StatementS* END;
		@Override public ParserRule getRule() { return rule; }
		
		//{LoopSlot} 'foreach' 'slot' slotVariable=SlotVariableS
		//comparisonOperator=COMPARISON_OPERATOR_S slotState=DiskSlotStateValueS
		//':' BEGIN statements+=StatementS* END
		public Group getGroup() { return cGroup; }
		
		//{LoopSlot}
		public Action getLoopSlotAction_0() { return cLoopSlotAction_0; }
		
		//'foreach'
		public Keyword getForeachKeyword_1() { return cForeachKeyword_1; }
		
		//'slot'
		public Keyword getSlotKeyword_2() { return cSlotKeyword_2; }
		
		//slotVariable=SlotVariableS
		public Assignment getSlotVariableAssignment_3() { return cSlotVariableAssignment_3; }
		
		//SlotVariableS
		public RuleCall getSlotVariableSlotVariableSParserRuleCall_3_0() { return cSlotVariableSlotVariableSParserRuleCall_3_0; }
		
		//comparisonOperator=COMPARISON_OPERATOR_S
		public Assignment getComparisonOperatorAssignment_4() { return cComparisonOperatorAssignment_4; }
		
		//COMPARISON_OPERATOR_S
		public RuleCall getComparisonOperatorCOMPARISON_OPERATOR_SEnumRuleCall_4_0() { return cComparisonOperatorCOMPARISON_OPERATOR_SEnumRuleCall_4_0; }
		
		//slotState=DiskSlotStateValueS
		public Assignment getSlotStateAssignment_5() { return cSlotStateAssignment_5; }
		
		//DiskSlotStateValueS
		public RuleCall getSlotStateDiskSlotStateValueSParserRuleCall_5_0() { return cSlotStateDiskSlotStateValueSParserRuleCall_5_0; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_7() { return cBEGINTerminalRuleCall_7; }
		
		//statements+=StatementS*
		public Assignment getStatementsAssignment_8() { return cStatementsAssignment_8; }
		
		//StatementS
		public RuleCall getStatementsStatementSParserRuleCall_8_0() { return cStatementsStatementSParserRuleCall_8_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_9() { return cENDTerminalRuleCall_9; }
	}
	public class MoveSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.MoveS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveDiskSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMoveAnySlotSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMoveCraneSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//MoveS returns StatementS:
		//    MoveDiskS | MoveAnySlotS | MoveCraneS;
		@Override public ParserRule getRule() { return rule; }
		
		//MoveDiskS | MoveAnySlotS | MoveCraneS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MoveDiskS
		public RuleCall getMoveDiskSParserRuleCall_0() { return cMoveDiskSParserRuleCall_0; }
		
		//MoveAnySlotS
		public RuleCall getMoveAnySlotSParserRuleCall_1() { return cMoveAnySlotSParserRuleCall_1; }
		
		//MoveCraneS
		public RuleCall getMoveCraneSParserRuleCall_2() { return cMoveCraneSParserRuleCall_2; }
	}
	public class MoveDiskSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.MoveDiskS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoveDiskAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSlotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSlotSlotVariableCrossReference_1_0 = (CrossReference)cSlotAssignment_1.eContents().get(0);
		private final RuleCall cSlotSlotVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cSlotSlotVariableCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cZoneAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cZoneDiskZoneCrossReference_3_0 = (CrossReference)cZoneAssignment_3.eContents().get(0);
		private final RuleCall cZoneDiskZoneIDTerminalRuleCall_3_0_1 = (RuleCall)cZoneDiskZoneCrossReference_3_0.eContents().get(1);
		
		//MoveDiskS returns MoveS:
		//    {MoveDisk} slot=[SlotVariable] ('->' | '-->') zone=[DiskZone];
		@Override public ParserRule getRule() { return rule; }
		
		//{MoveDisk} slot=[SlotVariable] ('->' | '-->') zone=[DiskZone]
		public Group getGroup() { return cGroup; }
		
		//{MoveDisk}
		public Action getMoveDiskAction_0() { return cMoveDiskAction_0; }
		
		//slot=[SlotVariable]
		public Assignment getSlotAssignment_1() { return cSlotAssignment_1; }
		
		//[SlotVariable]
		public CrossReference getSlotSlotVariableCrossReference_1_0() { return cSlotSlotVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getSlotSlotVariableIDTerminalRuleCall_1_0_1() { return cSlotSlotVariableIDTerminalRuleCall_1_0_1; }
		
		//('->' | '-->')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0() { return cHyphenMinusGreaterThanSignKeyword_2_0; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_2_1() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_2_1; }
		
		//zone=[DiskZone]
		public Assignment getZoneAssignment_3() { return cZoneAssignment_3; }
		
		//[DiskZone]
		public CrossReference getZoneDiskZoneCrossReference_3_0() { return cZoneDiskZoneCrossReference_3_0; }
		
		//ID
		public RuleCall getZoneDiskZoneIDTerminalRuleCall_3_0_1() { return cZoneDiskZoneIDTerminalRuleCall_3_0_1; }
	}
	public class MoveAnySlotSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.MoveAnySlotS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoveAnySlotAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStateDiskSlotStateValueSParserRuleCall_1_0 = (RuleCall)cStateAssignment_1.eContents().get(0);
		private final Assignment cAnySlotAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnySlotSlotVariableSParserRuleCall_2_0 = (RuleCall)cAnySlotAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cZoneAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cZoneDiskZoneCrossReference_4_0 = (CrossReference)cZoneAssignment_4.eContents().get(0);
		private final RuleCall cZoneDiskZoneIDTerminalRuleCall_4_0_1 = (RuleCall)cZoneDiskZoneCrossReference_4_0.eContents().get(1);
		
		//MoveAnySlotS returns MoveS:
		//    {MoveAnySlot} state=DiskSlotStateValueS anySlot=SlotVariableS ('->' | '-->') zone=[DiskZone];
		@Override public ParserRule getRule() { return rule; }
		
		//{MoveAnySlot} state=DiskSlotStateValueS anySlot=SlotVariableS ('->' | '-->') zone=[DiskZone]
		public Group getGroup() { return cGroup; }
		
		//{MoveAnySlot}
		public Action getMoveAnySlotAction_0() { return cMoveAnySlotAction_0; }
		
		//state=DiskSlotStateValueS
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }
		
		//DiskSlotStateValueS
		public RuleCall getStateDiskSlotStateValueSParserRuleCall_1_0() { return cStateDiskSlotStateValueSParserRuleCall_1_0; }
		
		//anySlot=SlotVariableS
		public Assignment getAnySlotAssignment_2() { return cAnySlotAssignment_2; }
		
		//SlotVariableS
		public RuleCall getAnySlotSlotVariableSParserRuleCall_2_0() { return cAnySlotSlotVariableSParserRuleCall_2_0; }
		
		//('->' | '-->')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_3_1() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_3_1; }
		
		//zone=[DiskZone]
		public Assignment getZoneAssignment_4() { return cZoneAssignment_4; }
		
		//[DiskZone]
		public CrossReference getZoneDiskZoneCrossReference_4_0() { return cZoneDiskZoneCrossReference_4_0; }
		
		//ID
		public RuleCall getZoneDiskZoneIDTerminalRuleCall_4_0_1() { return cZoneDiskZoneIDTerminalRuleCall_4_0_1; }
	}
	public class MoveCraneSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.MoveCraneS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoveCraneAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCraneAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cCraneCraneCrossReference_1_0 = (CrossReference)cCraneAssignment_1.eContents().get(0);
		private final RuleCall cCraneCraneIDTerminalRuleCall_1_0_1 = (RuleCall)cCraneCraneCrossReference_1_0.eContents().get(1);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionCraneActionSParserRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cZoneAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cZoneCraneZoneCrossReference_4_0 = (CrossReference)cZoneAssignment_4.eContents().get(0);
		private final RuleCall cZoneCraneZoneIDTerminalRuleCall_4_0_1 = (RuleCall)cZoneCraneZoneCrossReference_4_0.eContents().get(1);
		
		//MoveCraneS returns MoveS:
		//    {MoveCrane} crane=[Crane] action=CraneActionS ('->' | '-->') zone=[CraneZone];
		@Override public ParserRule getRule() { return rule; }
		
		//{MoveCrane} crane=[Crane] action=CraneActionS ('->' | '-->') zone=[CraneZone]
		public Group getGroup() { return cGroup; }
		
		//{MoveCrane}
		public Action getMoveCraneAction_0() { return cMoveCraneAction_0; }
		
		//crane=[Crane]
		public Assignment getCraneAssignment_1() { return cCraneAssignment_1; }
		
		//[Crane]
		public CrossReference getCraneCraneCrossReference_1_0() { return cCraneCraneCrossReference_1_0; }
		
		//ID
		public RuleCall getCraneCraneIDTerminalRuleCall_1_0_1() { return cCraneCraneIDTerminalRuleCall_1_0_1; }
		
		//action=CraneActionS
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }
		
		//CraneActionS
		public RuleCall getActionCraneActionSParserRuleCall_2_0() { return cActionCraneActionSParserRuleCall_2_0; }
		
		//('->' | '-->')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_3_1() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_3_1; }
		
		//zone=[CraneZone]
		public Assignment getZoneAssignment_4() { return cZoneAssignment_4; }
		
		//[CraneZone]
		public CrossReference getZoneCraneZoneCrossReference_4_0() { return cZoneCraneZoneCrossReference_4_0; }
		
		//ID
		public RuleCall getZoneCraneZoneIDTerminalRuleCall_4_0_1() { return cZoneCraneZoneIDTerminalRuleCall_4_0_1; }
	}
	public class CraneActionSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.CraneActionS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCraneActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPickupKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cDropKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//CraneActionS:
		//    {CraneAction} ('pickup' | 'drop');
		@Override public ParserRule getRule() { return rule; }
		
		//{CraneAction} ('pickup' | 'drop')
		public Group getGroup() { return cGroup; }
		
		//{CraneAction}
		public Action getCraneActionAction_0() { return cCraneActionAction_0; }
		
		//('pickup' | 'drop')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'pickup'
		public Keyword getPickupKeyword_1_0() { return cPickupKeyword_1_0; }
		
		//'drop'
		public Keyword getDropKeyword_1_1() { return cDropKeyword_1_1; }
	}
	public class ConditionSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.ConditionS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionVariableSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionDeviceSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConditionSlotSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ConditionS returns StatementS:
		//    ConditionVariableS | ConditionDeviceS | ConditionSlotS;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionVariableS | ConditionDeviceS | ConditionSlotS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConditionVariableS
		public RuleCall getConditionVariableSParserRuleCall_0() { return cConditionVariableSParserRuleCall_0; }
		
		//ConditionDeviceS
		public RuleCall getConditionDeviceSParserRuleCall_1() { return cConditionDeviceSParserRuleCall_1; }
		
		//ConditionSlotS
		public RuleCall getConditionSlotSParserRuleCall_2() { return cConditionSlotSParserRuleCall_2; }
	}
	public class ConditionVariableSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.ConditionVariableS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVariableOrdinaryVariableCrossReference_3_0 = (CrossReference)cVariableAssignment_3.eContents().get(0);
		private final RuleCall cVariableOrdinaryVariableIDTerminalRuleCall_3_0_1 = (RuleCall)cVariableOrdinaryVariableCrossReference_3_0.eContents().get(1);
		private final Assignment cComparisonOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComparisonOperatorCOMPARISON_OPERATOR_SEnumRuleCall_4_0 = (RuleCall)cComparisonOperatorAssignment_4.eContents().get(0);
		private final Assignment cVariableValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariableValueVariableValueSParserRuleCall_5_0 = (RuleCall)cVariableValueAssignment_5.eContents().get(0);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cBEGINTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cStatementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementsStatementSParserRuleCall_8_0 = (RuleCall)cStatementsAssignment_8.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//ConditionVariableS returns ConditionS:
		//    {ConditionVariable} 'if' 'var' variable=[OrdinaryVariable]
		//    comparisonOperator=COMPARISON_OPERATOR_S variableValue=VariableValueS
		//    ':' BEGIN statements+=StatementS* END;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConditionVariable} 'if' 'var' variable=[OrdinaryVariable]
		//comparisonOperator=COMPARISON_OPERATOR_S variableValue=VariableValueS
		//':' BEGIN statements+=StatementS* END
		public Group getGroup() { return cGroup; }
		
		//{ConditionVariable}
		public Action getConditionVariableAction_0() { return cConditionVariableAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'var'
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }
		
		//variable=[OrdinaryVariable]
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//[OrdinaryVariable]
		public CrossReference getVariableOrdinaryVariableCrossReference_3_0() { return cVariableOrdinaryVariableCrossReference_3_0; }
		
		//ID
		public RuleCall getVariableOrdinaryVariableIDTerminalRuleCall_3_0_1() { return cVariableOrdinaryVariableIDTerminalRuleCall_3_0_1; }
		
		//comparisonOperator=COMPARISON_OPERATOR_S
		public Assignment getComparisonOperatorAssignment_4() { return cComparisonOperatorAssignment_4; }
		
		//COMPARISON_OPERATOR_S
		public RuleCall getComparisonOperatorCOMPARISON_OPERATOR_SEnumRuleCall_4_0() { return cComparisonOperatorCOMPARISON_OPERATOR_SEnumRuleCall_4_0; }
		
		//variableValue=VariableValueS
		public Assignment getVariableValueAssignment_5() { return cVariableValueAssignment_5; }
		
		//VariableValueS
		public RuleCall getVariableValueVariableValueSParserRuleCall_5_0() { return cVariableValueVariableValueSParserRuleCall_5_0; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_7() { return cBEGINTerminalRuleCall_7; }
		
		//statements+=StatementS*
		public Assignment getStatementsAssignment_8() { return cStatementsAssignment_8; }
		
		//StatementS
		public RuleCall getStatementsStatementSParserRuleCall_8_0() { return cStatementsStatementSParserRuleCall_8_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_9() { return cENDTerminalRuleCall_9; }
	}
	public class ConditionSlotSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.ConditionSlotS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionSlotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSlotKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVariableSlotVariableCrossReference_3_0 = (CrossReference)cVariableAssignment_3.eContents().get(0);
		private final RuleCall cVariableSlotVariableIDTerminalRuleCall_3_0_1 = (RuleCall)cVariableSlotVariableCrossReference_3_0.eContents().get(1);
		private final Assignment cComparisonOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComparisonOperatorCOMPARISON_OPERATOR_SEnumRuleCall_4_0 = (RuleCall)cComparisonOperatorAssignment_4.eContents().get(0);
		private final Assignment cSlotValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSlotValueValueSlotSParserRuleCall_5_0 = (RuleCall)cSlotValueAssignment_5.eContents().get(0);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cBEGINTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cStatementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementsStatementSParserRuleCall_8_0 = (RuleCall)cStatementsAssignment_8.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//ConditionSlotS returns ConditionS:
		//    {ConditionSlot} 'if' 'slot' variable=[SlotVariable]
		//    comparisonOperator=COMPARISON_OPERATOR_S slotValue=ValueSlotS
		//    ':' BEGIN statements+=StatementS* END;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConditionSlot} 'if' 'slot' variable=[SlotVariable]
		//comparisonOperator=COMPARISON_OPERATOR_S slotValue=ValueSlotS
		//':' BEGIN statements+=StatementS* END
		public Group getGroup() { return cGroup; }
		
		//{ConditionSlot}
		public Action getConditionSlotAction_0() { return cConditionSlotAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'slot'
		public Keyword getSlotKeyword_2() { return cSlotKeyword_2; }
		
		//variable=[SlotVariable]
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//[SlotVariable]
		public CrossReference getVariableSlotVariableCrossReference_3_0() { return cVariableSlotVariableCrossReference_3_0; }
		
		//ID
		public RuleCall getVariableSlotVariableIDTerminalRuleCall_3_0_1() { return cVariableSlotVariableIDTerminalRuleCall_3_0_1; }
		
		//comparisonOperator=COMPARISON_OPERATOR_S
		public Assignment getComparisonOperatorAssignment_4() { return cComparisonOperatorAssignment_4; }
		
		//COMPARISON_OPERATOR_S
		public RuleCall getComparisonOperatorCOMPARISON_OPERATOR_SEnumRuleCall_4_0() { return cComparisonOperatorCOMPARISON_OPERATOR_SEnumRuleCall_4_0; }
		
		//slotValue=ValueSlotS
		public Assignment getSlotValueAssignment_5() { return cSlotValueAssignment_5; }
		
		//ValueSlotS
		public RuleCall getSlotValueValueSlotSParserRuleCall_5_0() { return cSlotValueValueSlotSParserRuleCall_5_0; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_7() { return cBEGINTerminalRuleCall_7; }
		
		//statements+=StatementS*
		public Assignment getStatementsAssignment_8() { return cStatementsAssignment_8; }
		
		//StatementS
		public RuleCall getStatementsStatementSParserRuleCall_8_0() { return cStatementsStatementSParserRuleCall_8_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_9() { return cENDTerminalRuleCall_9; }
	}
	public class ConditionDeviceSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.ConditionDeviceS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionDeviceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDevKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeviceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDeviceDeviceSCrossReference_3_0 = (CrossReference)cDeviceAssignment_3.eContents().get(0);
		private final RuleCall cDeviceDeviceSIDTerminalRuleCall_3_0_1 = (RuleCall)cDeviceDeviceSCrossReference_3_0.eContents().get(1);
		private final Assignment cComparisonOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComparisonOperatorCOMPARISON_OPERATOR_SEnumRuleCall_4_0 = (RuleCall)cComparisonOperatorAssignment_4.eContents().get(0);
		private final Assignment cDeviceValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeviceValueDeviceValueSParserRuleCall_5_0 = (RuleCall)cDeviceValueAssignment_5.eContents().get(0);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cBEGINTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cStatementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementsStatementSParserRuleCall_8_0 = (RuleCall)cStatementsAssignment_8.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//ConditionDeviceS returns ConditionS:
		//    {ConditionDevice} 'if' 'dev' device=[DeviceS]
		//    comparisonOperator=COMPARISON_OPERATOR_S deviceValue=DeviceValueS
		//    ':' BEGIN statements+=StatementS* END;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConditionDevice} 'if' 'dev' device=[DeviceS]
		//comparisonOperator=COMPARISON_OPERATOR_S deviceValue=DeviceValueS
		//':' BEGIN statements+=StatementS* END
		public Group getGroup() { return cGroup; }
		
		//{ConditionDevice}
		public Action getConditionDeviceAction_0() { return cConditionDeviceAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'dev'
		public Keyword getDevKeyword_2() { return cDevKeyword_2; }
		
		//device=[DeviceS]
		public Assignment getDeviceAssignment_3() { return cDeviceAssignment_3; }
		
		//[DeviceS]
		public CrossReference getDeviceDeviceSCrossReference_3_0() { return cDeviceDeviceSCrossReference_3_0; }
		
		//ID
		public RuleCall getDeviceDeviceSIDTerminalRuleCall_3_0_1() { return cDeviceDeviceSIDTerminalRuleCall_3_0_1; }
		
		//comparisonOperator=COMPARISON_OPERATOR_S
		public Assignment getComparisonOperatorAssignment_4() { return cComparisonOperatorAssignment_4; }
		
		//COMPARISON_OPERATOR_S
		public RuleCall getComparisonOperatorCOMPARISON_OPERATOR_SEnumRuleCall_4_0() { return cComparisonOperatorCOMPARISON_OPERATOR_SEnumRuleCall_4_0; }
		
		//deviceValue=DeviceValueS
		public Assignment getDeviceValueAssignment_5() { return cDeviceValueAssignment_5; }
		
		//DeviceValueS
		public RuleCall getDeviceValueDeviceValueSParserRuleCall_5_0() { return cDeviceValueDeviceValueSParserRuleCall_5_0; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_7() { return cBEGINTerminalRuleCall_7; }
		
		//statements+=StatementS*
		public Assignment getStatementsAssignment_8() { return cStatementsAssignment_8; }
		
		//StatementS
		public RuleCall getStatementsStatementSParserRuleCall_8_0() { return cStatementsStatementSParserRuleCall_8_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_9() { return cENDTerminalRuleCall_9; }
	}
	public class MarkSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.MarkS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMarkVariableValueSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMarkCameraValueSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MarkS returns StatementS:
		//    MarkVariableValueS | MarkCameraValueS;
		@Override public ParserRule getRule() { return rule; }
		
		//MarkVariableValueS | MarkCameraValueS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MarkVariableValueS
		public RuleCall getMarkVariableValueSParserRuleCall_0() { return cMarkVariableValueSParserRuleCall_0; }
		
		//MarkCameraValueS
		public RuleCall getMarkCameraValueSParserRuleCall_1() { return cMarkCameraValueSParserRuleCall_1; }
	}
	public class MarkVariableValueSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.MarkVariableValueS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMarkVariableValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableVariableSCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableVariableSIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableVariableSCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueSlotSParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTimeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTimeINTTerminalRuleCall_4_1_0 = (RuleCall)cTimeAssignment_4_1.eContents().get(0);
		private final Assignment cUnitAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cUnitTIME_UNIT_SEnumRuleCall_4_2_0 = (RuleCall)cUnitAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MarkVariableValueS returns MarkS:
		//    {MarkVariableValue} variable=[VariableS] '(' value=ValueSlotS (',' time=INT unit=TIME_UNIT_S)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{MarkVariableValue} variable=[VariableS] '(' value=ValueSlotS (',' time=INT unit=TIME_UNIT_S)? ')'
		public Group getGroup() { return cGroup; }
		
		//{MarkVariableValue}
		public Action getMarkVariableValueAction_0() { return cMarkVariableValueAction_0; }
		
		//variable=[VariableS]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[VariableS]
		public CrossReference getVariableVariableSCrossReference_1_0() { return cVariableVariableSCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableVariableSIDTerminalRuleCall_1_0_1() { return cVariableVariableSIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value=ValueSlotS
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//ValueSlotS
		public RuleCall getValueValueSlotSParserRuleCall_3_0() { return cValueValueSlotSParserRuleCall_3_0; }
		
		//(',' time=INT unit=TIME_UNIT_S)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//time=INT
		public Assignment getTimeAssignment_4_1() { return cTimeAssignment_4_1; }
		
		//INT
		public RuleCall getTimeINTTerminalRuleCall_4_1_0() { return cTimeINTTerminalRuleCall_4_1_0; }
		
		//unit=TIME_UNIT_S
		public Assignment getUnitAssignment_4_2() { return cUnitAssignment_4_2; }
		
		//TIME_UNIT_S
		public RuleCall getUnitTIME_UNIT_SEnumRuleCall_4_2_0() { return cUnitTIME_UNIT_SEnumRuleCall_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class MarkCameraValueSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.MarkCameraValueS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMarkCameraValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCameraAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cCameraCameraCrossReference_1_0 = (CrossReference)cCameraAssignment_1.eContents().get(0);
		private final RuleCall cCameraCameraIDTerminalRuleCall_1_0_1 = (RuleCall)cCameraCameraCrossReference_1_0.eContents().get(1);
		private final Keyword cScanKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableOrdinaryVariableSParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		
		//MarkCameraValueS returns MarkS:
		//    {MarkCameraValue} camera=[Camera] 'scan' variable=OrdinaryVariableS;
		@Override public ParserRule getRule() { return rule; }
		
		//{MarkCameraValue} camera=[Camera] 'scan' variable=OrdinaryVariableS
		public Group getGroup() { return cGroup; }
		
		//{MarkCameraValue}
		public Action getMarkCameraValueAction_0() { return cMarkCameraValueAction_0; }
		
		//camera=[Camera]
		public Assignment getCameraAssignment_1() { return cCameraAssignment_1; }
		
		//[Camera]
		public CrossReference getCameraCameraCrossReference_1_0() { return cCameraCameraCrossReference_1_0; }
		
		//ID
		public RuleCall getCameraCameraIDTerminalRuleCall_1_0_1() { return cCameraCameraIDTerminalRuleCall_1_0_1; }
		
		//'scan'
		public Keyword getScanKeyword_2() { return cScanKeyword_2; }
		
		//variable=OrdinaryVariableS
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//OrdinaryVariableS
		public RuleCall getVariableOrdinaryVariableSParserRuleCall_3_0() { return cVariableOrdinaryVariableSParserRuleCall_3_0; }
	}
	public class VariableSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.VariableS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOrdinaryVariableSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSlotVariableSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ----- VALUE TYPES ----- //
		//VariableS:
		//    OrdinaryVariableS | SlotVariableS;
		@Override public ParserRule getRule() { return rule; }
		
		//OrdinaryVariableS | SlotVariableS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OrdinaryVariableS
		public RuleCall getOrdinaryVariableSParserRuleCall_0() { return cOrdinaryVariableSParserRuleCall_0; }
		
		//SlotVariableS
		public RuleCall getSlotVariableSParserRuleCall_1() { return cSlotVariableSParserRuleCall_1; }
	}
	public class OrdinaryVariableSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.OrdinaryVariableS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrdinaryVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		// //| GlobalVariableS;
		//OrdinaryVariableS returns VariableS:
		//    {OrdinaryVariable} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{OrdinaryVariable} name=ID
		public Group getGroup() { return cGroup; }
		
		//{OrdinaryVariable}
		public Action getOrdinaryVariableAction_0() { return cOrdinaryVariableAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SlotVariableSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.SlotVariableS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSlotVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SlotVariableS returns VariableS:
		//    {SlotVariable} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{SlotVariable} name=ID
		public Group getGroup() { return cGroup; }
		
		//{SlotVariable}
		public Action getSlotVariableAction_0() { return cSlotVariableAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class VariableValueSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.VariableValueS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueDiskSlotStateValueSParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueColorValueSParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValueNumberSParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cValueDiskStateValueSParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Assignment cRefAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final CrossReference cRefVariableSCrossReference_4_0 = (CrossReference)cRefAssignment_4.eContents().get(0);
		private final RuleCall cRefVariableSIDTerminalRuleCall_4_0_1 = (RuleCall)cRefVariableSCrossReference_4_0.eContents().get(1);
		
		///*GlobalVariableS returns VariableS:
		//    {GlobalVariable} name=ID;*/
		//VariableValueS:
		//    value=DiskSlotStateValueS | value=ColorValueS | value=NumberS | value=DiskStateValueS | ref=[VariableS];
		@Override public ParserRule getRule() { return rule; }
		
		//value=DiskSlotStateValueS | value=ColorValueS | value=NumberS | value=DiskStateValueS | ref=[VariableS]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=DiskSlotStateValueS
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//DiskSlotStateValueS
		public RuleCall getValueDiskSlotStateValueSParserRuleCall_0_0() { return cValueDiskSlotStateValueSParserRuleCall_0_0; }
		
		//value=ColorValueS
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ColorValueS
		public RuleCall getValueColorValueSParserRuleCall_1_0() { return cValueColorValueSParserRuleCall_1_0; }
		
		//value=NumberS
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//NumberS
		public RuleCall getValueNumberSParserRuleCall_2_0() { return cValueNumberSParserRuleCall_2_0; }
		
		//value=DiskStateValueS
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//DiskStateValueS
		public RuleCall getValueDiskStateValueSParserRuleCall_3_0() { return cValueDiskStateValueSParserRuleCall_3_0; }
		
		//ref=[VariableS]
		public Assignment getRefAssignment_4() { return cRefAssignment_4; }
		
		//[VariableS]
		public CrossReference getRefVariableSCrossReference_4_0() { return cRefVariableSCrossReference_4_0; }
		
		//ID
		public RuleCall getRefVariableSIDTerminalRuleCall_4_0_1() { return cRefVariableSIDTerminalRuleCall_4_0_1; }
	}
	public class DeviceValueSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DeviceValueS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueDiskStateValueSParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueColorValueSParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cConfigurationValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cConfigurationValueConfigurationValueSCrossReference_2_0 = (CrossReference)cConfigurationValueAssignment_2.eContents().get(0);
		private final RuleCall cConfigurationValueConfigurationValueSIDTerminalRuleCall_2_0_1 = (RuleCall)cConfigurationValueConfigurationValueSCrossReference_2_0.eContents().get(1);
		
		//DeviceValueS:
		//    value=DiskStateValueS | value=ColorValueS | configurationValue=[ConfigurationValueS];
		@Override public ParserRule getRule() { return rule; }
		
		//value=DiskStateValueS | value=ColorValueS | configurationValue=[ConfigurationValueS]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=DiskStateValueS
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//DiskStateValueS
		public RuleCall getValueDiskStateValueSParserRuleCall_0_0() { return cValueDiskStateValueSParserRuleCall_0_0; }
		
		//value=ColorValueS
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ColorValueS
		public RuleCall getValueColorValueSParserRuleCall_1_0() { return cValueColorValueSParserRuleCall_1_0; }
		
		//configurationValue=[ConfigurationValueS]
		public Assignment getConfigurationValueAssignment_2() { return cConfigurationValueAssignment_2; }
		
		//[ConfigurationValueS]
		public CrossReference getConfigurationValueConfigurationValueSCrossReference_2_0() { return cConfigurationValueConfigurationValueSCrossReference_2_0; }
		
		//ID
		public RuleCall getConfigurationValueConfigurationValueSIDTerminalRuleCall_2_0_1() { return cConfigurationValueConfigurationValueSIDTerminalRuleCall_2_0_1; }
	}
	public class ValueSlotSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.ValueSlotS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueDiskSlotStateValueSParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueColorValueSParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ValueSlotS:
		//    value=DiskSlotStateValueS | value=ColorValueS;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DiskSlotStateValueS | value=ColorValueS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=DiskSlotStateValueS
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//DiskSlotStateValueS
		public RuleCall getValueDiskSlotStateValueSParserRuleCall_0_0() { return cValueDiskSlotStateValueSParserRuleCall_0_0; }
		
		//value=ColorValueS
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ColorValueS
		public RuleCall getValueColorValueSParserRuleCall_1_0() { return cValueColorValueSParserRuleCall_1_0; }
	}
	public class DSLTypeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DSLTypeValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDSL_TYPE_ENUMEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//// ----- VALUE TYPES:ACTUAL VALUES ----- //
		//DSLTypeValue:
		//    value=DSL_TYPE_ENUM;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DSL_TYPE_ENUM
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DSL_TYPE_ENUM
		public RuleCall getValueDSL_TYPE_ENUMEnumRuleCall_0() { return cValueDSL_TYPE_ENUMEnumRuleCall_0; }
	}
	public class DiskStateValueSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DiskStateValueS");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDISK_STATES_SEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DiskStateValueS:
		//    value=DISK_STATES_S;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DISK_STATES_S
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DISK_STATES_S
		public RuleCall getValueDISK_STATES_SEnumRuleCall_0() { return cValueDISK_STATES_SEnumRuleCall_0; }
	}
	public class DiskSlotStateValueSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DiskSlotStateValueS");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDISK_SLOT_STATES_SEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DiskSlotStateValueS:
		//    value=DISK_SLOT_STATES_S;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DISK_SLOT_STATES_S
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DISK_SLOT_STATES_S
		public RuleCall getValueDISK_SLOT_STATES_SEnumRuleCall_0() { return cValueDISK_SLOT_STATES_SEnumRuleCall_0; }
	}
	public class ColorValueSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.ColorValueS");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueCOLOR_SEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ColorValueS:
		//    value=COLOR_S;
		@Override public ParserRule getRule() { return rule; }
		
		//value=COLOR_S
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//COLOR_S
		public RuleCall getValueCOLOR_SEnumRuleCall_0() { return cValueCOLOR_SEnumRuleCall_0; }
	}
	public class NumberSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.NumberS");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberS:
		//    value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	
	public class DSL_TYPE_ENUMElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DSL_TYPE_ENUM");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLONGLongKeyword_0_0 = (Keyword)cLONGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSHORTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSHORTShortKeyword_1_0 = (Keyword)cSHORTEnumLiteralDeclaration_1.eContents().get(0);
		
		//// ----- TERMINALS ----- //
		//enum DSL_TYPE_ENUM:
		//    LONG='long' | SHORT='short';
		public EnumRule getRule() { return rule; }
		
		//LONG='long' | SHORT='short'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LONG='long'
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_0() { return cLONGEnumLiteralDeclaration_0; }
		
		//'long'
		public Keyword getLONGLongKeyword_0_0() { return cLONGLongKeyword_0_0; }
		
		//SHORT='short'
		public EnumLiteralDeclaration getSHORTEnumLiteralDeclaration_1() { return cSHORTEnumLiteralDeclaration_1; }
		
		//'short'
		public Keyword getSHORTShortKeyword_1_0() { return cSHORTShortKeyword_1_0; }
	}
	public class COMPARISON_OPERATOR_SElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.COMPARISON_OPERATOR_S");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_THANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLESS_THANLessThanSignKeyword_1_0 = (Keyword)cLESS_THANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THANEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREATER_THANGreaterThanSignKeyword_2_0 = (Keyword)cGREATER_THANEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNOTExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cNOTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum COMPARISON_OPERATOR_S:
		//    EQUAL='=' | LESS_THAN='<' | GREATER_THAN='>' | NOT='!=';
		public EnumRule getRule() { return rule; }
		
		//EQUAL='=' | LESS_THAN='<' | GREATER_THAN='>' | NOT='!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL='='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEQUALEqualsSignKeyword_0_0() { return cEQUALEqualsSignKeyword_0_0; }
		
		//LESS_THAN='<'
		public EnumLiteralDeclaration getLESS_THANEnumLiteralDeclaration_1() { return cLESS_THANEnumLiteralDeclaration_1; }
		
		//'<'
		public Keyword getLESS_THANLessThanSignKeyword_1_0() { return cLESS_THANLessThanSignKeyword_1_0; }
		
		//GREATER_THAN='>'
		public EnumLiteralDeclaration getGREATER_THANEnumLiteralDeclaration_2() { return cGREATER_THANEnumLiteralDeclaration_2; }
		
		//'>'
		public Keyword getGREATER_THANGreaterThanSignKeyword_2_0() { return cGREATER_THANGreaterThanSignKeyword_2_0; }
		
		//NOT='!='
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_3() { return cNOTEnumLiteralDeclaration_3; }
		
		//'!='
		public Keyword getNOTExclamationMarkEqualsSignKeyword_3_0() { return cNOTExclamationMarkEqualsSignKeyword_3_0; }
	}
	public class COLOR_SElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.COLOR_S");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREDRedKeyword_0_0 = (Keyword)cREDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREENGreenKeyword_1_0 = (Keyword)cGREENEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBLUEBlueKeyword_2_0 = (Keyword)cBLUEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum COLOR_S:
		//    RED='red' | GREEN='green' | BLUE='blue';
		public EnumRule getRule() { return rule; }
		
		//RED='red' | GREEN='green' | BLUE='blue'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RED='red'
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_0() { return cREDEnumLiteralDeclaration_0; }
		
		//'red'
		public Keyword getREDRedKeyword_0_0() { return cREDRedKeyword_0_0; }
		
		//GREEN='green'
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_1() { return cGREENEnumLiteralDeclaration_1; }
		
		//'green'
		public Keyword getGREENGreenKeyword_1_0() { return cGREENGreenKeyword_1_0; }
		
		//BLUE='blue'
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_2() { return cBLUEEnumLiteralDeclaration_2; }
		
		//'blue'
		public Keyword getBLUEBlueKeyword_2_0() { return cBLUEBlueKeyword_2_0; }
	}
	public class DISK_SLOT_STATES_SElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DISK_SLOT_STATES_S");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFREEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFREEFreeKeyword_0_0 = (Keyword)cFREEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIN_PROGRESSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIN_PROGRESSIn_progressKeyword_1_0 = (Keyword)cIN_PROGRESSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPLETEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCOMPLETECompleteKeyword_2_0 = (Keyword)cCOMPLETEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DISK_SLOT_STATES_S:
		//    FREE='free' | IN_PROGRESS='in_progress' | COMPLETE='complete';
		public EnumRule getRule() { return rule; }
		
		//FREE='free' | IN_PROGRESS='in_progress' | COMPLETE='complete'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FREE='free'
		public EnumLiteralDeclaration getFREEEnumLiteralDeclaration_0() { return cFREEEnumLiteralDeclaration_0; }
		
		//'free'
		public Keyword getFREEFreeKeyword_0_0() { return cFREEFreeKeyword_0_0; }
		
		//IN_PROGRESS='in_progress'
		public EnumLiteralDeclaration getIN_PROGRESSEnumLiteralDeclaration_1() { return cIN_PROGRESSEnumLiteralDeclaration_1; }
		
		//'in_progress'
		public Keyword getIN_PROGRESSIn_progressKeyword_1_0() { return cIN_PROGRESSIn_progressKeyword_1_0; }
		
		//COMPLETE='complete'
		public EnumLiteralDeclaration getCOMPLETEEnumLiteralDeclaration_2() { return cCOMPLETEEnumLiteralDeclaration_2; }
		
		//'complete'
		public Keyword getCOMPLETECompleteKeyword_2_0() { return cCOMPLETECompleteKeyword_2_0; }
	}
	public class DISK_STATES_SElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DISK_STATES_S");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFULLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFULLFullKeyword_0_0 = (Keyword)cFULLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEMPTYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEMPTYEmptyKeyword_1_0 = (Keyword)cEMPTYEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DISK_STATES_S:
		//    FULL='full' | EMPTY='empty';
		public EnumRule getRule() { return rule; }
		
		//FULL='full' | EMPTY='empty'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FULL='full'
		public EnumLiteralDeclaration getFULLEnumLiteralDeclaration_0() { return cFULLEnumLiteralDeclaration_0; }
		
		//'full'
		public Keyword getFULLFullKeyword_0_0() { return cFULLFullKeyword_0_0; }
		
		//EMPTY='empty'
		public EnumLiteralDeclaration getEMPTYEnumLiteralDeclaration_1() { return cEMPTYEnumLiteralDeclaration_1; }
		
		//'empty'
		public Keyword getEMPTYEmptyKeyword_1_0() { return cEMPTYEmptyKeyword_1_0; }
	}
	public class TIME_UNIT_SElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.TIME_UNIT_S");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSECONDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSECONDSKeyword_0_0 = (Keyword)cSECONDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUTEMKeyword_1_0 = (Keyword)cMINUTEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHOUREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHOURHKeyword_2_0 = (Keyword)cHOUREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TIME_UNIT_S:
		//    SECOND='s' | MINUTE='m' | HOUR='h';
		public EnumRule getRule() { return rule; }
		
		//SECOND='s' | MINUTE='m' | HOUR='h'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SECOND='s'
		public EnumLiteralDeclaration getSECONDEnumLiteralDeclaration_0() { return cSECONDEnumLiteralDeclaration_0; }
		
		//'s'
		public Keyword getSECONDSKeyword_0_0() { return cSECONDSKeyword_0_0; }
		
		//MINUTE='m'
		public EnumLiteralDeclaration getMINUTEEnumLiteralDeclaration_1() { return cMINUTEEnumLiteralDeclaration_1; }
		
		//'m'
		public Keyword getMINUTEMKeyword_1_0() { return cMINUTEMKeyword_1_0; }
		
		//HOUR='h'
		public EnumLiteralDeclaration getHOUREnumLiteralDeclaration_2() { return cHOUREnumLiteralDeclaration_2; }
		
		//'h'
		public Keyword getHOURHKeyword_2_0() { return cHOURHKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final DSLProgramElements pDSLProgram;
	private final DSLLongElements pDSLLong;
	private final DSLShortElements pDSLShort;
	private final ConfigurationSElements pConfigurationS;
	private final DeviceSElements pDeviceS;
	private final CraneSElements pCraneS;
	private final CraneZoneSElements pCraneZoneS;
	private final DiskSElements pDiskS;
	private final DiskZoneSElements pDiskZoneS;
	private final CameraSElements pCameraS;
	private final CameraColorSElements pCameraColorS;
	private final LoggingSElements pLoggingS;
	private final DiskHandlingSElements pDiskHandlingS;
	private final StatementSElements pStatementS;
	private final LoopSElements pLoopS;
	private final LoopVariableSElements pLoopVariableS;
	private final LoopSlotSElements pLoopSlotS;
	private final MoveSElements pMoveS;
	private final MoveDiskSElements pMoveDiskS;
	private final MoveAnySlotSElements pMoveAnySlotS;
	private final MoveCraneSElements pMoveCraneS;
	private final CraneActionSElements pCraneActionS;
	private final ConditionSElements pConditionS;
	private final ConditionVariableSElements pConditionVariableS;
	private final ConditionSlotSElements pConditionSlotS;
	private final ConditionDeviceSElements pConditionDeviceS;
	private final MarkSElements pMarkS;
	private final MarkVariableValueSElements pMarkVariableValueS;
	private final MarkCameraValueSElements pMarkCameraValueS;
	private final VariableSElements pVariableS;
	private final OrdinaryVariableSElements pOrdinaryVariableS;
	private final SlotVariableSElements pSlotVariableS;
	private final VariableValueSElements pVariableValueS;
	private final DeviceValueSElements pDeviceValueS;
	private final ValueSlotSElements pValueSlotS;
	private final DSLTypeValueElements pDSLTypeValue;
	private final DiskStateValueSElements pDiskStateValueS;
	private final DiskSlotStateValueSElements pDiskSlotStateValueS;
	private final ColorValueSElements pColorValueS;
	private final NumberSElements pNumberS;
	private final DSL_TYPE_ENUMElements eDSL_TYPE_ENUM;
	private final COMPARISON_OPERATOR_SElements eCOMPARISON_OPERATOR_S;
	private final COLOR_SElements eCOLOR_S;
	private final DISK_SLOT_STATES_SElements eDISK_SLOT_STATES_S;
	private final DISK_STATES_SElements eDISK_STATES_S;
	private final TIME_UNIT_SElements eTIME_UNIT_S;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ShortDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDSLProgram = new DSLProgramElements();
		this.pDSLLong = new DSLLongElements();
		this.pDSLShort = new DSLShortElements();
		this.pConfigurationS = new ConfigurationSElements();
		this.pDeviceS = new DeviceSElements();
		this.pCraneS = new CraneSElements();
		this.pCraneZoneS = new CraneZoneSElements();
		this.pDiskS = new DiskSElements();
		this.pDiskZoneS = new DiskZoneSElements();
		this.pCameraS = new CameraSElements();
		this.pCameraColorS = new CameraColorSElements();
		this.pLoggingS = new LoggingSElements();
		this.pDiskHandlingS = new DiskHandlingSElements();
		this.pStatementS = new StatementSElements();
		this.pLoopS = new LoopSElements();
		this.pLoopVariableS = new LoopVariableSElements();
		this.pLoopSlotS = new LoopSlotSElements();
		this.pMoveS = new MoveSElements();
		this.pMoveDiskS = new MoveDiskSElements();
		this.pMoveAnySlotS = new MoveAnySlotSElements();
		this.pMoveCraneS = new MoveCraneSElements();
		this.pCraneActionS = new CraneActionSElements();
		this.pConditionS = new ConditionSElements();
		this.pConditionVariableS = new ConditionVariableSElements();
		this.pConditionSlotS = new ConditionSlotSElements();
		this.pConditionDeviceS = new ConditionDeviceSElements();
		this.pMarkS = new MarkSElements();
		this.pMarkVariableValueS = new MarkVariableValueSElements();
		this.pMarkCameraValueS = new MarkCameraValueSElements();
		this.pVariableS = new VariableSElements();
		this.pOrdinaryVariableS = new OrdinaryVariableSElements();
		this.pSlotVariableS = new SlotVariableSElements();
		this.pVariableValueS = new VariableValueSElements();
		this.pDeviceValueS = new DeviceValueSElements();
		this.pValueSlotS = new ValueSlotSElements();
		this.pDSLTypeValue = new DSLTypeValueElements();
		this.pDiskStateValueS = new DiskStateValueSElements();
		this.pDiskSlotStateValueS = new DiskSlotStateValueSElements();
		this.pColorValueS = new ColorValueSElements();
		this.pNumberS = new NumberSElements();
		this.eDSL_TYPE_ENUM = new DSL_TYPE_ENUMElements();
		this.eCOMPARISON_OPERATOR_S = new COMPARISON_OPERATOR_SElements();
		this.eCOLOR_S = new COLOR_SElements();
		this.eDISK_SLOT_STATES_S = new DISK_SLOT_STATES_SElements();
		this.eDISK_STATES_S = new DISK_STATES_SElements();
		this.eTIME_UNIT_S = new TIME_UNIT_SElements();
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.factoryLang.shortDSL.ShortDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    'use' dslType=DSLTypeValue 'dsl' dslProgram=DSLProgram;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//DSLProgram:
	//    DSLLong | DSLShort;
	public DSLProgramElements getDSLProgramAccess() {
		return pDSLProgram;
	}
	
	public ParserRule getDSLProgramRule() {
		return getDSLProgramAccess().getRule();
	}
	
	//DSLLong returns DSLProgram:
	//    {DSLLong} 'test' name=ID;
	public DSLLongElements getDSLLongAccess() {
		return pDSLLong;
	}
	
	public ParserRule getDSLLongRule() {
		return getDSLLongAccess().getRule();
	}
	
	//// -------------------- INDIVIDUAL DSL - EASY TO WRITE, "HARDER" TO READ -------------------- //
	//DSLShort returns DSLProgram:
	//    {DSLShort} configuration=ConfigurationS diskHandlings+=DiskHandlingS*;
	public DSLShortElements getDSLShortAccess() {
		return pDSLShort;
	}
	
	public ParserRule getDSLShortRule() {
		return getDSLShortAccess().getRule();
	}
	
	//// ----- CONFIGURAITON ----- //
	//ConfigurationS:
	//    'devices' '{' BEGIN devices+=DeviceS+ END '}';
	public ConfigurationSElements getConfigurationSAccess() {
		return pConfigurationS;
	}
	
	public ParserRule getConfigurationSRule() {
		return getConfigurationSAccess().getRule();
	}
	
	//DeviceS:
	//    CraneS | DiskS | CameraS;
	public DeviceSElements getDeviceSAccess() {
		return pDeviceS;
	}
	
	public ParserRule getDeviceSRule() {
		return getDeviceSAccess().getRule();
	}
	
	//CraneS returns DeviceS:
	//    {Crane} name=ID (logging=LoggingS)? ':' BEGIN targets+=CraneZoneS+ END;
	public CraneSElements getCraneSAccess() {
		return pCraneS;
	}
	
	public ParserRule getCraneSRule() {
		return getCraneSAccess().getRule();
	}
	
	//CraneZoneS returns ConfigurationValueS:
	//    {CraneZone} name=ID ':' zoneValue=INT (',')?;
	public CraneZoneSElements getCraneZoneSAccess() {
		return pCraneZoneS;
	}
	
	public ParserRule getCraneZoneSRule() {
		return getCraneZoneSAccess().getRule();
	}
	
	//DiskS returns DeviceS:
	//    {Disk} name=ID '(' nSlots=INT ')' (logging=LoggingS)? ':' BEGIN targets+=DiskZoneS+ END;
	public DiskSElements getDiskSAccess() {
		return pDiskS;
	}
	
	public ParserRule getDiskSRule() {
		return getDiskSAccess().getRule();
	}
	
	//DiskZoneS returns ConfigurationValueS:
	//    {DiskZone} name=ID ':' slot=INT (',')?;
	public DiskZoneSElements getDiskZoneSAccess() {
		return pDiskZoneS;
	}
	
	public ParserRule getDiskZoneSRule() {
		return getDiskZoneSAccess().getRule();
	}
	
	//CameraS returns DeviceS:
	//    {Camera} name=ID (logging=LoggingS)? ':' BEGIN targets+=CameraColorS+ END;
	public CameraSElements getCameraSAccess() {
		return pCameraS;
	}
	
	public ParserRule getCameraSRule() {
		return getCameraSAccess().getRule();
	}
	
	//CameraColorS returns ConfigurationValueS:
	//    {CameraColor} color=COLOR_S (',')?;
	public CameraColorSElements getCameraColorSAccess() {
		return pCameraColorS;
	}
	
	public ParserRule getCameraColorSRule() {
		return getCameraColorSAccess().getRule();
	}
	
	//// ----- LOGGING ----- //
	//LoggingS:
	//    {Logging} 'logging';
	public LoggingSElements getLoggingSAccess() {
		return pLoggingS;
	}
	
	public ParserRule getLoggingSRule() {
		return getLoggingSAccess().getRule();
	}
	
	//// ----- DISK HANDLING ----- //
	//DiskHandlingS:
	//    'handle' disk=[Disk] '{' BEGIN statements+=StatementS+ END '}';
	public DiskHandlingSElements getDiskHandlingSAccess() {
		return pDiskHandlingS;
	}
	
	public ParserRule getDiskHandlingSRule() {
		return getDiskHandlingSAccess().getRule();
	}
	
	//StatementS:
	//    LoopS | MoveS | CraneActionS | ConditionS | MarkS;
	public StatementSElements getStatementSAccess() {
		return pStatementS;
	}
	
	public ParserRule getStatementSRule() {
		return getStatementSAccess().getRule();
	}
	
	//LoopS returns StatementS:
	//    LoopVariableS | LoopSlotS;
	public LoopSElements getLoopSAccess() {
		return pLoopS;
	}
	
	public ParserRule getLoopSRule() {
		return getLoopSAccess().getRule();
	}
	
	//LoopVariableS returns StatementS:
	//    {LoopVariable} 'foreach' 'var' ordinaryVariable=OrdinaryVariableS
	//    comparisonOperator=COMPARISON_OPERATOR_S slotState=DiskSlotStateValueS
	//    ':' BEGIN statements+=StatementS* END;
	public LoopVariableSElements getLoopVariableSAccess() {
		return pLoopVariableS;
	}
	
	public ParserRule getLoopVariableSRule() {
		return getLoopVariableSAccess().getRule();
	}
	
	//LoopSlotS returns StatementS:
	//    {LoopSlot} 'foreach' 'slot' slotVariable=SlotVariableS
	//    comparisonOperator=COMPARISON_OPERATOR_S slotState=DiskSlotStateValueS
	//    ':' BEGIN statements+=StatementS* END;
	public LoopSlotSElements getLoopSlotSAccess() {
		return pLoopSlotS;
	}
	
	public ParserRule getLoopSlotSRule() {
		return getLoopSlotSAccess().getRule();
	}
	
	//MoveS returns StatementS:
	//    MoveDiskS | MoveAnySlotS | MoveCraneS;
	public MoveSElements getMoveSAccess() {
		return pMoveS;
	}
	
	public ParserRule getMoveSRule() {
		return getMoveSAccess().getRule();
	}
	
	//MoveDiskS returns MoveS:
	//    {MoveDisk} slot=[SlotVariable] ('->' | '-->') zone=[DiskZone];
	public MoveDiskSElements getMoveDiskSAccess() {
		return pMoveDiskS;
	}
	
	public ParserRule getMoveDiskSRule() {
		return getMoveDiskSAccess().getRule();
	}
	
	//MoveAnySlotS returns MoveS:
	//    {MoveAnySlot} state=DiskSlotStateValueS anySlot=SlotVariableS ('->' | '-->') zone=[DiskZone];
	public MoveAnySlotSElements getMoveAnySlotSAccess() {
		return pMoveAnySlotS;
	}
	
	public ParserRule getMoveAnySlotSRule() {
		return getMoveAnySlotSAccess().getRule();
	}
	
	//MoveCraneS returns MoveS:
	//    {MoveCrane} crane=[Crane] action=CraneActionS ('->' | '-->') zone=[CraneZone];
	public MoveCraneSElements getMoveCraneSAccess() {
		return pMoveCraneS;
	}
	
	public ParserRule getMoveCraneSRule() {
		return getMoveCraneSAccess().getRule();
	}
	
	//CraneActionS:
	//    {CraneAction} ('pickup' | 'drop');
	public CraneActionSElements getCraneActionSAccess() {
		return pCraneActionS;
	}
	
	public ParserRule getCraneActionSRule() {
		return getCraneActionSAccess().getRule();
	}
	
	//ConditionS returns StatementS:
	//    ConditionVariableS | ConditionDeviceS | ConditionSlotS;
	public ConditionSElements getConditionSAccess() {
		return pConditionS;
	}
	
	public ParserRule getConditionSRule() {
		return getConditionSAccess().getRule();
	}
	
	//ConditionVariableS returns ConditionS:
	//    {ConditionVariable} 'if' 'var' variable=[OrdinaryVariable]
	//    comparisonOperator=COMPARISON_OPERATOR_S variableValue=VariableValueS
	//    ':' BEGIN statements+=StatementS* END;
	public ConditionVariableSElements getConditionVariableSAccess() {
		return pConditionVariableS;
	}
	
	public ParserRule getConditionVariableSRule() {
		return getConditionVariableSAccess().getRule();
	}
	
	//ConditionSlotS returns ConditionS:
	//    {ConditionSlot} 'if' 'slot' variable=[SlotVariable]
	//    comparisonOperator=COMPARISON_OPERATOR_S slotValue=ValueSlotS
	//    ':' BEGIN statements+=StatementS* END;
	public ConditionSlotSElements getConditionSlotSAccess() {
		return pConditionSlotS;
	}
	
	public ParserRule getConditionSlotSRule() {
		return getConditionSlotSAccess().getRule();
	}
	
	//ConditionDeviceS returns ConditionS:
	//    {ConditionDevice} 'if' 'dev' device=[DeviceS]
	//    comparisonOperator=COMPARISON_OPERATOR_S deviceValue=DeviceValueS
	//    ':' BEGIN statements+=StatementS* END;
	public ConditionDeviceSElements getConditionDeviceSAccess() {
		return pConditionDeviceS;
	}
	
	public ParserRule getConditionDeviceSRule() {
		return getConditionDeviceSAccess().getRule();
	}
	
	//MarkS returns StatementS:
	//    MarkVariableValueS | MarkCameraValueS;
	public MarkSElements getMarkSAccess() {
		return pMarkS;
	}
	
	public ParserRule getMarkSRule() {
		return getMarkSAccess().getRule();
	}
	
	//MarkVariableValueS returns MarkS:
	//    {MarkVariableValue} variable=[VariableS] '(' value=ValueSlotS (',' time=INT unit=TIME_UNIT_S)? ')';
	public MarkVariableValueSElements getMarkVariableValueSAccess() {
		return pMarkVariableValueS;
	}
	
	public ParserRule getMarkVariableValueSRule() {
		return getMarkVariableValueSAccess().getRule();
	}
	
	//MarkCameraValueS returns MarkS:
	//    {MarkCameraValue} camera=[Camera] 'scan' variable=OrdinaryVariableS;
	public MarkCameraValueSElements getMarkCameraValueSAccess() {
		return pMarkCameraValueS;
	}
	
	public ParserRule getMarkCameraValueSRule() {
		return getMarkCameraValueSAccess().getRule();
	}
	
	//// ----- VALUE TYPES ----- //
	//VariableS:
	//    OrdinaryVariableS | SlotVariableS;
	public VariableSElements getVariableSAccess() {
		return pVariableS;
	}
	
	public ParserRule getVariableSRule() {
		return getVariableSAccess().getRule();
	}
	
	// //| GlobalVariableS;
	//OrdinaryVariableS returns VariableS:
	//    {OrdinaryVariable} name=ID;
	public OrdinaryVariableSElements getOrdinaryVariableSAccess() {
		return pOrdinaryVariableS;
	}
	
	public ParserRule getOrdinaryVariableSRule() {
		return getOrdinaryVariableSAccess().getRule();
	}
	
	//SlotVariableS returns VariableS:
	//    {SlotVariable} name=ID;
	public SlotVariableSElements getSlotVariableSAccess() {
		return pSlotVariableS;
	}
	
	public ParserRule getSlotVariableSRule() {
		return getSlotVariableSAccess().getRule();
	}
	
	///*GlobalVariableS returns VariableS:
	//    {GlobalVariable} name=ID;*/
	//VariableValueS:
	//    value=DiskSlotStateValueS | value=ColorValueS | value=NumberS | value=DiskStateValueS | ref=[VariableS];
	public VariableValueSElements getVariableValueSAccess() {
		return pVariableValueS;
	}
	
	public ParserRule getVariableValueSRule() {
		return getVariableValueSAccess().getRule();
	}
	
	//DeviceValueS:
	//    value=DiskStateValueS | value=ColorValueS | configurationValue=[ConfigurationValueS];
	public DeviceValueSElements getDeviceValueSAccess() {
		return pDeviceValueS;
	}
	
	public ParserRule getDeviceValueSRule() {
		return getDeviceValueSAccess().getRule();
	}
	
	//ValueSlotS:
	//    value=DiskSlotStateValueS | value=ColorValueS;
	public ValueSlotSElements getValueSlotSAccess() {
		return pValueSlotS;
	}
	
	public ParserRule getValueSlotSRule() {
		return getValueSlotSAccess().getRule();
	}
	
	//// ----- VALUE TYPES:ACTUAL VALUES ----- //
	//DSLTypeValue:
	//    value=DSL_TYPE_ENUM;
	public DSLTypeValueElements getDSLTypeValueAccess() {
		return pDSLTypeValue;
	}
	
	public ParserRule getDSLTypeValueRule() {
		return getDSLTypeValueAccess().getRule();
	}
	
	//DiskStateValueS:
	//    value=DISK_STATES_S;
	public DiskStateValueSElements getDiskStateValueSAccess() {
		return pDiskStateValueS;
	}
	
	public ParserRule getDiskStateValueSRule() {
		return getDiskStateValueSAccess().getRule();
	}
	
	//DiskSlotStateValueS:
	//    value=DISK_SLOT_STATES_S;
	public DiskSlotStateValueSElements getDiskSlotStateValueSAccess() {
		return pDiskSlotStateValueS;
	}
	
	public ParserRule getDiskSlotStateValueSRule() {
		return getDiskSlotStateValueSAccess().getRule();
	}
	
	//ColorValueS:
	//    value=COLOR_S;
	public ColorValueSElements getColorValueSAccess() {
		return pColorValueS;
	}
	
	public ParserRule getColorValueSRule() {
		return getColorValueSAccess().getRule();
	}
	
	//NumberS:
	//    value=INT;
	public NumberSElements getNumberSAccess() {
		return pNumberS;
	}
	
	public ParserRule getNumberSRule() {
		return getNumberSAccess().getRule();
	}
	
	//// ----- TERMINALS ----- //
	//enum DSL_TYPE_ENUM:
	//    LONG='long' | SHORT='short';
	public DSL_TYPE_ENUMElements getDSL_TYPE_ENUMAccess() {
		return eDSL_TYPE_ENUM;
	}
	
	public EnumRule getDSL_TYPE_ENUMRule() {
		return getDSL_TYPE_ENUMAccess().getRule();
	}
	
	//enum COMPARISON_OPERATOR_S:
	//    EQUAL='=' | LESS_THAN='<' | GREATER_THAN='>' | NOT='!=';
	public COMPARISON_OPERATOR_SElements getCOMPARISON_OPERATOR_SAccess() {
		return eCOMPARISON_OPERATOR_S;
	}
	
	public EnumRule getCOMPARISON_OPERATOR_SRule() {
		return getCOMPARISON_OPERATOR_SAccess().getRule();
	}
	
	//enum COLOR_S:
	//    RED='red' | GREEN='green' | BLUE='blue';
	public COLOR_SElements getCOLOR_SAccess() {
		return eCOLOR_S;
	}
	
	public EnumRule getCOLOR_SRule() {
		return getCOLOR_SAccess().getRule();
	}
	
	//enum DISK_SLOT_STATES_S:
	//    FREE='free' | IN_PROGRESS='in_progress' | COMPLETE='complete';
	public DISK_SLOT_STATES_SElements getDISK_SLOT_STATES_SAccess() {
		return eDISK_SLOT_STATES_S;
	}
	
	public EnumRule getDISK_SLOT_STATES_SRule() {
		return getDISK_SLOT_STATES_SAccess().getRule();
	}
	
	//enum DISK_STATES_S:
	//    FULL='full' | EMPTY='empty';
	public DISK_STATES_SElements getDISK_STATES_SAccess() {
		return eDISK_STATES_S;
	}
	
	public EnumRule getDISK_STATES_SRule() {
		return getDISK_STATES_SAccess().getRule();
	}
	
	//enum TIME_UNIT_S:
	//    SECOND='s' | MINUTE='m' | HOUR='h';
	public TIME_UNIT_SElements getTIME_UNIT_SAccess() {
		return eTIME_UNIT_S;
	}
	
	public EnumRule getTIME_UNIT_SRule() {
		return getTIME_UNIT_SAccess().getRule();
	}
	
	//terminal BEGIN:
	//    'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END:
	//    'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
