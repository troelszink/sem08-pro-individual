/*
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ShortDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDslKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDSL_ShortParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Model:
		//    'use' 'dsl' type=DSL_Short;
		@Override public ParserRule getRule() { return rule; }
		
		//'use' 'dsl' type=DSL_Short
		public Group getGroup() { return cGroup; }
		
		//'use'
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }
		
		//'dsl'
		public Keyword getDslKeyword_1() { return cDslKeyword_1; }
		
		//type=DSL_Short
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DSL_Short
		public RuleCall getTypeDSL_ShortParserRuleCall_2_0() { return cTypeDSL_ShortParserRuleCall_2_0; }
	}
	public class DSL_ShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DSL_Short");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDSLShortAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cConfigurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfigurationConfiguration_ShortParserRuleCall_1_0 = (RuleCall)cConfigurationAssignment_1.eContents().get(0);
		private final Assignment cDeviceHandlingsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeviceHandlingsDeviceHandling_ShortParserRuleCall_2_0 = (RuleCall)cDeviceHandlingsAssignment_2.eContents().get(0);
		
		//// -------------------- INDIVIDUAL DSL - EASY TO WRITE, "HARDER" TO READ -------------------- //
		//DSL_Short returns DSLType:
		//    {DSLShort} configuration=Configuration_Short deviceHandlings+=DeviceHandling_Short;
		@Override public ParserRule getRule() { return rule; }
		
		//{DSLShort} configuration=Configuration_Short deviceHandlings+=DeviceHandling_Short
		public Group getGroup() { return cGroup; }
		
		//{DSLShort}
		public Action getDSLShortAction_0() { return cDSLShortAction_0; }
		
		//configuration=Configuration_Short
		public Assignment getConfigurationAssignment_1() { return cConfigurationAssignment_1; }
		
		//Configuration_Short
		public RuleCall getConfigurationConfiguration_ShortParserRuleCall_1_0() { return cConfigurationConfiguration_ShortParserRuleCall_1_0; }
		
		//deviceHandlings+=DeviceHandling_Short
		public Assignment getDeviceHandlingsAssignment_2() { return cDeviceHandlingsAssignment_2; }
		
		//DeviceHandling_Short
		public RuleCall getDeviceHandlingsDeviceHandling_ShortParserRuleCall_2_0() { return cDeviceHandlingsDeviceHandling_ShortParserRuleCall_2_0; }
	}
	public class Configuration_ShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.Configuration_Short");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDevicesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cDevicesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDevicesDevice_ShortParserRuleCall_3_0 = (RuleCall)cDevicesAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// ----- CONFIGURAITON ----- //
		//Configuration_Short:
		//    'devices' '{' BEGIN devices+=Device_Short+ END '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'devices' '{' BEGIN devices+=Device_Short+ END '}'
		public Group getGroup() { return cGroup; }
		
		//'devices'
		public Keyword getDevicesKeyword_0() { return cDevicesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//devices+=Device_Short+
		public Assignment getDevicesAssignment_3() { return cDevicesAssignment_3; }
		
		//Device_Short
		public RuleCall getDevicesDevice_ShortParserRuleCall_3_0() { return cDevicesDevice_ShortParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class Device_ShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.Device_Short");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCrane_ShortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDisk_ShortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCamera_ShortParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Device_Short:
		//    Crane_Short | Disk_Short | Camera_Short
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Crane_Short | Disk_Short | Camera_Short
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Crane_Short
		public RuleCall getCrane_ShortParserRuleCall_0() { return cCrane_ShortParserRuleCall_0; }
		
		//Disk_Short
		public RuleCall getDisk_ShortParserRuleCall_1() { return cDisk_ShortParserRuleCall_1; }
		
		//Camera_Short
		public RuleCall getCamera_ShortParserRuleCall_2() { return cCamera_ShortParserRuleCall_2; }
	}
	public class Crane_ShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.Crane_Short");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cPositionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPositionsCranePosition_ShortParserRuleCall_3_0 = (RuleCall)cPositionsAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Crane_Short:
		//    name=ID ':' BEGIN positions+=CranePosition_Short+ END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' BEGIN positions+=CranePosition_Short+ END
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//positions+=CranePosition_Short+
		public Assignment getPositionsAssignment_3() { return cPositionsAssignment_3; }
		
		//CranePosition_Short
		public RuleCall getPositionsCranePosition_ShortParserRuleCall_3_0() { return cPositionsCranePosition_ShortParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class CranePosition_ShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.CranePosition_Short");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPositionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPositionINTTerminalRuleCall_2_0 = (RuleCall)cPositionAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CranePosition_Short:
		//    name=ID ':' position=INT (',')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' position=INT (',')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//position=INT
		public Assignment getPositionAssignment_2() { return cPositionAssignment_2; }
		
		//INT
		public RuleCall getPositionINTTerminalRuleCall_2_0() { return cPositionINTTerminalRuleCall_2_0; }
		
		//(',')?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}
	public class Disk_ShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.Disk_Short");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNSlotsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNSlotsINTTerminalRuleCall_2_0 = (RuleCall)cNSlotsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cBEGINTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cZonesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cZonesDiskZone_ShortParserRuleCall_6_0 = (RuleCall)cZonesAssignment_6.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//Disk_Short:
		//    name=ID '(' nSlots=INT ')' ':' BEGIN zones+=DiskZone_Short+ END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' nSlots=INT ')' ':' BEGIN zones+=DiskZone_Short+ END
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//nSlots=INT
		public Assignment getNSlotsAssignment_2() { return cNSlotsAssignment_2; }
		
		//INT
		public RuleCall getNSlotsINTTerminalRuleCall_2_0() { return cNSlotsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_5() { return cBEGINTerminalRuleCall_5; }
		
		//zones+=DiskZone_Short+
		public Assignment getZonesAssignment_6() { return cZonesAssignment_6; }
		
		//DiskZone_Short
		public RuleCall getZonesDiskZone_ShortParserRuleCall_6_0() { return cZonesDiskZone_ShortParserRuleCall_6_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_7() { return cENDTerminalRuleCall_7; }
	}
	public class DiskZone_ShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DiskZone_Short");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSlotAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSlotINTTerminalRuleCall_2_0 = (RuleCall)cSlotAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DiskZone_Short:
		//    name=ID ':' slot=INT (',')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' slot=INT (',')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//slot=INT
		public Assignment getSlotAssignment_2() { return cSlotAssignment_2; }
		
		//INT
		public RuleCall getSlotINTTerminalRuleCall_2_0() { return cSlotINTTerminalRuleCall_2_0; }
		
		//(',')?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}
	public class Camera_ShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.Camera_Short");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cColorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColorsCameraColor_ShortParserRuleCall_3_0 = (RuleCall)cColorsAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Camera_Short:
		//    name=ID ':' BEGIN colors+=CameraColor_Short+ END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' BEGIN colors+=CameraColor_Short+ END
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//colors+=CameraColor_Short+
		public Assignment getColorsAssignment_3() { return cColorsAssignment_3; }
		
		//CameraColor_Short
		public RuleCall getColorsCameraColor_ShortParserRuleCall_3_0() { return cColorsCameraColor_ShortParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class CameraColor_ShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.CameraColor_Short");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CameraColor_Short:
		//    name=ID (',')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (',')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(',')?
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}
	public class DeviceHandling_ShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.DeviceHandling_Short");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// ----- DEVICE HANDLING ----- //
		//DeviceHandling_Short:
		//    'test' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'test' name=ID
		public Group getGroup() { return cGroup; }
		
		//'test'
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final DSL_ShortElements pDSL_Short;
	private final Configuration_ShortElements pConfiguration_Short;
	private final Device_ShortElements pDevice_Short;
	private final Crane_ShortElements pCrane_Short;
	private final CranePosition_ShortElements pCranePosition_Short;
	private final Disk_ShortElements pDisk_Short;
	private final DiskZone_ShortElements pDiskZone_Short;
	private final Camera_ShortElements pCamera_Short;
	private final CameraColor_ShortElements pCameraColor_Short;
	private final DeviceHandling_ShortElements pDeviceHandling_Short;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ShortDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDSL_Short = new DSL_ShortElements();
		this.pConfiguration_Short = new Configuration_ShortElements();
		this.pDevice_Short = new Device_ShortElements();
		this.pCrane_Short = new Crane_ShortElements();
		this.pCranePosition_Short = new CranePosition_ShortElements();
		this.pDisk_Short = new Disk_ShortElements();
		this.pDiskZone_Short = new DiskZone_ShortElements();
		this.pCamera_Short = new Camera_ShortElements();
		this.pCameraColor_Short = new CameraColor_ShortElements();
		this.pDeviceHandling_Short = new DeviceHandling_ShortElements();
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.shortDSL.ShortDSL.END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.factoryLang.shortDSL.ShortDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    'use' 'dsl' type=DSL_Short;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//// -------------------- INDIVIDUAL DSL - EASY TO WRITE, "HARDER" TO READ -------------------- //
	//DSL_Short returns DSLType:
	//    {DSLShort} configuration=Configuration_Short deviceHandlings+=DeviceHandling_Short;
	public DSL_ShortElements getDSL_ShortAccess() {
		return pDSL_Short;
	}
	
	public ParserRule getDSL_ShortRule() {
		return getDSL_ShortAccess().getRule();
	}
	
	//// ----- CONFIGURAITON ----- //
	//Configuration_Short:
	//    'devices' '{' BEGIN devices+=Device_Short+ END '}'
	//;
	public Configuration_ShortElements getConfiguration_ShortAccess() {
		return pConfiguration_Short;
	}
	
	public ParserRule getConfiguration_ShortRule() {
		return getConfiguration_ShortAccess().getRule();
	}
	
	//Device_Short:
	//    Crane_Short | Disk_Short | Camera_Short
	//;
	public Device_ShortElements getDevice_ShortAccess() {
		return pDevice_Short;
	}
	
	public ParserRule getDevice_ShortRule() {
		return getDevice_ShortAccess().getRule();
	}
	
	//Crane_Short:
	//    name=ID ':' BEGIN positions+=CranePosition_Short+ END
	//;
	public Crane_ShortElements getCrane_ShortAccess() {
		return pCrane_Short;
	}
	
	public ParserRule getCrane_ShortRule() {
		return getCrane_ShortAccess().getRule();
	}
	
	//CranePosition_Short:
	//    name=ID ':' position=INT (',')?
	//;
	public CranePosition_ShortElements getCranePosition_ShortAccess() {
		return pCranePosition_Short;
	}
	
	public ParserRule getCranePosition_ShortRule() {
		return getCranePosition_ShortAccess().getRule();
	}
	
	//Disk_Short:
	//    name=ID '(' nSlots=INT ')' ':' BEGIN zones+=DiskZone_Short+ END
	//;
	public Disk_ShortElements getDisk_ShortAccess() {
		return pDisk_Short;
	}
	
	public ParserRule getDisk_ShortRule() {
		return getDisk_ShortAccess().getRule();
	}
	
	//DiskZone_Short:
	//    name=ID ':' slot=INT (',')?
	//;
	public DiskZone_ShortElements getDiskZone_ShortAccess() {
		return pDiskZone_Short;
	}
	
	public ParserRule getDiskZone_ShortRule() {
		return getDiskZone_ShortAccess().getRule();
	}
	
	//Camera_Short:
	//    name=ID ':' BEGIN colors+=CameraColor_Short+ END
	//;
	public Camera_ShortElements getCamera_ShortAccess() {
		return pCamera_Short;
	}
	
	public ParserRule getCamera_ShortRule() {
		return getCamera_ShortAccess().getRule();
	}
	
	//CameraColor_Short:
	//    name=ID (',')?
	//;
	public CameraColor_ShortElements getCameraColor_ShortAccess() {
		return pCameraColor_Short;
	}
	
	public ParserRule getCameraColor_ShortRule() {
		return getCameraColor_ShortAccess().getRule();
	}
	
	//// ----- DEVICE HANDLING ----- //
	//DeviceHandling_Short:
	//    'test' name=ID
	//;
	public DeviceHandling_ShortElements getDeviceHandling_ShortAccess() {
		return pDeviceHandling_Short;
	}
	
	public ParserRule getDeviceHandling_ShortRule() {
		return getDeviceHandling_ShortAccess().getRule();
	}
	
	//// ----- TERMINALS ----- //
	//terminal BEGIN:
	//    'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END:
	//    'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
