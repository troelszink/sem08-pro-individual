/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.shortDSL.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import xtext.factoryLang.shortDSL.shortDSL.COLOR_S;
import xtext.factoryLang.shortDSL.shortDSL.DISK_SLOT_STATES_S;
import xtext.factoryLang.shortDSL.shortDSL.DISK_STATES_S;
import xtext.factoryLang.shortDSL.shortDSL.ShortDSLPackage;
import xtext.factoryLang.shortDSL.shortDSL.Value;
import xtext.factoryLang.shortDSL.shortDSL.Variable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Value</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.ValueImpl#getValueDiskSlotState <em>Value Disk Slot State</em>}</li>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.ValueImpl#getValueDiskState <em>Value Disk State</em>}</li>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.ValueImpl#getValueColor <em>Value Color</em>}</li>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.ValueImpl#getValueInt <em>Value Int</em>}</li>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.ValueImpl#getVariable <em>Variable</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ValueImpl extends MinimalEObjectImpl.Container implements Value
{
  /**
   * The default value of the '{@link #getValueDiskSlotState() <em>Value Disk Slot State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueDiskSlotState()
   * @generated
   * @ordered
   */
  protected static final DISK_SLOT_STATES_S VALUE_DISK_SLOT_STATE_EDEFAULT = DISK_SLOT_STATES_S.FREE;

  /**
   * The cached value of the '{@link #getValueDiskSlotState() <em>Value Disk Slot State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueDiskSlotState()
   * @generated
   * @ordered
   */
  protected DISK_SLOT_STATES_S valueDiskSlotState = VALUE_DISK_SLOT_STATE_EDEFAULT;

  /**
   * The default value of the '{@link #getValueDiskState() <em>Value Disk State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueDiskState()
   * @generated
   * @ordered
   */
  protected static final DISK_STATES_S VALUE_DISK_STATE_EDEFAULT = DISK_STATES_S.FULL;

  /**
   * The cached value of the '{@link #getValueDiskState() <em>Value Disk State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueDiskState()
   * @generated
   * @ordered
   */
  protected DISK_STATES_S valueDiskState = VALUE_DISK_STATE_EDEFAULT;

  /**
   * The default value of the '{@link #getValueColor() <em>Value Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueColor()
   * @generated
   * @ordered
   */
  protected static final COLOR_S VALUE_COLOR_EDEFAULT = COLOR_S.RED;

  /**
   * The cached value of the '{@link #getValueColor() <em>Value Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueColor()
   * @generated
   * @ordered
   */
  protected COLOR_S valueColor = VALUE_COLOR_EDEFAULT;

  /**
   * The default value of the '{@link #getValueInt() <em>Value Int</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueInt()
   * @generated
   * @ordered
   */
  protected static final int VALUE_INT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getValueInt() <em>Value Int</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueInt()
   * @generated
   * @ordered
   */
  protected int valueInt = VALUE_INT_EDEFAULT;

  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected Variable variable;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ValueImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ShortDSLPackage.Literals.VALUE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DISK_SLOT_STATES_S getValueDiskSlotState()
  {
    return valueDiskSlotState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueDiskSlotState(DISK_SLOT_STATES_S newValueDiskSlotState)
  {
    DISK_SLOT_STATES_S oldValueDiskSlotState = valueDiskSlotState;
    valueDiskSlotState = newValueDiskSlotState == null ? VALUE_DISK_SLOT_STATE_EDEFAULT : newValueDiskSlotState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.VALUE__VALUE_DISK_SLOT_STATE, oldValueDiskSlotState, valueDiskSlotState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DISK_STATES_S getValueDiskState()
  {
    return valueDiskState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueDiskState(DISK_STATES_S newValueDiskState)
  {
    DISK_STATES_S oldValueDiskState = valueDiskState;
    valueDiskState = newValueDiskState == null ? VALUE_DISK_STATE_EDEFAULT : newValueDiskState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.VALUE__VALUE_DISK_STATE, oldValueDiskState, valueDiskState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public COLOR_S getValueColor()
  {
    return valueColor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueColor(COLOR_S newValueColor)
  {
    COLOR_S oldValueColor = valueColor;
    valueColor = newValueColor == null ? VALUE_COLOR_EDEFAULT : newValueColor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.VALUE__VALUE_COLOR, oldValueColor, valueColor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValueInt()
  {
    return valueInt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueInt(int newValueInt)
  {
    int oldValueInt = valueInt;
    valueInt = newValueInt;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.VALUE__VALUE_INT, oldValueInt, valueInt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getVariable()
  {
    if (variable != null && variable.eIsProxy())
    {
      InternalEObject oldVariable = (InternalEObject)variable;
      variable = (Variable)eResolveProxy(oldVariable);
      if (variable != oldVariable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ShortDSLPackage.VALUE__VARIABLE, oldVariable, variable));
      }
    }
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable basicGetVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(Variable newVariable)
  {
    Variable oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.VALUE__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ShortDSLPackage.VALUE__VALUE_DISK_SLOT_STATE:
        return getValueDiskSlotState();
      case ShortDSLPackage.VALUE__VALUE_DISK_STATE:
        return getValueDiskState();
      case ShortDSLPackage.VALUE__VALUE_COLOR:
        return getValueColor();
      case ShortDSLPackage.VALUE__VALUE_INT:
        return getValueInt();
      case ShortDSLPackage.VALUE__VARIABLE:
        if (resolve) return getVariable();
        return basicGetVariable();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ShortDSLPackage.VALUE__VALUE_DISK_SLOT_STATE:
        setValueDiskSlotState((DISK_SLOT_STATES_S)newValue);
        return;
      case ShortDSLPackage.VALUE__VALUE_DISK_STATE:
        setValueDiskState((DISK_STATES_S)newValue);
        return;
      case ShortDSLPackage.VALUE__VALUE_COLOR:
        setValueColor((COLOR_S)newValue);
        return;
      case ShortDSLPackage.VALUE__VALUE_INT:
        setValueInt((Integer)newValue);
        return;
      case ShortDSLPackage.VALUE__VARIABLE:
        setVariable((Variable)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.VALUE__VALUE_DISK_SLOT_STATE:
        setValueDiskSlotState(VALUE_DISK_SLOT_STATE_EDEFAULT);
        return;
      case ShortDSLPackage.VALUE__VALUE_DISK_STATE:
        setValueDiskState(VALUE_DISK_STATE_EDEFAULT);
        return;
      case ShortDSLPackage.VALUE__VALUE_COLOR:
        setValueColor(VALUE_COLOR_EDEFAULT);
        return;
      case ShortDSLPackage.VALUE__VALUE_INT:
        setValueInt(VALUE_INT_EDEFAULT);
        return;
      case ShortDSLPackage.VALUE__VARIABLE:
        setVariable((Variable)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.VALUE__VALUE_DISK_SLOT_STATE:
        return valueDiskSlotState != VALUE_DISK_SLOT_STATE_EDEFAULT;
      case ShortDSLPackage.VALUE__VALUE_DISK_STATE:
        return valueDiskState != VALUE_DISK_STATE_EDEFAULT;
      case ShortDSLPackage.VALUE__VALUE_COLOR:
        return valueColor != VALUE_COLOR_EDEFAULT;
      case ShortDSLPackage.VALUE__VALUE_INT:
        return valueInt != VALUE_INT_EDEFAULT;
      case ShortDSLPackage.VALUE__VARIABLE:
        return variable != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (valueDiskSlotState: ");
    result.append(valueDiskSlotState);
    result.append(", valueDiskState: ");
    result.append(valueDiskState);
    result.append(", valueColor: ");
    result.append(valueColor);
    result.append(", valueInt: ");
    result.append(valueInt);
    result.append(')');
    return result.toString();
  }

} //ValueImpl
