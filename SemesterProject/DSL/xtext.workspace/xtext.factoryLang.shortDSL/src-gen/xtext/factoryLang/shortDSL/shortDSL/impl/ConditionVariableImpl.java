/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.shortDSL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.factoryLang.shortDSL.shortDSL.COMPARISON_OPERATOR_S;
import xtext.factoryLang.shortDSL.shortDSL.ConditionVariable;
import xtext.factoryLang.shortDSL.shortDSL.ShortDSLPackage;
import xtext.factoryLang.shortDSL.shortDSL.VariableS;
import xtext.factoryLang.shortDSL.shortDSL.VariableValue;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Condition Variable</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.ConditionVariableImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.ConditionVariableImpl#getComparisonOperatorVariable <em>Comparison Operator Variable</em>}</li>
 *   <li>{@link xtext.factoryLang.shortDSL.shortDSL.impl.ConditionVariableImpl#getVariableValue <em>Variable Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionVariableImpl extends ConditionSImpl implements ConditionVariable
{
  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected VariableS variable;

  /**
   * The default value of the '{@link #getComparisonOperatorVariable() <em>Comparison Operator Variable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparisonOperatorVariable()
   * @generated
   * @ordered
   */
  protected static final COMPARISON_OPERATOR_S COMPARISON_OPERATOR_VARIABLE_EDEFAULT = COMPARISON_OPERATOR_S.EQUAL;

  /**
   * The cached value of the '{@link #getComparisonOperatorVariable() <em>Comparison Operator Variable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparisonOperatorVariable()
   * @generated
   * @ordered
   */
  protected COMPARISON_OPERATOR_S comparisonOperatorVariable = COMPARISON_OPERATOR_VARIABLE_EDEFAULT;

  /**
   * The cached value of the '{@link #getVariableValue() <em>Variable Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariableValue()
   * @generated
   * @ordered
   */
  protected VariableValue variableValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionVariableImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ShortDSLPackage.Literals.CONDITION_VARIABLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableS getVariable()
  {
    if (variable != null && variable.eIsProxy())
    {
      InternalEObject oldVariable = (InternalEObject)variable;
      variable = (VariableS)eResolveProxy(oldVariable);
      if (variable != oldVariable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ShortDSLPackage.CONDITION_VARIABLE__VARIABLE, oldVariable, variable));
      }
    }
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableS basicGetVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(VariableS newVariable)
  {
    VariableS oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.CONDITION_VARIABLE__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public COMPARISON_OPERATOR_S getComparisonOperatorVariable()
  {
    return comparisonOperatorVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComparisonOperatorVariable(COMPARISON_OPERATOR_S newComparisonOperatorVariable)
  {
    COMPARISON_OPERATOR_S oldComparisonOperatorVariable = comparisonOperatorVariable;
    comparisonOperatorVariable = newComparisonOperatorVariable == null ? COMPARISON_OPERATOR_VARIABLE_EDEFAULT : newComparisonOperatorVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.CONDITION_VARIABLE__COMPARISON_OPERATOR_VARIABLE, oldComparisonOperatorVariable, comparisonOperatorVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableValue getVariableValue()
  {
    return variableValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariableValue(VariableValue newVariableValue, NotificationChain msgs)
  {
    VariableValue oldVariableValue = variableValue;
    variableValue = newVariableValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ShortDSLPackage.CONDITION_VARIABLE__VARIABLE_VALUE, oldVariableValue, newVariableValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariableValue(VariableValue newVariableValue)
  {
    if (newVariableValue != variableValue)
    {
      NotificationChain msgs = null;
      if (variableValue != null)
        msgs = ((InternalEObject)variableValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ShortDSLPackage.CONDITION_VARIABLE__VARIABLE_VALUE, null, msgs);
      if (newVariableValue != null)
        msgs = ((InternalEObject)newVariableValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ShortDSLPackage.CONDITION_VARIABLE__VARIABLE_VALUE, null, msgs);
      msgs = basicSetVariableValue(newVariableValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ShortDSLPackage.CONDITION_VARIABLE__VARIABLE_VALUE, newVariableValue, newVariableValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ShortDSLPackage.CONDITION_VARIABLE__VARIABLE_VALUE:
        return basicSetVariableValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ShortDSLPackage.CONDITION_VARIABLE__VARIABLE:
        if (resolve) return getVariable();
        return basicGetVariable();
      case ShortDSLPackage.CONDITION_VARIABLE__COMPARISON_OPERATOR_VARIABLE:
        return getComparisonOperatorVariable();
      case ShortDSLPackage.CONDITION_VARIABLE__VARIABLE_VALUE:
        return getVariableValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ShortDSLPackage.CONDITION_VARIABLE__VARIABLE:
        setVariable((VariableS)newValue);
        return;
      case ShortDSLPackage.CONDITION_VARIABLE__COMPARISON_OPERATOR_VARIABLE:
        setComparisonOperatorVariable((COMPARISON_OPERATOR_S)newValue);
        return;
      case ShortDSLPackage.CONDITION_VARIABLE__VARIABLE_VALUE:
        setVariableValue((VariableValue)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.CONDITION_VARIABLE__VARIABLE:
        setVariable((VariableS)null);
        return;
      case ShortDSLPackage.CONDITION_VARIABLE__COMPARISON_OPERATOR_VARIABLE:
        setComparisonOperatorVariable(COMPARISON_OPERATOR_VARIABLE_EDEFAULT);
        return;
      case ShortDSLPackage.CONDITION_VARIABLE__VARIABLE_VALUE:
        setVariableValue((VariableValue)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ShortDSLPackage.CONDITION_VARIABLE__VARIABLE:
        return variable != null;
      case ShortDSLPackage.CONDITION_VARIABLE__COMPARISON_OPERATOR_VARIABLE:
        return comparisonOperatorVariable != COMPARISON_OPERATOR_VARIABLE_EDEFAULT;
      case ShortDSLPackage.CONDITION_VARIABLE__VARIABLE_VALUE:
        return variableValue != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (comparisonOperatorVariable: ");
    result.append(comparisonOperatorVariable);
    result.append(')');
    return result.toString();
  }

} //ConditionVariableImpl
