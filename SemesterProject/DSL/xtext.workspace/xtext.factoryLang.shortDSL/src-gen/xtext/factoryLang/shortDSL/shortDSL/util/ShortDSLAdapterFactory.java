/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.shortDSL.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import xtext.factoryLang.shortDSL.shortDSL.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see xtext.factoryLang.shortDSL.shortDSL.ShortDSLPackage
 * @generated
 */
public class ShortDSLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ShortDSLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ShortDSLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ShortDSLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ShortDSLSwitch<Adapter> modelSwitch =
    new ShortDSLSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseDSL_Long(DSL_Long object)
      {
        return createDSL_LongAdapter();
      }
      @Override
      public Adapter caseDSLType(DSLType object)
      {
        return createDSLTypeAdapter();
      }
      @Override
      public Adapter caseConfigurationS(ConfigurationS object)
      {
        return createConfigurationSAdapter();
      }
      @Override
      public Adapter caseDeviceS(DeviceS object)
      {
        return createDeviceSAdapter();
      }
      @Override
      public Adapter caseConfigurationValueS(ConfigurationValueS object)
      {
        return createConfigurationValueSAdapter();
      }
      @Override
      public Adapter caseDiskHandlingS(DiskHandlingS object)
      {
        return createDiskHandlingSAdapter();
      }
      @Override
      public Adapter caseStatementS(StatementS object)
      {
        return createStatementSAdapter();
      }
      @Override
      public Adapter caseActionS(ActionS object)
      {
        return createActionSAdapter();
      }
      @Override
      public Adapter caseConditionS(ConditionS object)
      {
        return createConditionSAdapter();
      }
      @Override
      public Adapter caseMarkS(MarkS object)
      {
        return createMarkSAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseValue(Value object)
      {
        return createValueAdapter();
      }
      @Override
      public Adapter caseDSLShort(DSLShort object)
      {
        return createDSLShortAdapter();
      }
      @Override
      public Adapter caseCrane(Crane object)
      {
        return createCraneAdapter();
      }
      @Override
      public Adapter caseCraneZone(CraneZone object)
      {
        return createCraneZoneAdapter();
      }
      @Override
      public Adapter caseDisk(Disk object)
      {
        return createDiskAdapter();
      }
      @Override
      public Adapter caseDiskZone(DiskZone object)
      {
        return createDiskZoneAdapter();
      }
      @Override
      public Adapter caseCamera(Camera object)
      {
        return createCameraAdapter();
      }
      @Override
      public Adapter caseCameraColor(CameraColor object)
      {
        return createCameraColorAdapter();
      }
      @Override
      public Adapter caseLoop(Loop object)
      {
        return createLoopAdapter();
      }
      @Override
      public Adapter caseMoveDisk(MoveDisk object)
      {
        return createMoveDiskAdapter();
      }
      @Override
      public Adapter caseMoveCrane(MoveCrane object)
      {
        return createMoveCraneAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter caseConditionVariable(ConditionVariable object)
      {
        return createConditionVariableAdapter();
      }
      @Override
      public Adapter caseConditionDevice(ConditionDevice object)
      {
        return createConditionDeviceAdapter();
      }
      @Override
      public Adapter caseMarkVariable(MarkVariable object)
      {
        return createMarkVariableAdapter();
      }
      @Override
      public Adapter caseMarkValue(MarkValue object)
      {
        return createMarkValueAdapter();
      }
      @Override
      public Adapter caseLocalVariable(LocalVariable object)
      {
        return createLocalVariableAdapter();
      }
      @Override
      public Adapter caseGlobalVariable(GlobalVariable object)
      {
        return createGlobalVariableAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.DSL_Long <em>DSL Long</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.DSL_Long
   * @generated
   */
  public Adapter createDSL_LongAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.DSLType <em>DSL Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.DSLType
   * @generated
   */
  public Adapter createDSLTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.ConfigurationS <em>Configuration S</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.ConfigurationS
   * @generated
   */
  public Adapter createConfigurationSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.DeviceS <em>Device S</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.DeviceS
   * @generated
   */
  public Adapter createDeviceSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.ConfigurationValueS <em>Configuration Value S</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.ConfigurationValueS
   * @generated
   */
  public Adapter createConfigurationValueSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.DiskHandlingS <em>Disk Handling S</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.DiskHandlingS
   * @generated
   */
  public Adapter createDiskHandlingSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.StatementS <em>Statement S</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.StatementS
   * @generated
   */
  public Adapter createStatementSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.ActionS <em>Action S</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.ActionS
   * @generated
   */
  public Adapter createActionSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.ConditionS <em>Condition S</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.ConditionS
   * @generated
   */
  public Adapter createConditionSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.MarkS <em>Mark S</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.MarkS
   * @generated
   */
  public Adapter createMarkSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.Value <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.Value
   * @generated
   */
  public Adapter createValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.DSLShort <em>DSL Short</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.DSLShort
   * @generated
   */
  public Adapter createDSLShortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.Crane <em>Crane</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.Crane
   * @generated
   */
  public Adapter createCraneAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.CraneZone <em>Crane Zone</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.CraneZone
   * @generated
   */
  public Adapter createCraneZoneAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.Disk <em>Disk</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.Disk
   * @generated
   */
  public Adapter createDiskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.DiskZone <em>Disk Zone</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.DiskZone
   * @generated
   */
  public Adapter createDiskZoneAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.Camera <em>Camera</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.Camera
   * @generated
   */
  public Adapter createCameraAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.CameraColor <em>Camera Color</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.CameraColor
   * @generated
   */
  public Adapter createCameraColorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.Loop <em>Loop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.Loop
   * @generated
   */
  public Adapter createLoopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.MoveDisk <em>Move Disk</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.MoveDisk
   * @generated
   */
  public Adapter createMoveDiskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.MoveCrane <em>Move Crane</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.MoveCrane
   * @generated
   */
  public Adapter createMoveCraneAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.ConditionVariable <em>Condition Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.ConditionVariable
   * @generated
   */
  public Adapter createConditionVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.ConditionDevice <em>Condition Device</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.ConditionDevice
   * @generated
   */
  public Adapter createConditionDeviceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.MarkVariable <em>Mark Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.MarkVariable
   * @generated
   */
  public Adapter createMarkVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.MarkValue <em>Mark Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.MarkValue
   * @generated
   */
  public Adapter createMarkValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.LocalVariable <em>Local Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.LocalVariable
   * @generated
   */
  public Adapter createLocalVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.GlobalVariable <em>Global Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.GlobalVariable
   * @generated
   */
  public Adapter createGlobalVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ShortDSLAdapterFactory
