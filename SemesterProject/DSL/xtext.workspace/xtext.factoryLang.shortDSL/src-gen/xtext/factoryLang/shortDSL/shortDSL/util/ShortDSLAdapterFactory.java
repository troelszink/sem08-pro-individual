/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.shortDSL.shortDSL.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import xtext.factoryLang.shortDSL.shortDSL.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see xtext.factoryLang.shortDSL.shortDSL.ShortDSLPackage
 * @generated
 */
public class ShortDSLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ShortDSLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ShortDSLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ShortDSLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ShortDSLSwitch<Adapter> modelSwitch =
    new ShortDSLSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseDSLType(DSLType object)
      {
        return createDSLTypeAdapter();
      }
      @Override
      public Adapter caseConfiguration_Short(Configuration_Short object)
      {
        return createConfiguration_ShortAdapter();
      }
      @Override
      public Adapter caseDevice_Short(Device_Short object)
      {
        return createDevice_ShortAdapter();
      }
      @Override
      public Adapter caseCrane_Short(Crane_Short object)
      {
        return createCrane_ShortAdapter();
      }
      @Override
      public Adapter caseCranePosition_Short(CranePosition_Short object)
      {
        return createCranePosition_ShortAdapter();
      }
      @Override
      public Adapter caseDisk_Short(Disk_Short object)
      {
        return createDisk_ShortAdapter();
      }
      @Override
      public Adapter caseDiskZone_Short(DiskZone_Short object)
      {
        return createDiskZone_ShortAdapter();
      }
      @Override
      public Adapter caseCamera_Short(Camera_Short object)
      {
        return createCamera_ShortAdapter();
      }
      @Override
      public Adapter caseCameraColor_Short(CameraColor_Short object)
      {
        return createCameraColor_ShortAdapter();
      }
      @Override
      public Adapter caseDeviceHandling_Short(DeviceHandling_Short object)
      {
        return createDeviceHandling_ShortAdapter();
      }
      @Override
      public Adapter caseDSLShort(DSLShort object)
      {
        return createDSLShortAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.DSLType <em>DSL Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.DSLType
   * @generated
   */
  public Adapter createDSLTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.Configuration_Short <em>Configuration Short</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.Configuration_Short
   * @generated
   */
  public Adapter createConfiguration_ShortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.Device_Short <em>Device Short</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.Device_Short
   * @generated
   */
  public Adapter createDevice_ShortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.Crane_Short <em>Crane Short</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.Crane_Short
   * @generated
   */
  public Adapter createCrane_ShortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.CranePosition_Short <em>Crane Position Short</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.CranePosition_Short
   * @generated
   */
  public Adapter createCranePosition_ShortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.Disk_Short <em>Disk Short</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.Disk_Short
   * @generated
   */
  public Adapter createDisk_ShortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.DiskZone_Short <em>Disk Zone Short</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.DiskZone_Short
   * @generated
   */
  public Adapter createDiskZone_ShortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.Camera_Short <em>Camera Short</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.Camera_Short
   * @generated
   */
  public Adapter createCamera_ShortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.CameraColor_Short <em>Camera Color Short</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.CameraColor_Short
   * @generated
   */
  public Adapter createCameraColor_ShortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.DeviceHandling_Short <em>Device Handling Short</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.DeviceHandling_Short
   * @generated
   */
  public Adapter createDeviceHandling_ShortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.shortDSL.shortDSL.DSLShort <em>DSL Short</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.shortDSL.shortDSL.DSLShort
   * @generated
   */
  public Adapter createDSLShortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ShortDSLAdapterFactory
