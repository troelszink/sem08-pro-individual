grammar xtext.factoryLang.shortDSL.ShortDSL with org.eclipse.xtext.common.Terminals

generate shortDSL "http://www.factoryLang.xtext/shortDSL/ShortDSL"

Model:
	'use' ('long' 'dsl' type=DSL_Long | 'short' 'dsl' type=DSL_Short);

DSL_Long:
	'test' name=ID;

// -------------------- INDIVIDUAL DSL - EASY TO WRITE, "HARDER" TO READ -------------------- //
DSL_Short returns DSLType:
	{DSLShort} configuration=ConfigurationS diskHandlings+=DiskHandlingS*;

// ----- CONFIGURAITON ----- //
ConfigurationS:
	'devices' '{' BEGIN devices+=DeviceS+ END '}';

DeviceS:
	CraneS | DiskS | CameraS;

CraneS returns DeviceS:
	{Crane} name=ID ':' BEGIN positions+=CraneZoneS+ END;

CraneZoneS returns ConfigurationValueS:
	{CraneZone} name=ID ':' zoneValue=INT (',')?;

DiskS returns DeviceS:
	{Disk} name=ID '(' nSlots=INT ')' ':' BEGIN zones+=DiskZoneS+ END;

DiskZoneS returns ConfigurationValueS:
	{DiskZone} name=ID ':' slot=INT (',')?;

CameraS returns DeviceS:
	{Camera} name=ID ':' BEGIN colors+=CameraColorS+ END;

CameraColorS returns ConfigurationValueS:
	{CameraColor} color=COLOR_S (',')?;

// ----- DEVICE HANDLING ----- //
DiskHandlingS:
	disk=[Disk] '{' BEGIN statements+=StatementS+ END '}';

StatementS:
	LoopS | MoveS | ActionS | ConditionS | MarkS;

LoopS returns StatementS:
	{Loop} 'foreach' variable=LocalVariableS comparisonOperator=COMPARISON_OPERATOR_S slotState=DISK_SLOT_STATES_S ':' BEGIN statements+=StatementS* END;

MoveS returns StatementS:
	MoveDiskS | MoveCraneS;

MoveDiskS returns StatementS:
	{MoveDisk} slot=[Variable] ('->' | '-->') zone=[DiskZone];

MoveCraneS returns StatementS:
	{MoveCrane} crane=[Crane] action=ActionS ('->' | '-->') zone=[CraneZone];

ActionS:
	{Action} ('pickup' | 'drop');

/*ConditionS returns StatementS:
	ConditionVariableS | ConditionDeviceS;*/

ConditionS returns StatementS:
	{Condition} 'if' variable=[Variable] comparisonOperator=COMPARISON_OPERATOR_S value=Value ':' BEGIN statements+=StatementS* END;

/*ConditionDeviceS returns ConditionS:
	{ConditionDevice} 'if' device=[DeviceS] comparisonOperator=COMPARISON_OPERATOR_S value=Value ':' BEGIN statements+=StatementS* END;*/

MarkS returns StatementS:
	MarkVariableS | MarkValueS;

MarkVariableS returns MarkS:
	{MarkVariable} device=[DeviceS] '(' variable=GlobalVariableS (',' time=INT)? ')';

MarkValueS returns MarkS:
	{MarkValue} variable=[LocalVariable] '(' value=Value (',' time=INT)? ')';
	
	

// ----- VALUE TYPES ----- //
/*DeviceValue:
	value=DiskStateValue | value=ColorValue | ref=[ConfigurationValueS];*/

/*DiskSlotValue:
	value=DiskSlotStateValue | value=ColorValue | ref=[Variable];*/

LocalVariableS returns Variable:
	{LocalVariable} name=ID;

GlobalVariableS returns Variable:
	{GlobalVariable} name=ID;

Value:
	valueDiskSlotState=DISK_SLOT_STATES_S | valueDiskState=DISK_STATES_S | valueColor=COLOR_S | valueInt=INT | variable=[Variable]; //| configurationValue=[ConfigurationValueS];

// ----- VALUE TYPES:ACTUAL VALUES ----- //
/*DiskStateValueS:
	value=DISK_STATES_S;

DiskSlotStateValueS:
	value=DISK_SLOT_STATES_S;

ColorValueS:
	value=COLOR_S;

NumberS:
	value=INT;*/

// ----- TERMINALS ----- //
enum COMPARISON_OPERATOR_S:
	EQUAL='=' | LESS_THAN='<' | GREATER_THAN='>' | NOT='!=';

enum COLOR_S:
	RED='red' | GREEN='green' | BLUE='blue';

enum DISK_SLOT_STATES_S:
	FREE='free' | IN_PROGRESS='in_progress' | COMPLETE='complete';

enum DISK_STATES_S:
	FULL='full' | EMPTY='empty';

terminal BEGIN:
	'synthetic:BEGIN';

terminal END:
	'synthetic:END';