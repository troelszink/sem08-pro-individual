grammar xtext.factoryLang.shortDSL.ShortDSL with org.eclipse.xtext.common.Terminals

generate shortDSL "http://www.factoryLang.xtext/shortDSL/ShortDSL"

Model:
	'use' dslType=DSLTypeValue 'dsl' dslProgram=DSLProgram;

DSLProgram:
	DSLLong | DSLShort;

DSLLong returns DSLProgram:
	{DSLLong} 'test' name=ID;

// -------------------- INDIVIDUAL DSL - EASY TO WRITE, "HARDER" TO READ -------------------- //
DSLShort returns DSLProgram:
	{DSLShort} configuration=ConfigurationS diskHandlings+=DiskHandlingS*;

// ----- CONFIGURAITON ----- //
ConfigurationS:
	'devices' '{' BEGIN devices+=DeviceS+ END '}';

DeviceS:
	CraneS | DiskS | CameraS;

CraneS returns DeviceS:
	{Crane} name=ID (logging=LoggingS)? ':' BEGIN targets+=CraneZoneS+ END;

CraneZoneS returns ConfigurationValueS:
	{CraneZone} name=ID ':' zoneValue=INT (',')?;

DiskS returns DeviceS:
	{Disk} name=ID '(' nSlots=INT ')' (logging=LoggingS)? ':' BEGIN targets+=DiskZoneS+ END;

DiskZoneS returns ConfigurationValueS:
	{DiskZone} name=ID ':' slot=INT (',')?;

CameraS returns DeviceS:
	{Camera} name=ID (logging=LoggingS)? ':' BEGIN targets+=CameraColorS+ END;

CameraColorS returns ConfigurationValueS:
	{CameraColor} color=COLOR_S (',')?;

// ----- LOGGING ----- //
LoggingS:
	{Logging} 'logging';

// ----- DISK HANDLING ----- //
DiskHandlingS:
	'handle' disk=[Disk] '{' BEGIN statements+=StatementS+ END '}';

StatementS:
	LoopS | MoveS | CraneActionS | ConditionS | MarkS;

LoopS returns StatementS:
	{Loop} 'foreach' variable=LocalVariableS
	comparisonOperator=COMPARISON_OPERATOR_S slotState=DiskSlotStateValueS
	':' BEGIN statements+=StatementS* END;

MoveS returns StatementS:
	MoveDiskS | MoveAnySlotS | MoveCraneS;

MoveDiskS returns MoveS:
	{MoveDisk} slot=[LocalVariable] ('->' | '-->') zone=[DiskZone];

MoveAnySlotS returns MoveS:
	{MoveAnySlot} state=DiskSlotStateValueS anySlot=LocalVariableS ('->' | '-->') zone=[DiskZone];

MoveCraneS returns MoveS:
	{MoveCrane} crane=[Crane] action=CraneActionS ('->' | '-->') zone=[CraneZone];

CraneActionS:
	{CraneAction} ('pickup' | 'drop');

ConditionS returns StatementS:
	ConditionVariableS | ConditionDeviceS;

ConditionVariableS returns ConditionS:
	{ConditionVariable} 'if' 'var' variable=[VariableS]
	comparisonOperatorVariable=COMPARISON_OPERATOR_S variableValue=VariableValueS
	':' BEGIN statements+=StatementS* END;

ConditionDeviceS returns ConditionS:
	{ConditionDevice} 'if' 'dev' device=[DeviceS]
	comparisonOperatorDevice=COMPARISON_OPERATOR_S deviceValue=DeviceValueS
	':' BEGIN statements+=StatementS* END;

MarkS returns StatementS:
	MarkVariableValueS | MarkCameraValueS;
	
MarkVariableValueS returns MarkS:
	{MarkVariableValue} variable=[VariableS] '(' value=ValueSlotS (',' time=INT unit=TIME_UNIT_S)? ')';

MarkCameraValueS returns MarkS:
	{MarkCameraValue} camera=[Camera] 'scan' variable=LocalVariableS;
	
	

// ----- VALUE TYPES ----- //
VariableS:
	LocalVariableS | GlobalVariableS;

LocalVariableS returns VariableS:
	{LocalVariable} name=ID;

GlobalVariableS returns VariableS:
	{GlobalVariable} name=ID;

VariableValueS:
	value=DiskSlotStateValueS | value=ColorValueS | value=NumberS | value=DiskStateValueS | ref=[VariableS];

DeviceValueS:
	value=DiskStateValueS | value=ColorValueS | configurationValue=[ConfigurationValueS];

ValueSlotS:
	value=DiskSlotStateValueS | value=ColorValueS;


// ----- VALUE TYPES:ACTUAL VALUES ----- //
DSLTypeValue:
	value=DSL_TYPE_ENUM;

DiskStateValueS:
	value=DISK_STATES_S;

DiskSlotStateValueS:
	value=DISK_SLOT_STATES_S;

ColorValueS:
	value=COLOR_S;

NumberS:
	value=INT;

// ----- TERMINALS ----- //
enum DSL_TYPE_ENUM:
	LONG='long' | SHORT='short';

enum COMPARISON_OPERATOR_S:
	EQUAL='=' | LESS_THAN='<' | GREATER_THAN='>' | NOT='!=';

enum COLOR_S:
	RED='red' | GREEN='green' | BLUE='blue';

enum DISK_SLOT_STATES_S:
	FREE='free' | IN_PROGRESS='in_progress' | COMPLETE='complete';

enum DISK_STATES_S:
	FULL='full' | EMPTY='empty';
	
enum TIME_UNIT_S:
	SECOND='s' | MINUTE='m' | HOUR='h';

terminal BEGIN:
	'synthetic:BEGIN';

terminal END:
	'synthetic:END';