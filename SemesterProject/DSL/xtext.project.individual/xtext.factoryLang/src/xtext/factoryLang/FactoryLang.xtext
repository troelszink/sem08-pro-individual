
// FactoryLangLong has with FactoryLangShort
// FactoryLangShort has with ...terminals
//grammar xtext.factoryLang.FactoryLang with xtext.factoryLang.FactoryLangLong
grammar xtext.factoryLang.FactoryLang with org.eclipse.xtext.common.Terminals

generate factoryLang "http://www.factoryLang.xtext/FactoryLang"

Model:
	'use' dslType=DSLTypeValue 'dsl' dslProgram=DSLProgram;

DSLProgram:
	DSLShort | DSLLong;
	

// -------------------- INDIVIDUAL DSL - EASY TO WRITE, "HARDER" TO READ -------------------- //
DSLShort returns DSLProgram:
	{DSLShort} configuration=ConfigurationS diskHandlings+=DiskHandlingS*;

// ----- CONFIGURAITON ----- //
ConfigurationS:
	'devices' '{' BEGIN devices+=DeviceS+ END '}';

DeviceS:
	CraneS | DiskS | CameraS;

CraneS returns DeviceS:
	{CraneS} name=ID (logging=LoggingS)? ':' BEGIN targets+=CraneZoneS+ END;

CraneZoneS returns ConfigurationValueS:
	{CraneZoneS} name=ID ':' zoneValue=INT (',')?;

DiskS returns DeviceS:
	{DiskS} name=ID '(' nSlots=INT ')' (logging=LoggingS)? ':' BEGIN targets+=DiskZoneS+ END;

DiskZoneS returns ConfigurationValueS:
	{DiskZoneS} name=ID ':' slot=INT (',')?;

CameraS returns DeviceS:
	{CameraS} name=ID (logging=LoggingS)? ':' BEGIN targets+=CameraColorS+ END;

CameraColorS returns ConfigurationValueS:
	{CameraColorS} color=COLOR (',')?;

// ----- LOGGING ----- //
LoggingS:
	{LoggingS} 'logging';

// ----- DISK HANDLING ----- //
DiskHandlingS:
	'handle' disk=[DiskS] '{' BEGIN statements+=StatementS+ END '}';

StatementS:
	LoopS | MoveS | CraneActionS | ConditionS | MarkS;

LoopS returns StatementS:
	LoopVariableS | LoopSlotS;

LoopVariableS returns StatementS:
	{LoopVariableS} 'foreach' 'var' ordinaryVariable=OrdinaryVariableS
	comparisonOperator=COMPARISON_OPERATOR_S slotState=DiskSlotStateValue
	':' BEGIN statements+=StatementS* END;

LoopSlotS returns StatementS:
	{LoopSlotS} 'foreach' 'slot' slotVariable=SlotVariableS
	comparisonOperator=COMPARISON_OPERATOR_S slotState=DiskSlotStateValue
	':' BEGIN statements+=StatementS* END;

MoveS returns StatementS:
	MoveDiskS | MoveAnySlotS | MoveCraneS;

MoveDiskS returns MoveS:
	{MoveDiskS} slot=[SlotVariableS] ('->' | '-->') zone=[DiskZoneS];

MoveAnySlotS returns MoveS:
	{MoveAnySlotS} state=DiskSlotStateValue anySlot=SlotVariableS ('->' | '-->') zone=[DiskZoneS];

MoveCraneS returns MoveS:
	{MoveCraneS} crane=[CraneS] action=CraneActionS ('->' | '-->') zone=[CraneZoneS];

CraneActionS:
	{CraneActionS} ('pickup' | 'drop');

ConditionS returns StatementS:
	ConditionVariableS | ConditionDeviceS | ConditionSlotS;

ConditionVariableS returns ConditionS:
	{ConditionVariableS} 'if' 'var' variable=[OrdinaryVariableS]
	comparisonOperator=COMPARISON_OPERATOR_S variableValue=VariableValueS
	':' BEGIN statements+=StatementS* END;
	
ConditionSlotS returns ConditionS:
	{ConditionSlotS} 'if' 'slot' variable=[SlotVariableS]
	comparisonOperator=COMPARISON_OPERATOR_S slotValue=ValueSlotS
	':' BEGIN statements+=StatementS* END;

ConditionDeviceS returns ConditionS:
	{ConditionDeviceS} 'if' 'dev' device=[DeviceS]
	comparisonOperator=COMPARISON_OPERATOR_S deviceValue=DeviceValueS
	':' BEGIN statements+=StatementS* END;

MarkS returns StatementS:
	MarkVariableValueS | MarkCameraValueS;
	
MarkVariableValueS returns MarkS:
	{MarkVariableValueS} variable=[VariableS] '(' value=ValueSlotS (',' time=INT unit=TIME_UNIT_S)? ')';

MarkCameraValueS returns MarkS:
	{MarkCameraValueS} camera=[CameraS] 'scan' variable=OrdinaryVariableS;
	

// ----- VALUE TYPES ----- //
VariableS:
	OrdinaryVariableS | SlotVariableS;

OrdinaryVariableS returns VariableS:
	{OrdinaryVariableS} name=ID;

SlotVariableS returns VariableS:
	{SlotVariableS} name=ID;

VariableValueS:
	value=DiskSlotStateValue | value=ColorValue | value=Number | value=DiskStateValue | ref=[VariableS];

DeviceValueS:
	value=DiskStateValue | value=ColorValue | configurationValue=[ConfigurationValueS];

ValueSlotS:
	value=DiskSlotStateValue | value=ColorValue;



// -------------------- GROUP DSL - EASY TO READ, HARDER TO WRITE -------------------- //
DSLLong returns DSLProgram:
	{DSLLong} configurations+=Configuration+ statements+=Statement+;

// ----- CONFIGURATION ----- //
Configuration:
	'create' device=Device;

Device:
	Crane | Disk | Camera;

// ----- CONFIGURATION:CRANE ----- //
Crane returns Device:
	{Crane} 'crane' 'named' name=ID BEGIN targets+=CraneParameter+ END;

CraneParameter returns Parameter:
	CranePositionParameter;

CranePositionParameter returns CraneParameter:
	{CranePositionParameter} 'with' 'position' 'at' degree=INT 'named' name=ID;

// ----- CONFIGURATION:DISK ----- //
Disk returns Device:
	{Disk} 'disk' 'named' name=ID BEGIN slotParameter=DiskSlotParameter targets+=DiskParameter+ END;

DiskParameter returns Parameter:
	DiskZoneParameter;

DiskSlotParameter returns DiskParameter:
	{DiskSlotParameter} 'with' size=INT 'slots';

DiskZoneParameter returns DiskParameter:
	{DiskZoneParameter} 'with' 'zone' 'named' name=ID 'at' 'slot' slot=INT;

// ----- CONFIGURATION:CAMERA ----- //
Camera returns Device:
	{Camera} 'camera' 'named' name=ID BEGIN targets+=CameraParameter+ END;

CameraParameter returns Parameter:
	CameraColorParameter;

CameraColorParameter returns CameraParameter:
	{CameraColorParameter} 'with' 'scannable' 'color' color=COLOR;

// ----- STATEMENTS ----- //
Statement:
	Conditional | Operation | Loop;

// ----- STATEMENTS:CONDITIONALS ----- //
Conditional returns Statement:
	DeviceConditional | VariableConditional;

DeviceConditional returns Conditional:
	{DeviceConditional} 'if' 'device' device=[Device] 'is' (not_operator='not')? ('at')?
	deviceValue=DeviceValue
	'then' BEGIN statements+=Statement* END;

VariableConditional returns Conditional:
	{VariableConditional} 'if' 'variable' variable=[Variable] 'is'
	(comparison_operator=COMPARISON_OPERATOR)?
	variableValue=VariableValue
	'then' BEGIN statements+=Statement* END;

// ----- STATEMENTS:OPERATIONS ----- //
Operation returns Statement:
	CraneOperation | DiskOperation | CameraOperation;

// ----- STATEMENTS:OPERATIONS:CRANE ----- //
CraneOperation returns Operation:
	CranePickupOperation | CraneDropOperation;

CranePickupOperation returns CraneOperation:
	{CranePickupOperation} device=[Crane] 'pickup' 'item' 'at' target=[CraneParameter];

CraneDropOperation returns CraneOperation:
	{CraneDropOperation} device=[Crane] 'drop' 'item' 'at' target=[CraneParameter];

// ----- STATEMENTS:OPERATIONS:DISK ----- //
DiskOperation returns Operation:
	DiskMoveEmptySlotOperation | DiskMoveVariableSlotOperation | DiskMoveSlotOperation | DiskMarkSlotOperation |
	DiskWaitOperation;

DiskMoveSlotOperation returns DiskOperation:
	{DiskMoveSlotOperation} device=[Disk] 'move' 'slot' 'at' source=[DiskZoneParameter] 'to'
	target=[DiskZoneParameter];

DiskMoveVariableSlotOperation returns DiskOperation:
	{DiskMoveVariableSlotOperation} device=[Disk] 'move' 'slot' 'of' variable=[Variable] 'to'
	target=[DiskZoneParameter];

DiskMoveEmptySlotOperation returns DiskOperation:
	{DiskMoveEmptySlotOperation} device=[Disk] 'move' 'empty' 'slot' 'to' target=[DiskZoneParameter];

DiskMarkSlotOperation returns DiskOperation:
	{DiskMarkSlotOperation} device=[Disk] 'mark' 'slot' 'at' target=[DiskZoneParameter] 'as'
	diskSlotValue=DiskSlotValue ('in' quantity=INT measure=TIME)?;

DiskWaitOperation returns DiskOperation:
	{DiskWaitOperation} device=[Disk] 'wait' 'for' 'new' 'item';

// ----- STATEMENTS:OPERATIONS:CAMERA ----- //
CameraOperation returns Operation:
	CameraScanOperation;

CameraScanOperation returns CameraOperation:
	{CameraScanOperation} device=[Camera] 'scan' 'color' 'into' variable=GlobalVariable;

// ----- STATEMENTS:LOOPS ----- //
Loop returns Statement:
	ForEach;

// ----- STATEMENTS:LOOPS:FOREACH ----- //
ForEach returns Loop:
	{ForEach} 'for' 'each' variable=LocalVariable 'in' device=[Device] 'that' 'is' (operator='not')?
	variableValue=VariableValue
	'then' BEGIN statements+=Statement* END;

// ----- VARIABLES ----- //
LocalVariable returns Variable:
	{LocalVariable} name=ID;

GlobalVariable returns Variable:
	{GlobalVariable} name=ID;

// ----- VALUE TYPES ----- //
DeviceValue:
	value=DiskStateValue | value=ColorValue | ref=[Parameter];

DiskSlotValue:
	value=DiskSlotStateValue | value=ColorValue | ref=[Variable];

VariableValue:
	value=DiskSlotStateValue | value=ColorValue | value=Number | value=DiskStateValue | ref=[Variable];

// ----- VALUE TYPES:ACTUAL VALUES ----- //
DSLTypeValue:
	value=DSL_TYPE_ENUM;

DiskStateValue:
	value=DISK_STATES;

DiskSlotStateValue:
	value=DISK_SLOT_STATES;

ColorValue:
	value=COLOR;

Number:
	value=INT;


// ----- SHARED ENUMS ----- //
enum DSL_TYPE_ENUM:
	LONG='long' | SHORT='short';

enum COMPARISON_OPERATOR_S:
	EQUAL='=' | LESS_THAN='<' | GREATER_THAN='>' | NOT='!=';
	
enum TIME_UNIT_S:
	SECOND='s' | MINUTE='m' | HOUR='h';

enum COMPARISON_OPERATOR:
	UNDEFINED='undefined' | LESS_THAN='less than' | GREATER_THAN='greater than' | NOT='not';

enum COLOR:
	RED='red' | GREEN='green' | BLUE='blue';

enum DISK_SLOT_STATES:
	FREE='free' | IN_PROGRESS='in_progress' | COMPLETE='complete';

enum DISK_STATES:
	FULL='full' | EMPTY='empty';

enum TIME:
	SECONDS='seconds' | SECOND='second' | MINUTES='minutes' | MINUTE='minute' | HOURS='hours' | HOUR='hour';

// ----- TERMINALS ----- //
terminal BEGIN:
	'synthetic:BEGIN';

terminal END:
	'synthetic:END';
