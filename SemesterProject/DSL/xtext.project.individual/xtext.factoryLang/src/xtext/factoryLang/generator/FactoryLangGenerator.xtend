/*
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import xtext.factoryLang.generator.subgenerators.CsprojGenerator
import xtext.factoryLang.generator.subgenerators.ProgramGenerator
import xtext.factoryLang.generator.subgenerators.MqttGenerator
import xtext.factoryLang.factoryLang.DSLLong
import xtext.factoryLang.factoryLang.DSLShort
import xtext.factoryLang.factoryLang.Crane
import xtext.factoryLang.generator.subgenerators.EntityGenerator
import xtext.factoryLang.factoryLang.Disk
import xtext.factoryLang.factoryLang.Camera
import xtext.factoryLang.generator.subgenerators.UppaalGenerator
import xtext.factoryLang.generator.subgenerators.LoggingGenerator
import xtext.factoryLang.factoryLang.Model
import xtext.factoryLang.factoryLang.DSLProgram
import xtext.factoryLang.factoryLang.DSL_TYPE_ENUM
import xtext.factoryLang.factoryLang.DeviceS
import xtext.factoryLang.factoryLang.FactoryLangPackage.Literals
import java.util.List

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FactoryLangGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.allContents.filter(Model).next
		
		val dslType = model.dslType
		val dslTypeValue = dslType.value
		val dslProgram = model.dslProgram as DSLProgram		
		
		if (dslTypeValue == DSL_TYPE_ENUM.SHORT) {
			val dslShort = model.dslProgram as DSLShort
			val devicesShort = dslShort.configuration.devices.toList
			val diskHandlings = dslShort.diskHandlings	
			val rootFolderShort = "OrchestratorServiceShort"
			
			val List<DeviceS> devicesWithLogging = newArrayList
			for (DeviceS device : devicesShort) {
				if (device.eIsSet(Literals.DEVICE_S__LOGGING)) {
					devicesWithLogging.add(device)
				}
			}
			
			try {
				ProgramGenerator.generateShort(fsa, rootFolderShort, devicesShort, devicesWithLogging, diskHandlings)
				//CsprojGenerator.generate(fsa)
				//MqttGenerator.generate(fsa)
				EntityGenerator.generate(fsa, rootFolderShort,
					devicesShort.filter[it instanceof Crane].size> 0, 
					devicesShort.filter[it instanceof Disk].size> 0, 
					devicesShort.filter[it instanceof Camera].size> 0
				)
				if (devicesWithLogging.size > 0) {
					LoggingGenerator.generate(fsa, rootFolderShort)
				}
				UppaalGenerator.generateShort(fsa, resource)
			} catch (Exception e) {
				e.printStackTrace()
			}
		}
		else {
			val dslLong = model.dslProgram as DSLLong
			val devicesLong = dslLong.configurations.map[device]
			val statements = dslLong.statements		
			val rootFolderLong = "OrchestratorServiceLong"
			
			//try {
				ProgramGenerator.generateLong(fsa, rootFolderLong, devicesLong, statements)
				CsprojGenerator.generate(fsa)
				MqttGenerator.generate(fsa)
				EntityGenerator.generate(fsa, rootFolderLong,
					devicesLong.filter[it instanceof Crane].size> 0, 
					devicesLong.filter[it instanceof Disk].size> 0, 
					devicesLong.filter[it instanceof Camera].size> 0
				)
				UppaalGenerator.generateLong(fsa, resource)
			/*} catch (Exception e) {
				e.printStackTrace()
			}*/
		}
	}
}
